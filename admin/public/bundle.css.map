{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/components/Login.svelte",
    "../src/components/Navbar.svelte",
    "../src/components/sessions/CurrentSession.svelte",
    "../src/components/Input.svelte",
    "../src/components/Error.svelte",
    "../src/components/NavbarLink.svelte",
    "../src/components/NotFound.svelte",
    "../src/components/DL.svelte",
    "../src/components/Warning.svelte",
    "../src/components/sessions/Sessions.svelte",
    "../src/components/lessons/Lesson.svelte",
    "../src/components/materials/Material.svelte",
    "../src/components/words/Word.svelte",
    "../src/components/tags/Tags.svelte",
    "../src/components/viewer/ResultsBoard.svelte",
    "../src/components/viewer/Viewer.svelte",
    "../src/components/notifications/NotificationList.svelte",
    "../src/components/Loading.svelte",
    "../src/components/FilterItems.svelte",
    "../src/components/Modal.svelte",
    "../src/components/sessions/AddSession.svelte",
    "../src/components/semesters/SemesterList.svelte",
    "../src/components/students/StudentList.svelte",
    "../src/components/groups/GroupsList.svelte",
    "../src/components/session/ActiveSession.svelte",
    "../src/components/session/StartedSession.svelte",
    "../src/components/session/EndedSession.svelte",
    "../src/components/lessons/LessonList.svelte",
    "../src/components/tags/ItemTagList.svelte",
    "../src/components/lessons/AddMaterialToLesson.svelte",
    "../src/components/lessons/AddWordToLesson.svelte",
    "../src/components/lessons/LessonForm.svelte",
    "../src/components/materials/MaterialsList.svelte",
    "../src/components/words/WordList.svelte",
    "../src/components/viewer/PreclassBoard.svelte",
    "../src/components/viewer/Scoreboard.svelte",
    "../src/components/notifications/NotificationItem.svelte",
    "../src/components/ConfirmDelete.svelte",
    "../src/components/TextStretcher.svelte",
    "../src/components/sessions/SessionListItem.svelte",
    "../src/components/sessions/SessionForm.svelte",
    "../src/components/semesters/SemesterListRow.svelte",
    "../src/components/semesters/SemesterForm.svelte",
    "../src/components/students/StudentListItem.svelte",
    "../src/components/students/FilterStudents.svelte",
    "../src/components/students/AddStudent.svelte",
    "../src/components/groups/GroupsListItem.svelte",
    "../src/components/session/AttendanceForm.svelte",
    "../src/components/session/ConfirmEndSession.svelte",
    "../src/components/session/AttendanceRow.svelte",
    "../src/components/session/PointsPanel.svelte",
    "../src/components/session/ResultsRow.svelte",
    "../src/components/session/EditTimes.svelte",
    "../src/components/tags/AddTagToItem.svelte",
    "../src/components/lessons/AddMaterialRow.svelte",
    "../src/components/lessons/AddWordRow.svelte",
    "../src/components/materials/MaterialForm.svelte",
    "../src/components/words/WordForm.svelte",
    "../src/components/tags/TagForm.svelte",
    "../src/components/tags/TagConnectionsList.svelte",
    "../src/components/viewer/ScoreboardRow.svelte",
    "../src/components/report/Report.svelte",
    "../src/components/IconButton.svelte",
    "../src/components/GroupSelect.svelte",
    "../src/components/DatePicker.svelte",
    "../src/components/sessions/SemesterSelect.svelte",
    "../src/components/sessions/LessonSelect.svelte",
    "../src/components/students/EditStudentGroups.svelte",
    "../src/components/students/StudentForm.svelte",
    "../src/components/groups/GroupForm.svelte",
    "../src/components/session/PointsRow.svelte",
    "../src/components/viewer/Star.svelte",
    "../src/components/report/CreateReport.svelte",
    "../src/components/report/ReportDetails.svelte",
    "../src/components/groups/SemesterSelect.svelte",
    "../src/components/report/EditableTextarea.svelte",
    "../src/components/report/AddWordToReport.svelte",
    "../src/components/report/AddMaterialToReport.svelte",
    "../src/components/report/AddWordRow.svelte",
    "../src/components/report/AddMaterialRow.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { NotificationList } from './components/notifications'\n  import { auth } from './data/auth'\n  import Router, { location } from 'svelte-spa-router'\n  import routes from './routes'\n  import Login from './components/Login.svelte'\n  import Navbar from './components/Navbar.svelte'\n  import CurrentSession from './components/sessions/CurrentSession.svelte'\n</script>\n\n<style>\n  main {\n    height: calc(100% - 5rem);\n    padding: 1rem;\n    margin: 0;\n  }\n</style>\n\n{#if $location !== '/viewer'}\n<Navbar />\n{/if}\n\n<main>\n\n  {#if $auth.username}\n    {#if $location !== '/viewer'}\n      <CurrentSession />\n    {/if}\n    <Router {routes} />\n  {:else}\n    <Login />\n  {/if}\n        \n  </main>\n  \n  {#if location !== '/viewer'}\n    <NotificationList/>\n  {/if}",
    "<script>\n  import { auth } from '../data/auth'\n  import { notifications } from './notifications'\n  import Input from './Input.svelte'\n  import Error from './Error.svelte'\n\n  let username = ''\n  let password = ''\n  let errors = ''\n  let loading = false\n  let show = false\n  let submit\n  let passInput\n  let form\n\n  const login = async () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    loading = true\n    submit.disabled = true\n    try {\n      await auth.login(username, password)\n      notifications.add({ text: `Logged in as '${username}'`, type: 'success' })\n    } catch (error) {\n      errors = error\n      notifications.add({ text: 'Login failed.', type: 'danger' })\n      submit.disabled = false\n    } finally {\n      loading = false\n    }\n  }\n  const showPassword = () => {\n    passInput.type = !show ? 'text' : 'password'\n    show = !show\n  }\n</script>\n\n<style>\n  .container-centered {\n    margin-top: 10vh;\n    display: flex;\n    justify-content: center;\n  }\n\n  .button.showhide {\n    width: 2.4rem;\n    border: none;\n  }\n</style>\n\n<svelte:head>\n  <title>Login</title>\n</svelte:head>\n\n<div class=\"container-centered\">\n  <div class=\"login\">\n    <h1 class=\"title\">Login</h1>\n    <h3 class=\"subtitle\">gotta log in to continue.</h3>\n\n    <Error {errors} />\n    <form bind:this={form} novalidate on:submit|preventDefault={login}>\n      <Input name=\"usernameField\" type=\"text\" bind:value={username} label=\"Username\" required leftIcon=\"user\" />\n\n      <label class=\"label\" for=\"passwordField\">Password</label>\n\n      <div class=\"field has-addons\">\n        <div class=\"control has-icons-left\">\n          <input bind:this={passInput} class=\"input\" bind:value={password} type=\"password\" required />\n          <span class=\"icon is-small is-left\">\n            <i class=\"fas fa-key\"></i>\n          </span>\n        </div>\n        <div class=\"control\">\n          <span class=\"button is-white showhide\" on:click={showPassword}>\n            {#if show}\n            <i class=\"fas fa-eye\"></i>\n            {:else}\n            <i class=\"fas fa-eye-slash\"></i>\n            {/if}\n          </span>\n        </div>\n      </div>\n      <div class=\"field\">\n        <div class=\"control\">\n          <button type=\"submit\"\n            class=\"button is-primary is-loading\"\n            class:is-loading={loading}\n            bind:this={submit}\n          >\n            Let me in!\n          </button>\n        </div>\n      </div>\n    </form>\n    </div>\n  </div>",
    "<script>\n  import { auth } from '../data/auth'\n  import NavbarLink from './NavbarLink.svelte'\n  import { notifications } from './notifications'\n\n  let showMenu = false\n\n  const logout = async () => {\n    const username = await auth.logout()\n    notifications.add({ text: `Logged out user '${username}'`, type: 'success' })\n  }\n</script>\n\n<style>\n  i {\n    margin-right: 0.3rem;\n  }\n\n  .appname {\n    margin: 0;\n  }\n\n  .logo {\n    margin-right: 0.8rem;\n  }\n\n  .navbar {\n    background: transparent;\n    margin: 0;\n  }\n\n  @media only screen and (max-width: 1024px) {\n    #navmenu {\n      padding: 1rem;\n      position: fixed;\n      right: -15rem;\n      width: 15rem;\n      display: inherit;\n      top: 0;\n      bottom: 0;\n      transition: 200ms ease-in-out;\n      height: 100%;\n      background: black;\n    }\n\n    .navbar-burger {\n      z-index: 10;\n    }\n\n    #navmenu.is-active {\n      transform: translate(-15rem);\n    }\n  }\n</style>\n\n<nav class=\"navbar is-black\" role=\"navigation\" aria-label=\"main navigation\">\n  <div class=\"navbar-brand\">\n    <a class=\"navbar-item\" href=\"#/\">\n      <img class=\"logo\" src=\"kumu-logo.png\" height=\"28\" alt=\"levitation logo\" />\n      <span class=\"title is-4 appname\">Kumu</span>\n    </a>\n\n    {#if $auth.username}\n      <div\n        role=\"button\"\n        class=\"navbar-burger burger\"\n        class:is-active={showMenu}\n        aria-label=\"menu\"\n        aria-expanded=\"false\"\n        data-target=\"navmenu\"\n        on:click={() => { showMenu = !showMenu }}\n      >\n        <span aria-hidden=\"true\"></span>\n        <span aria-hidden=\"true\"></span>\n        <span aria-hidden=\"true\"></span>\n      </div>\n    {/if}\n    </div>\n  \n  \n    <div\n      id=\"navmenu\"\n      class=\"navbar-menu\"\n      on:click={() => { showMenu = !showMenu }}\n      class:is-active={showMenu}\n    >\n      <div class=\"navbar-start\">\n        {#if $auth.username}\n        <NavbarLink url=\"/\" text=\"Dashboard\" icon=\"chalkboard-teacher\" />\n        <NavbarLink url=\"/sessions\" text=\"Schedule\" icon=\"calendar-alt\" />\n        <NavbarLink url=\"/groups\" text=\"Groups\" icon=\"users\"  />\n        <NavbarLink url=\"/students\" text=\"Students\" icon=\"address-card\" />\n        <NavbarLink url=\"/semesters\" text=\"Semesters\" icon=\"school\" />\n        <div class=\"navbar-item has-dropdown is-hoverable\">\n          <span class=\"navbar-link\">\n            <i class=\"fas fa-book\"></i>Contents\n          </span>\n          <div class=\"navbar-dropdown\">\n            <NavbarLink url=\"/lessons\" text=\"Lessons\" />\n            <NavbarLink url=\"/materials\" text=\"Materials\" />\n            <NavbarLink url=\"/words\" text=\"Words\" />\n            \n            <hr class=\"navbar-divider\">\n\n            <NavbarLink url=\"/tags\" text=\"Tags\" />\n          </div>\n        </div>\n        {/if}\n      </div>\n  \n      <div class=\"navbar-end\">\n        {#if $auth.username}\n        \n          <NavbarLink url=\"/me\" icon=\"user-circle\" text={$auth.username}/>\n         \n          <div class=\"buttons\">\n            <button class=\"button is-text\" on:click={logout}>\n                  <strong>Log out</strong>\n              </button>\n          </div>\n\n        {/if}\n      </div>\n    </div>\n  </nav>",
    "<script>\n  import { formatDistance } from 'date-fns'\n  import { todaysSessions } from './data'\n  import Warning from '../Warning.svelte'\n  import DL from '../DL.svelte'\n\n  export let active = '/'\n  export let uri = location.pathname\n\n  const dateString = (date) => {\n    const dateTime = new Date(date)\n    return formatDistance(dateTime, new Date(), { addSuffix: true })\n  }\n</script>\n\n<style>\n  div.warning {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  div.warning a {\n    align-self: flex-end;\n  }\n</style>\n\n{#if $todaysSessions && $todaysSessions.now && $todaysSessions.now.stage !== 'Ended'}\n{#if uri !== `/session/${$todaysSessions.now.id}`}\n  <Warning title=\"{$todaysSessions.now.group.name} class is on right now!\">\n    <div class=\"warning\">\n      <DL>\n        <dt>Started:</dt>\n        <dd>{dateString($todaysSessions.now.startsAt)}</dd>\n        <dt>Ends:</dt>\n        <dd>{dateString($todaysSessions.now.endsAt)}</dd>\n        <dt>Status:</dt>\n        <dd>{$todaysSessions.now.stage}</dd>\n      </DL>\n      <a href=\"#/session/{$todaysSessions.now.id}\" class=\"button is-link\"><i class=\"fas fa-running\"></i>&nbsp; Go now</a>\n    </div>\n  </Warning>\n  {/if}\n  {/if}",
    "<script>\n  let input\n  export let value\n  export let showDescription = false\n  export let label = ''\n  let error = false\n  export let required = false\n  export let pattern = '^.+$'\n  export let minlength = 1\n  export let maxlength = null\n  export let type = 'text'\n  export let description = ''\n  export let width = '40rem'\n  export let min = null\n  export let max = null\n  export let rightIcon = null\n  export let leftIcon = null\n  export let placeholder = ''\n\n  $: name = label.replace(/\\W+(.)/g, (match, chr) => chr.toUpperCase())\n  $: descriptionId = `description${name}`\n\n  function checkValidity () {\n    error = !input.validity.valid && input.validationMessage ? input.validationMessage : ''\n  }\n</script>\n\n<div class=\"field\">\n  <label class=\"label\">{label}\n    {#if description}\n          <p class=\"help is-info\" id=\"{descriptionId}\">{description}</p>\n          {/if}\n        </label>\n        <div class=\"field-body\">\n          <div class=\"control\" class:has-icons-left={leftIcon} class:has-icons-right={rightIcon}>\n            {#if type === 'text'}\n            <input bind:this={input} {name} class=\"input\" bind:value class:error={error} type=\"text\" {pattern} {minlength} {maxlength}\n             {required} aria-describedby=\"{descriptionId}\" on:input={checkValidity} on:invalid|preventDefault={checkValidity} {placeholder}/>\n            {/if}\n            {#if type === 'password'}\n            <input bind:this={input} {name} class=\"input\" bind:value class:error={error} type=\"password\" {pattern} {minlength} {maxlength}\n             {required} aria-describedby=\"{descriptionId}\" on:input={checkValidity} on:invalid|preventDefault={checkValidity} {placeholder} />\n            {/if}\n            {#if type === 'date'}\n            <input bind:this={input} {name} class=\"input\" bind:value class:error={error} type=\"date\" pattern=\"^[0-9]{4}-(1[0-2]|0[1-9])-([1-3][0-9]|0[1-9])$\"\n             {required} {max} aria-describedby=\"{descriptionId}\" on:input={checkValidity} on:invalid|preventDefault={checkValidity} />\n            {/if}\n            {#if type === 'datetime-local'}\n            <input bind:this={input} {name} class=\"input\" bind:value class:error={error} type=\"datetime-local\"\n             {required} {max} aria-describedby=\"{descriptionId}\" on:input={checkValidity} on:invalid|preventDefault={checkValidity} />\n            {/if}\n            {#if leftIcon}\n            <span class=\"icon is-small is-left\">\n              <i class=\"fas fa-{leftIcon}\"></i>\n            </span>\n            {/if} {#if rightIcon}\n            <span class=\"icon is-small is-right\">\n              <i class=\"fas fa-{rightIcon}\"></i>\n            </span>\n            {/if}\n            {#if error}\n            <p class=\"help is-danger\">{error}</p>\n            {/if}\n          </div>\n        </div>\n</div>\n\n  \n  <style>\n  input {\n    max-width: 40rem;\n  }\n  </style>",
    "<script>\n  export let errors = ''\n\n  const getMessage = (errors) => {\n    if (!errors) return false\n    return (Array.isArray(errors))\n      ? errors.map(error => error.message).join('\\n')\n      : !errors.message ? errors : errors.message\n  }\n</script>\n\n<style>\n  .error {\n    background: #220000;\n    border-left: 2px solid #ff5555;\n    color: #ff5555;\n    padding: 0.3rem 0.6rem;\n    margin-bottom: 1rem;\n  }\n\n  .error strong {\n    color: inherit;\n  }\n\n  .error-message i {\n    margin-right: 0.3rem;\n  }\n</style>\n\n{#if getMessage(errors)}\n<p class=\"error\">\n    <span class=\"error-message\"><i class=\"fas fa-exclamation-triangle\"></i><strong>Error:</strong>&nbsp;{getMessage(errors)}</span>\n</p>\n{/if}",
    "<script>\n  import { location } from 'svelte-spa-router'\n  export let url = ''\n  export let text = ''\n  export let icon = null\n</script>\n<style>\n  i {\n    margin-right: 0.3rem;\n    width: 20px;\n    text-align: center;\n  }\n\n  @media only screen and (max-width: 1024px) {\n    a.is-active {\n      border-radius: 4px;\n      color: #cb2d6f;\n      font-weight: bold;\n      background-color: inherit;\n    }\n  }\n</style>\n\n<a class=\"navbar-item\" class:is-active={$location === url} href='#{url}'>\n  {#if icon}\n    <i class=\"fas fa-{icon}\"></i>\n  {/if}\n  {text} \n</a>",
    "<script>\n  import { location, pop } from 'svelte-spa-router'\n\n  export let params = {}\n</script>\n<style>\n  .container {\n    margin: 4rem;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n  }\n\n  .primary {\n    color: #cb2d6f;\n  }\n\n  .button {\n    margin-top: 1rem;\n  }\n</style>\n\n<div class=\"container\">\n  <section>\n    <h1 class=\"title is-1 primary\"><i class=\"fas fa-frown-open\"></i>&nbsp;404</h1>\n    <h2 class=\"subtitle is-3\">resource not found</h2>\n\n    {#if params.item}\n      <p>The <strong>{params.item}</strong> {params.id ? `'${params.id}'` : ''} could not be found.</p>\n    {:else }\n      <p>The path '{$location}' leads nowhere</p>\n    {/if}\n    <p>It might be wise to return to the <a href=\"#/\">main page</a>.</p>\n    <button on:click={pop} class=\"button is-link\"><i class=\"fas fa-backward\"></i>&nbsp;go back</button>\n  </section>\n</div>",
    "<style>\n  dl {\n    display: grid;\n    grid-column-gap: 0.5rem;\n    grid-template-columns: [key] auto [value] auto;\n    grid-template-rows: auto;\n    justify-content: start;\n  }\n\n  dl :global(dt) {\n    grid-column: key;\n    justify-self: end;\n    font-weight: bold;\n  }\n\n  dl :global(dd) {\n    grid-column: value;\n    justify-self: start;\n  }\n</style>\n\n<dl>\n  <slot></slot>\n</dl>",
    "<script>\n  export let title = 'Warning'\n</script>\n\n<style>\n  .warning {\n    max-width: 768px;\n    border: 1px solid #ffdd57;\n    color: #ffdd57;\n    margin-bottom: 1rem;\n    border-radius: 4px;\n  }\n\n  .warning :global(strong) {\n    color: inherit;\n  }\n\n  .warning-message-header {\n    margin: 0;\n    padding: 0.3rem 0.5rem;\n    background: #ffdd57;\n    color: black;\n    font-size: 1.2rem;\n  }\n\n  .warning-message-header i {\n    margin-right: 0.3rem;\n  }\n\n  .warning-message-body {\n    padding: 0.3rem 0.6rem;\n  }\n</style>\n\n<div class=\"warning\">\n  <p class=\"warning-message-header\">\n    <i class=\"fas fa-exclamation-triangle\"></i>\n    {title}\n  </p>\n  <section class=\"warning-message-body\">\n    <slot></slot>\n  </section>\n</div>",
    "<script>\n  import { onMount } from 'svelte'\n  import { sessions, sessionsFilter } from './data'\n  import Upcoming from './UpcomingSessions.svelte'\n  import SessionsList from './SessionsList.svelte'\n  import AddSession from './AddSession.svelte'\n\n  let activeComponent = Upcoming\n  let active = 'upcoming'\n\n  onMount(() => {\n    sessions.get()\n    const refetch = setInterval(sessions.get, 5 * 6e+4)\n    return () => { refetch && clearInterval(refetch) }\n  })\n\n  const switchTab = (tab) => {\n    let where = null\n    active = tab\n    if (tab === 'past') {\n      where = { endsAt_lt: new Date().toISOString() }\n    } else if (tab === 'future') {\n      where = { startsAt_gt: new Date().toISOString() }\n    }\n    sessionsFilter.set(where)\n    sessions.get()\n    activeComponent = tab === 'upcoming' ? Upcoming : SessionsList\n  }\n</script>\n\n<style>\n  nav .button.is-outlined:hover {\n    color: white;\n    background: inherit;\n  }\n</style>\n\n<svelte:head>\n  <title>Class schedule</title>\n</svelte:head>\n\n<h1 class=\"title\">\n  Class schedule\n</h1>\n\n<AddSession />\n\n<button class=\"button\" on:click={sessions.get}><i class=\"fas fa-sync\"></i>Reload sessions</button>\n\n<nav class=\"buttons has-addons is-centered\">\n  <button class=\"button is-link\" class:is-outlined={active !== 'upcoming' } on:click={() =>\n    switchTab('upcoming')}>\n    24 hours\n  </button>\n  <button class=\"button is-link\" class:is-outlined={active !== 'past' } on:click={() => switchTab('past')\n    }>\n    Past\n  </button>\n  <button class=\"button is-link\" class:is-outlined={active !== 'future' } on:click={() =>\n    switchTab('future')}>Future</button>\n  <button class=\"button is-link\" class:is-outlined={active !== 'all' } on:click={() => switchTab('all')}>All</button>\n</nav>\n\n<svelte:component this={activeComponent} />",
    "<script>\n  import { onMount } from 'svelte'\n  import { notifications } from '../notifications'\n  import { lesson, lessons } from './data'\n  import marked from 'marked'\n  import Error from '../Error.svelte'\n  import Loading from '../Loading.svelte'\n  import DeleteItem from '../DeleteItem.svelte'\n  import ItemTagList from '../tags/ItemTagList.svelte'\n  import AddMaterialToLesson from './AddMaterialToLesson.svelte'\n  import AddWordToLesson from './AddWordToLesson.svelte'\n  import RemoveMaterialButton from './RemoveMaterialButton.svelte'\n  import RemoveWordButton from './RemoveWordButton.svelte'\n\n  export let params = {}\n  let errors = ''\n  let showDelete = false\n\n  onMount(async () => {\n    if (!$lesson || $lesson.id !== params.id) {\n      try {\n        await lesson.get(params.id)\n      } catch (error) {\n        errors = error\n        notifications.add({ text: 'Could not fetch lesson from the server', type: 'danger' })\n      }\n    }\n  })\n</script>\n\n<style>\n  .materials-list {\n    margin-bottom: 1rem;\n  }\n\n  :global(.summaries p) {\n    margin: 1rem 0 1rem;\n    max-width: 700px;\n  }\n\n  .title.is-4 {\n    margin-top: 1.5rem;\n  }\n\n  section {\n    margin: 1rem;\n  }\n</style>\n\n<svelte:head>\n  <title>Lesson Details</title>\n</svelte:head>\n\n{#if errors}\n  <Error {errors} />\n{/if}\n\n{#if $lesson && $lesson.id === params.id}\n  <h1 class=\"title\">{$lesson.name}</h1>\n\n  <ItemTagList item={$lesson} type=\"lessons\" store={lesson} />\n\n  <section class=\"summaries\">\n    <h2 class=\"title is-4\">Summary (English)</h2>\n    {@html marked($lesson.summaryEN, { breaks: true })}\n  \n    <h2 class=\"title is-4\">Homework (English)</h2>\n    {@html marked($lesson.homeworkEN, { breaks: true })}\n\n    <h2 class=\"title is-4\">Summary (Chinese)</h2>\n    {@html marked($lesson.summaryZH, { breaks: true })}\n  \n    <h2 class=\"title is-4\">Homework (Chinese)</h2>\n    {@html marked($lesson.homeworkZH, { breaks: true })}\n  </section>\n  \n  <section class=\"materials\">\n    <h2 class=\"title is-4\">Materials</h2>\n    {#if $lesson.materials && $lesson.materials.length > 0}\n    <ul class=\"materials-list\">\n      {#each $lesson.materials as material (material.id)}\n        <li>\n          <a href=\"#/material/{material.id}\">{material.title}</a>\n           - {material.type} \n           <RemoveMaterialButton materialId={material.id} /> \n        </li>\n      {/each}\n    </ul>\n    {/if}\n    <AddMaterialToLesson lesson={$lesson} />\n  </section>\n\n  <section class=\"words\">\n    <h2 class=\"title is-4\">Words</h2>\n    {#if $lesson.words && $lesson.words.length > 0}\n    <ul class=\"words-list\">\n      {#each $lesson.words as word (word.id)}\n      <li>\n        <a href=\"#/word/{word.id}\">\n          {word.english} \n          {#if word.chinese}({word.chinese}){/if}\n        </a>\n        <RemoveWordButton wordId={word.id} />\n      </li> \n      {/each}\n    </ul>\n    {/if}\n    <AddWordToLesson />\n  </section>\n\n  <section class=\"actions\">\n    <h2 class=\"title is-4\">Lesson actions</h2>\n    <div class=\"buttons\">\n    <a class=\"button is-primary\" href=\"#/edit-lesson/{$lesson.id}\"><i class=\"fas fa-edit\"></i>Edit</a>\n    <button class=\"button is-danger\" on:click={() => { showDelete = true }}><i class=\"fas fa-trash\"></i>Delete</button>\n    <DeleteItem id={$lesson.id} store={lessons} type=\"lesson\" name={$lesson.title} bind:open={showDelete} />\n  </div>\n  </section>\n\n{:else if !errors}\n  <Loading what=\"Lesson\"/>\n{/if}",
    "<script>\n  import { onMount } from 'svelte'\n  import marked from 'marked'\n  import { push } from 'svelte-spa-router'\n  import { notifications } from '../notifications'\n  import { material, materials } from './data'\n  import Error from '../Error.svelte'\n  import Loading from '../Loading.svelte'\n  import ItemTagList from '../tags/ItemTagList.svelte'\n  import DeleteItem from '../DeleteItem.svelte'\n  import EditMaterial from './EditMaterial.svelte'\n\n  export let params = {}\n  let errors = ''\n  let showDelete = false\n\n  onMount(async () => {\n    if (!$material || $material.id !== params.id) {\n      try {\n        await material.get(params.id)\n        if ($material === null) push(`/not-found/material/${params.id}`)\n      } catch (error) {\n        errors = error\n        notifications.add({ text: 'Could not fetch material from the server', type: 'danger' })\n      }\n    }\n  })\n\n  const truncate = (string) => {\n    if (string.length > 80) {\n      return string.substring(0, 77) + '...'\n    }\n  }\n</script>\n\n<style>\n  :global(.details p) {\n    margin: 1rem 0 1rem;\n    max-width: 700px;\n  }\n\n  .title.is-4 {\n    margin-top: 1.5rem;\n  }\n\n  section {\n    margin: 1rem;\n  }\n</style>\n\n<svelte:head>\n  <title>Material Details</title>\n</svelte:head>\n\n{#if errors}\n  <Error {errors} />\n{/if}\n\n{#if $material && $material.id === params.id}\n  <h1 class=\"title\">{$material.title}</h1>\n\n  <ItemTagList item={$material} type=\"materials\" store={material} />\n\n  <section class=\"details\">\n    <h2 class=\"title is-4\">Material Details</h2>\n    <p>URL: <a href={$material.url}>{truncate($material.url)}</a></p>\n    {#if $material.notes}\n      {@html marked($material.notes, { breaks: true })}\n    {/if}\n  </section>\n\n  <section class=\"buttons\">\n    <EditMaterial material={$material} />\n    <button class=\"button is-danger\" on:click={() => { showDelete = true }}><i class=\"fas fa-trash\"></i>Delete</button>\n    <DeleteItem id={$material.id} store={materials} type=\"material\" name={$material.title} bind:open={showDelete} />\n  </section>\n\n{:else if !errors}\n  <Loading what=\"Material\"/>\n{/if}",
    "<script>\n  import { onMount } from 'svelte'\n  import { push } from 'svelte-spa-router'\n  import { notifications } from '../notifications'\n  import { word, words } from './data'\n  import Error from '../Error.svelte'\n  import Loading from '../Loading.svelte'\n  import ItemTagList from '../tags/ItemTagList.svelte'\n  import EditWord from './EditWord.svelte'\n  import DeleteItem from '../DeleteItem.svelte'\n\n  export let params = {}\n  let errors = ''\n  let showDelete = false\n\n  onMount(async () => {\n    if (!$word || $word.id !== params.id) {\n      try {\n        await word.get(params.id)\n        if ($word === null) push(`/not-found/material/${params.id}`)\n      } catch (error) {\n        errors = error\n        notifications.add({ text: 'Could not fetch word from the server', type: 'danger' })\n      }\n    }\n  })\n</script>\n\n<style>\n  section {\n    margin: 1rem 0;\n  }\n</style>\n\n<svelte:head>\n  <title>Word Details</title>\n</svelte:head>\n\n{#if errors}\n    <Error {errors} />\n  {/if}\n  \n  {#if $word && $word.id === params.id}\n    <h1 class=\"title\">{$word.english}</h1>\n  \n    <p><a href=\"#/words\">&leftarrow;Back to word list</a></p>\n    <ItemTagList type=\"words\" item={$word} store={words} />\n  \n    <section class=\"details\">\n      <h2 class=\"title is-4\">Details</h2>\n        <p><strong>Chinese</strong>: {$word.chinese}</p>\n        <p><strong>Audio</strong>: {$word.audio || 'none'}</p>\n      <h2 class=\"title is-4\">Used in {$word.lessons.length} Lessons</h2>\n      {#if $word.lessons && $word.lessons.length > 0}\n        {#each $word.lessons as lesson (lesson.id)}\n          <li><a href=\"#/lesson/{lesson.id}\">{lesson.name}</a></li>\n        {/each}\n      {/if}\n    </section>\n  \n    <section class=\"buttons\">\n      <EditWord word={$word} />\n      <button class=\"button is-danger\" on:click={() => { showDelete = true }}><i class=\"fas fa-trash\"></i>Delete</button>\n      <DeleteItem id={$word.id} store={words} type=\"word\" name={$word.english} bind:open={showDelete} />\n    </section>\n\n  {:else if !errors}\n    <Loading what=\"word\"/>\n  {/if}",
    "<script>\n  import { onMount } from 'svelte'\n  import { notifications } from '../notifications'\n  import CreateTag from './CreateTag.svelte'\n  import { tags } from './data'\n  import Error from '../Error.svelte'\n  import EditTag from './EditTag.svelte'\n  import DeleteItem from '../DeleteItem.svelte'\n  import Modal from '../Modal.svelte'\n\n  let errors = ''\n  let openTag\n  let deleteTag\n\n  onMount(async () => {\n    try {\n      await tags.get()\n    } catch (error) {\n      errors = error\n      notifications.add({ text: \"Coudn't load tags from server\", type: 'danger' })\n    }\n  })\n</script>\n\n<style>\n  .tag {\n    cursor: pointer;\n  }\n\n  .tag-list {\n    margin-top: 2rem;\n  }\n</style>\n\n<svelte:head>\n  <title>Tags</title>\n</svelte:head>\n\n<h1 class=\"title\">Tags</h1>\n\n<CreateTag />\n\n<Error {errors} />\n\n<div class=\"tag-list\">\n  {#if $tags && $tags.length > 0}\n  <h2 class=\"title is-4\">{$tags.length} tags. Click to edit.</h2>\n  <div class=\"field is-grouped is-grouped-multiline\">\n    {#each $tags as tag (tag.id)}\n    <div class=\"control\">\n        <div class=\"tags has-addons\">\n          <span class=\"tag is-dark\" on:click={() => { openTag = tag }}>{tag.name}</span>\n          {#if tag.connections === 0}\n          <span class=\"tag is-delete\" on:click={() => { deleteTag = tag }}></span>\n          {:else}\n          <span class=\"tag\">{tag.connections}</span>\n          {/if}\n        </div>\n      </div>\n    {/each}\n    </div>\n  {/if}\n</div>\n\n<Modal bind:open={openTag}>\n  {#if openTag}\n    <EditTag bind:openTag />\n  {/if}\n</Modal>\n\n{#if deleteTag}\n<DeleteItem\n  id={deleteTag.id} \n  store={tags} \n  type=\"tag\" \n  name={deleteTag.name} \n  bind:open={deleteTag}\n  next=\"/tags\"\n/>\n{/if}",
    "<script>\n  import { onMount } from 'svelte'\n  import { session, getResults } from '../session/data'\n  import { time } from '../../data/timer'\n  import { formatDistance } from 'date-fns'\n  import Loading from '../Loading.svelte'\n\n  let results = null\n\n  onMount(async () => {\n    results = await getResults($session.id)\n  })\n\n  $: endedDistance = formatDistance(new Date($session.endedAt), new Date($time), { addSuffix: true })\n\n  const groupByPoints = results => {\n    if (!results || results.length === 0) return []\n    const grouped = results.reduce((acc, student) => {\n      const group = student.pointsTally\n      acc[group] = acc[group] || []\n      acc[group].push(student)\n      return acc\n    }, {})\n    const sortedPoints = Object.keys(grouped).sort((a, b) => b - a)\n    return sortedPoints.map((point, i) => {\n      return { total: parseInt(point), students: grouped[point] }\n    })\n  }\n  const listNames = group => {\n    const names = group.map(x => x.student.englishName || x.student.chineseName)\n    return [names.slice(0, -1).join(', '), names.slice(-1)[0]].join(names.length < 2 ? '' : ' and ')\n  }\n\n  $: groupedResults = groupByPoints(results)\n</script>\n\n<style>\n  .results {\n    padding: 2rem;\n  }\n\n  div.winner {\n    border: 6px solid greenyellow;\n    padding: 2rem 0;\n    margin-bottom: 2rem;\n    width: auto;\n    text-align: center;\n    border-radius: 3rem;\n    box-shadow:\n      0 0 0 10px black,\n      0 0 0 12px white;\n    display: flex;\n    justify-content: center;\n    align-items: baseline;\n  }\n\n  .big {\n    font-size: 8rem;\n    margin: 0 2rem;\n  }\n\n  p {\n    font-size: 6rem;\n    margin-bottom: 0.4rem;\n  }\n\n  i.fa-star {\n    color: gold;\n    animation: bounce 700ms linear 500ms infinite;\n    transform-origin: center bottom;\n  }\n\n  @keyframes bounce {\n\n    from,\n    20%,\n    53%,\n    80%,\n    to {\n      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n      transform: translate3d(0, 0, 0);\n    }\n\n    40%,\n    43% {\n      animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n      transform: translate3d(0, -30px, 0);\n    }\n\n    70% {\n      animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n      transform: translate3d(0, -15px, 0);\n    }\n\n    90% {\n      transform: translate3d(0, -4px, 0);\n    }\n  }\n</style>\n\n<audio preload autoplay>\n  <source type='audio/mp3' src='sounds/gamelan_glissando_downward_004_536.mp3'>\n</audio>\n\n<h2 class=\"title\">{$session.group.name} class lesson {$session.number} ended {endedDistance}</h2>\n\n<section class=\"results\">\n  {#if results}\n    {#each groupedResults as group, i (group.total)}\n      {#if i === 0}\n        <div class=\"winner\">\n          <p class=\"big\"><i class=\"fas fa-star bounce\"></i>&times;{group.total} {listNames(group.students)}</p>\n        </div>\n      {:else}\n        <p>{group.total} stars: {listNames(group.students)}</p>\n      {/if}\n    {/each}\n  {:else}\n    <Loading what=\"results\" />\n  {/if}\n</section>\n\n<span class=\"bounce\"></span>",
    "<script>\n  import { onMount } from 'svelte'\n  import { request } from '../../data/fetch-client'\n  import { ws } from '../../data/ws-client'\n  import { ACTIVE_SESSION, ACTIVE_SESSION_SUB } from './queries'\n  import { sessionId, session } from '../session/data'\n  import Loading from '../Loading.svelte'\n  import PreclassBoard from './PreclassBoard.svelte'\n  import Scoreboard from './Scoreboard.svelte'\n  import ResultsBoard from './ResultsBoard.svelte'\n\n  onMount(async () => {\n    const response = await request(ACTIVE_SESSION)\n    if (response.classSessions[0]) {\n      sessionId.set(response.classSessions[0].id)\n    }\n    // subscribe to above\n    const subscription = ws.request({ query: ACTIVE_SESSION_SUB })\n      .subscribe({\n        next(message) {\n          if (!message.data || !message.data.classSessions) return\n          sessionId.set(message.data.classSessions.node.id)\n        }\n      })\n    return () => {\n      subscription && subscription.unsubscribe()\n    }\n  })\n</script>\n\n<style>\n  div {\n    height: 100%;\n    font-family: 'Schoolbell', cursive;\n  }\n</style>\n\n<svelte:head>\n  <title>Viewer</title>\n  <link href=\"https://fonts.googleapis.com/css?family=Schoolbell\" rel=\"stylesheet\">\n  <style>\n    body {\n      background: black;\n    }\n  </style>\n</svelte:head>\n\n<div>\n  {#if !$sessionId}\n    <h2 class=\"title\">No active session found</h2>\n  {:else if !$session}\n    <Loading what=\"session\"/>\n  {:else if $session.stage === 'Active'}\n    <PreclassBoard />\n  {:else if $session.stage === 'Started'}\n    <Scoreboard />\n  {/if}\n\n  {#if $session && $session.stage === 'Ended'}\n    <ResultsBoard />\n  {/if}\n</div>",
    "<script>\n  import { fly } from 'svelte/transition'\n  import NotificationItem from './NotificationItem.svelte'\n  import { notifications } from './data'\n</script>\n\n<style>\n  .notification-list {\n    display: flex;\n    flex-direction: column;\n    position: fixed;\n    top: 3rem;\n    right: 0;\n    margin: 0.5rem;\n    width: auto;\n    max-width: calc(100% - 4rem);\n    z-index: 99;\n  }\n\n  .notification {\n    list-style: none;\n    /* padding: 0 1rem; */\n    /* margin: 0.5rem; */\n    /* box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.2); */\n    width: 100%;\n    background-color: var(--background);\n  }\n</style>\n\n{#if $notifications}\n<div class=\"notification-list\">\n  {#each Object.entries($notifications) as [id, message] (id)}\n  <div transition:fly=\"{{x:400}}\" >\n      <NotificationItem message={message} id={id} />\n  </div>\n   \n  {/each}\n</div>\n{/if}",
    "<script>\n  export let what = 'things'\n</script>\n\n<style>\n  div {\n    width: 100%;\n    text-align: center;\n    padding: 1rem;\n  }\n\n  .spinner {\n    color: #14a098;\n    width: 3rem;\n    padding: 0.5rem;\n  }\n</style>\n\n<div>\n  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"circle-notch\"\n    class=\"svg-inline--fa fa-circle-notch fa-w-16 fa-spin spinner\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 512 512\">\n    <path fill=\"currentColor\"\n      d=\"M288 39.056v16.659c0 10.804 7.281 20.159 17.686 23.066C383.204 100.434 440 171.518 440 256c0 101.689-82.295 184-184 184-101.689 0-184-82.295-184-184 0-84.47 56.786-155.564 134.312-177.219C216.719 75.874 224 66.517 224 55.712V39.064c0-15.709-14.834-27.153-30.046-23.234C86.603 43.482 7.394 141.206 8.003 257.332c.72 137.052 111.477 246.956 248.531 246.667C393.255 503.711 504 392.788 504 256c0-115.633-79.14-212.779-186.211-240.236C302.678 11.889 288 23.456 288 39.056z\">\n    </path>\n  </svg>\n  <p>\n    Loading {what} ...\n  </p>\n</div>",
    "<script>\n  let searchString = ''\n  let loading = false\n  let tagFilter = ''\n  export let searchParams = 'name'\n  export let store\n\n  const getItems = async () => {\n    const where = {}\n    loading = true\n    if (searchString) {\n      where.OR = []\n      if (typeof searchParams === 'string') {\n        searchParams = [searchParams]\n      }\n      searchParams.forEach(param => {\n        const whereItem = {}\n        whereItem[param + '_contains'] = searchString\n        where.OR.push(whereItem)\n      })\n      // where.OR = [{ english_contains: searchString }, { chinese_contains: searchString }]\n    }\n    if (tagFilter) {\n      where.tags_some = { id: tagFilter }\n    }\n    try {\n      await store.get({ where })\n    } catch (error) {\n      console.error(error)\n    } finally {\n      loading = false\n    }\n  }\n\n  $: tags = $store && $store.reduce((tags, item) => {\n    return [...tags, ...item.tags]\n  }, [])\n\n  const unique = tags => {\n    if (!tags) return\n    return tags.reduce((uniqueones, tag) => {\n      if (!uniqueones.find(t => t.id === tag.id)) {\n        uniqueones.push(tag)\n      }\n      return uniqueones\n    }, [])\n  }\n</script>\n\n<style>\n  .filters {\n    display: flex;\n    flex-wrap: wrap;\n    margin: 0.5rem 0;\n  }\n\n  .field {\n    max-width: 15rem;\n    margin-right: 0.5rem;\n  }\n</style>\n\n<section class=\"filters\">\n\n  <div class=\"field\">\n    <div class=\"control search has-icons-left\" class:is-loading={loading}>\n      <input class=\"input\" type=\"text\" bind:value={searchString} on:input={getItems} placeholder=\"Search\">\n      <span class=\"icon is-small is-left\">\n        <i class=\"fas fa-search\"></i>\n      </span>\n    </div>\n  </div>\n\n  {#if tags}\n    <div class=\"field\">\n      <div class=\"control has-icons-left\">\n        <div class=\"select\">\n          <select on:change={getItems} bind:value={tagFilter}>\n            <option value=\"\">No tag filter</option>\n            {#each unique(tags) as tag (tag.id)}\n              <option value={tag.id}>{tag.name}</option>\n            {/each}\n          </select>\n        </div>\n        <div class=\"icon is-small is-left\">\n          <i class=\"fas fa-tag\"></i>\n        </div>\n      </div>\n    </div>\n  {/if}\n\n</section>",
    "<script>\n  import { fade, fly } from 'svelte/transition'\n\n  export let open = false\n\n  const close = () => {\n    open = false\n  }\n</script>\n\n<style>\n  .modal-content {\n    background: black;\n    display: flex;\n    justify-content: center;\n    border-radius: 4px;\n  }\n\n  .modal-content section {\n    padding: 2rem;\n  }\n</style>\n\n{#if open}\n<div class=\"modal is-active\">\n  <div\n    class=\"modal-background\"\n    on:click=\"{close}\"\n    transition:fade|local=\"{{ duration: 200 }}\"\n  ></div>\n  <div\n    class=\"modal-content\"\n    in:fly=\"{{ duration: 200, y: -300 }}\"\n    out:fly=\"{{ duration: 200, y: 300 }}\"\n  >\n    <section class=\"section\">\n      <slot></slot>\n    </section>\n  </div>\n</div>\n{/if}\n",
    "<script>\n  import { formatRelative } from 'date-fns'\n  import { notifications } from '../notifications'\n  import { sessions } from './data'\n  import SessionForm from './SessionForm.svelte'\n  import Modal from '../Modal.svelte'\n\n  let errors = null\n  let open = false\n  let loading = false\n\n  const reset = () => {\n    errors = null\n    open = false\n  }\n\n  const save = async ({ detail }) => {\n    const { groupId, lessonId, startsAt, endsAt } = detail\n    console.log(detail)\n    const startsAtUTC = new Date(startsAt).toISOString()\n    const endsAtUTC = new Date(endsAt).toISOString()\n    loading = true\n    try {\n      const newSession = await sessions.create(startsAtUTC, endsAtUTC, groupId, lessonId)\n      const date = formatRelative(new Date(startsAt), new Date(), { addSuffix: true })\n      notifications.add({ text: `Created new session ${date} with ${newSession.group.name} class`, type: 'success' })\n      reset()\n    } catch (error) {\n      errors = error\n      notifications.add({ text: 'Could not create new session', type: 'danger' })\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  .add-button {\n    margin-bottom: 1rem;\n  }\n</style>\n\n<button class=\"button add-button is-primary\" on:click={() => { open = true } }><i class=\"fas fa-plus\"></i>&nbsp;Add a\n  session</button>\n\n<Modal bind:open>\n  <SessionForm {errors} on:submit={save} on:reset={reset} {loading} />\n</Modal>",
    "<script>\n  import { semesters } from './data'\n  import SemesterListRow from './SemesterListRow.svelte'\n</script>\n\n<style>\n  .semester-list {\n    margin: 1rem 0;\n  }\n\n  p {\n    margin: 1rem 0;\n  }\n</style>\n\n{#if $semesters && $semesters.length}\n<div class=\"semester-list\">\n\t<p>There are {$semesters.length} semesters in the system.</p>\n  {#each $semesters as semester (semester.id)}\n\t<SemesterListRow {semester}></SemesterListRow>\n\t{/each}\n</div>\n{/if}",
    "<script>\n  import { onMount } from 'svelte'\n  import { students } from './data'\n  import { request } from '../../data/fetch-client'\n  import { CURRENT_NEXT_SEMESTER_GROUPS } from '../../data/queries'\n  import StudentListItem from './StudentListItem.svelte'\n  import FilterStudents from './FilterStudents.svelte'\n  import AddStudent from './AddStudent.svelte'\n\n  let semesters\n\n  onMount(async () => {\n    semesters = await request(CURRENT_NEXT_SEMESTER_GROUPS)\n  })\n</script>\n\n<style>\n  .student-list {\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: flex-start;\n  }\n\n  div {\n    margin-top: 1rem;\n  }\n\n  .details {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n</style>\n\n<p class='student-number'>Showing {$students && $students.length} students.</p>\n\n<div>\n  <div class=\"details\">\n    <AddStudent />\n    <FilterStudents />\n  </div>\n\n  {#if $students && $students.length && semesters}\n\n    <div class=\"student-list\">\n      {#each $students as student (student.id)}\n      <StudentListItem {student} {semesters} />\n      {/each}\n    </div>\n{/if}\n</div>",
    "<script>\n  import { groups } from './data'\n  import GroupsListItem from './GroupsListItem.svelte'\n  import AddGroup from './AddGroup.svelte'\n\n  $: sortedGroups = $groups.slice().sort((a, b) => {\n    if (a.semester.startDate > b.semester.startDate) return -1\n    if (a.semester.startDate < b.semester.startDate) return 1\n    if (a.name < b.name) return -1\n    if (a.name > b.name) return 1\n  })\n</script>\n\n<style>\n  .group-list {\n    margin-top: 1rem;\n    list-style: none;\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .groups-count {\n    margin: 1rem 0;\n  }\n</style>\n\n<p class='groups-count'>Showing {$groups && $groups.length} groups sorted by semester.</p>\n\n<div class=\"details\">\n  <AddGroup />\n</div>\n\n{#if $groups && $groups.length}\n<ul class=\"group-list\">\n  {#each sortedGroups as group (group.id)}\n    <GroupsListItem {group} />\n  {/each}\n</ul>\n{/if}",
    "<script>\n  import { formatDistance } from 'date-fns'\n  import { session } from './data'\n  import { request } from '../../data/fetch-client'\n  import { START_CLASS } from './mutations'\n  import Error from '../Error.svelte'\n  import { time } from '../../data/timer'\n  import AttendanceForm from './AttendanceForm.svelte'\n\n  let errors = ''\n\n  const startClass = () => {\n    const now = new Date().toISOString()\n    try {\n      request(START_CLASS, { id: $session.id, now })\n    } catch (error) {\n      errors = error\n    }\n  }\n\n  $: distance = $session &&\n    $time &&\n    formatDistance(new Date($session.startsAt), $time, { addSuffix: true })\n</script>\n\n<style>\n  .late {\n    color: red;\n  }\n</style>\n\n<svelte:head>\n  <title>Active Session</title>\n</svelte:head>\n\n<p class=\"subtitle\" class:late={$session.startsAt < $time.toJSON()}>Scheduled start time: {distance}</p>\n<Error {errors} />\n<AttendanceForm />\n<button class=\"button is-primary\" on:click={startClass}>\n  <i class=\"fas fa-play-circle\"></i>\n  Start class\n</button>",
    "<script>\n  import { session, sessionStudents, pointsLog, points } from './data'\n  import { time } from '../../data/timer'\n  import Modal from '../Modal.svelte'\n  import ConfirmEndSession from './ConfirmEndSession.svelte'\n  import { formatDistance } from 'date-fns'\n  import AttendanceRow from './AttendanceRow.svelte'\n  import PointsPanel from './PointsPanel.svelte'\n\n  let showEndModal = false\n\n  $: startedAt = formatDistance(new Date($session.startedAt), new Date(), { addSuffix: true })\n  $: endsAt = formatDistance(new Date($session.endsAt), new Date(), { addSuffix: true })\n  $: absentStudents = $sessionStudents && $sessionStudents.filter(student => {\n    return student.attendance && student.attendance.status === 'Absent'\n  })\n</script>\n\n<style>\n  .late {\n    color: red;\n  }\n\n  section {\n    margin: 1rem 0;\n  }\n\n  button.end {\n    margin-top: 1rem;\n  }\n</style>\n\n<svelte:head>\n  <title>Started Session</title>\n</svelte:head>\n\n<p class=\"subtitle\">\n  <span class=\"start\">Started: {startedAt}</span>\n  <br>\n  <span class=\"end\" class:late={$session.endsAt < $time.toJSON()}>Scheduled End: {endsAt}</span>\n</p>\n{#if $pointsLog && $pointsLog.length}\n  <button class=\"button is-white\" on:click={() => points.undo($pointsLog[0].id)}>\n    <i class=\"fas fa-undo\"></i>\n    Undo {$pointsLog[0].value} point{$pointsLog[0].value - 1 && 's' || ''} for {$pointsLog[0].student.englishName || $pointsLog[0].student.chineseName}\n  </button>\n{/if}\n\n{#if $sessionStudents}\n  <PointsPanel sessionId={$session.id} />\n\n  {#if absentStudents && absentStudents.length}\n  <section class=\"absent\">\n    <h3 class=\"title is-4\">Absent</h3>\n    {#each absentStudents as student (student.id)}\n      <AttendanceRow {student} sessionId={$session.id} started=\"true\" />\n    {/each}\n  </section>\n  {/if}\n{/if}\n\n<button class=\"button is-primary end\" on:click={() => { showEndModal = true }}>\n  <i class=\"fas fa-hourglass-end\"></i>\n  End class\n</button>\n\n<Modal bind:open={showEndModal}>\n    {#if showEndModal}\n      <ConfirmEndSession bind:open={showEndModal} />\n    {/if}\n  </Modal>",
    "<script>\n  import { session, getResults } from './data'\n  import { time } from '../../data/timer'\n  import { formatDistance, format } from 'date-fns'\n  import DL from '../DL.svelte'\n  import Loading from '../Loading.svelte'\n  import Error from '../Error.svelte'\n  import ResultsRow from './ResultsRow.svelte'\n  import EditTimes from './EditTimes.svelte'\n  import AddLessonToSession from './AddLessonToSession.svelte'\n  import Report from '../report/Report.svelte'\n\n  export let id\n\n  $: endedDistance = formatDistance(new Date($session.endedAt), new Date($time), { addSuffix: true })\n\n  const formatTime = (time) => {\n    if (!time) return\n    const dateTime = new Date(time)\n    if (dateTime.getMinutes() === 0) {\n      return format(dateTime, 'h b')\n    }\n    return format(dateTime, 'p')\n  }\n</script>\n\n<style>\n  section {\n    margin: 1rem 0;\n  }\n</style>\n\n<svelte:head>\n  <title>Ended Session</title>\n</svelte:head>\n\n<p class=\"subtitle\">Ended {endedDistance}</p>\n\n<DL>\n  <dt>Schedule start:</dt>\n  <dd>{formatTime($session.startsAt)}</dd>\n\n  <dt>Actual start:</dt>\n  <dd>{formatTime($session.startedAt)}</dd>\n\n  <dt>Schedule end:</dt>\n  <dd>{formatTime($session.endsAt)}</dd>\n\n  <dt>Actual end:</dt>\n  <dd>{formatTime($session.endedAt)}</dd>\n</DL>\n\n<EditTimes />\n\n{#await getResults(id)}\n  <Loading what=\"results\"/>\n{:then results}\n  <section class=\"results\">\n    <h3 class=\"title is-4\">Results</h3>\n    <ul>\n      {#each results as result (result.id)}\n        <ResultsRow {result} />\n      {/each}\n    </ul>\n  </section>\n{:catch errors}\n  <Error {errors} />\n{/await}\n\n<setion class=\"lesson\">\n  <h3 class=\"title is-4\">Lesson</h3>\n  {#if !$session.lesson}\n    <p>No lesson has been selected yet.</p>\n    <AddLessonToSession id={$session.id} />\n    {:else}\n    <p>{$session.lesson.name}</p>\n  {/if}\n</setion>\n\n<Report />",
    "<script>\n  import { lessons } from './data'\n</script>\n\n<style>\n  section {\n    margin: 0.5rem;\n  }\n\n  li {\n    display: flex;\n    flex-wrap: wrap;\n    margin: 0.5rem 0;\n  }\n\n  .tags {\n    margin-left: 0.5rem;\n  }\n</style>\n\n<section class=\"lesson-list\">\n  {#if $lessons}\n    <p>{$lessons.length} matching lessons found:</p>\n    {#if $lessons.length > 0}\n      {#each $lessons as lesson (lesson.id)}\n        <li><a href=\"#/lesson/{lesson.id}\">{lesson.name}</a>\n        {#if lesson.tags.length > 0}\n        <div class=\"tags\">\n            {#each lesson.tags as tag (tag.id)}\n            <span class=\"tag is-dark\">{tag.name}</span>\n          {/each}\n        </div>\n          \n        {/if}\n        </li>\n      {/each}\n    {/if}\n  {/if}\n</section>",
    "<script>\n  import AddTagToItem from './AddTagToItem.svelte'\n  import TagOnItem from './TagOnItem.svelte'\n\n  export let item\n  export let store\n  export let type\n</script>\n\n<style>\n  .tag-inputs {\n    display: flex;\n    flex-wrap: wrap;\n  }\n</style>\n\n{#if item.tags && item.tags.length > 0}\n  <div class=\"tags\">\n    {#each item.tags as tag (tag.id)}\n      <TagOnItem {tag} itemId={item.id} {store} {type} />\n    {/each}\n  </div>\n{/if}\n  \n<div class=\"tag-inputs\">\n  <AddTagToItem {item} {type} {store} />\n</div>",
    "<script>\n  import { onMount } from 'svelte'\n  import { materials } from '../materials/data'\n  import Modal from '../Modal.svelte'\n  import Error from '../Error.svelte'\n  import AddMaterialRow from './AddMaterialRow.svelte'\n  import FilterItems from '../FilterItems.svelte'\n\n  export let lesson\n  let open = false\n  let errors = ''\n\n  onMount(async () => {\n    try {\n      await materials.get()\n    } catch (error) {\n      errors = error\n    }\n  })\n</script>\n\n<style>\n  .buttons {\n    padding: 1rem 0;\n  }\n</style>\n\n<button class=\"button\" on:click={() => { open = true }}>add material</button>\n\n<Modal bind:open>\n\n  <h2 class=\"title is-4\">Add material to lesson</h2>\n\n  <FilterItems store={materials} searchParams='title' />\n\n  <Error {errors} />\n  <div class=\"results\">\n    {#if $materials }\n    <p>{$materials.length} matches:</p>\n    {#each $materials as material (material.id)}\n      <AddMaterialRow {material} />\n    {/each}\n    {/if}\n  </div>\n\n  <div class=\"buttons\">\n    <button class=\"button\" on:click={() => { open = false }}>Exit</button>\n  </div>\n\n\n</Modal>",
    "<script>\n  import { onMount } from 'svelte'\n  import { words } from '../words/data'\n  import Modal from '../Modal.svelte'\n  import Error from '../Error.svelte'\n  import AddWordRow from './AddWordRow.svelte'\n  import FilterItems from '../FilterItems.svelte'\n\n  let open = false\n  let errors = ''\n\n  onMount(async () => {\n    try {\n      await words.get()\n    } catch (error) {\n      errors = error\n    }\n  })\n</script>\n\n<style>\n  .buttons {\n    padding: 1rem 0;\n  }\n\n  .add {\n    margin-top: 1rem;\n  }\n</style>\n\n<button class=\"button add\" on:click={() => { open = true }}>add words</button>\n\n<Modal bind:open>\n\n  <h2 class=\"title is-4\">Add word to lesson</h2>\n\n  <FilterItems store={words} searchParams={['english', 'chinese']} />\n\n  <Error {errors} />\n\n  <div class=\"results\">\n    {#if $words }\n      <p>{$words.length} matches:</p>\n      {#each $words as word (word.id)}\n        <AddWordRow {word} />\n      {/each}\n      {/if}\n    </div>\n  \n    <div class=\"buttons\">\n      <button class=\"button\" on:click={() => { open = false }}>Exit</button>\n    </div>\n  \n  \n  </Modal>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Input from '../Input.svelte'\n  import Error from '../Error.svelte'\n\n  let saveButton\n  let form\n\n  export let errors\n  export let loading\n  export let name = ''\n  export let summaryEN = ''\n  export let homeworkEN = ''\n  export let homeworkZH = ''\n  export let summaryZH = ''\n  export let id = ''\n  export let tags = []\n\n  const dispatch = createEventDispatcher()\n\n  $: if (saveButton) { saveButton.disabled = loading }\n\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { name, summaryEN, summaryZH, homeworkEN, homeworkZH })\n  }\n</script>\n\n<style>\n  .buttons {\n    padding: 1rem;\n  }\n\n  .field {\n    margin: 1rem;\n    max-width: 700px;\n  }\n</style>\n\n<form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset>\n  <Error {errors} />\n  <div class=\"field\">\n    <Input bind:value={name} label=\"Name\" placeholder=\"i.e. 'My Body part 3'\" required />\n  </div>\n\n  <p>To make report writting easier write the summary in <strong>past tense</strong>.</p>\n  <div class=\"field\">\n    <label class=\"label\">Summary in English</label>\n    <textarea class=\"textarea is-primary\" bind:value={summaryEN}></textarea>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">Homework in English</label>\n    <textarea class=\"textarea is-primary\" bind:value={homeworkEN}></textarea>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">Summary in Chinese</label>\n    <textarea class=\"textarea is-info\" bind:value={summaryZH}></textarea>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">Homework in Chinese</label>\n    <textarea class=\"textarea is-info\" bind:value={homeworkZH}></textarea>\n  </div>\n\n\n  <div class=\"buttons\">\n    <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save\n      lesson</button>\n    <input type=\"reset\" class=\"button\" value=\"Cancel\">\n  </div>\n</form>",
    "<script>\n  export let materials\n</script>\n\n<style>\n  section {\n    margin: 0.5;\n  }\n\n  li {\n    display: flex;\n    flex-wrap: wrap;\n    margin: 0.5rem 0;\n  }\n\n  .type {\n    margin: 0 1rem;\n  }\n</style>\n\n<section class=\"materials-list\">\n  {#if materials}\n    <p>{materials.length} matching materials found:</p>\n    {#each materials as material (material.id)}\n      <li>\n        <a href=\"#/material/{material.id}\">{material.title}</a> <span class=\"type\">{material.type}</span>\n        {#if material.tags && material.tags.length > 0}\n        <div class=\"tags\">\n          {#each material.tags as tag (tag.id)}\n            <span class=\"tag is-dark\">{tag.name}</span>\n          {/each}\n          </div>\n        {/if}\n        </li>\n    {/each}\n  {/if}\n</section>",
    "<script>\n  export let words = []\n</script>\n\n<style>\n  section {\n    margin: 0.5rem;\n  }\n\n  li {\n    display: flex;\n    flex-wrap: wrap;\n    margin: 0.5rem 0;\n  }\n\n  .tags {\n    margin-left: 0.5rem;\n  }\n</style>\n\n<section class=\"word-list\">\n  {#if words.length > 0}\n    <p>{words.length} words found:</p>\n    {#each words as word (word.id)}\n      <li><a href=\"#/word/{word.id}\">{word.english}\n        {#if word.chinese} \n          ({word.chinese})\n        {/if}\n        </a>\n        {#if word.tags && word.tags.length > 0}\n        <div class=\"tags\">\n          {#each word.tags as tag (tag.id)}\n            <span class=\"tag is-dark\">{tag.name}</span>\n          {/each}\n          </div>\n        {/if}\n      </li>\n    {/each}\n  {/if}\n</section>",
    "<script>\n  import { formatDistanceStrict } from 'date-fns'\n  import { session, sessionStudents } from '../session/data'\n  import { time } from '../../data/timer'\n  import TextStretcher from '../TextStretcher.svelte'\n\n  const timeToStart = (startsAt, now) => {\n    return formatDistanceStrict(new Date(startsAt), now, { addSuffix: true })\n  }\n  const timeDirection = (startsAt, now) => {\n    return new Date(startsAt) - now\n  }\n  $: absentStudents = $sessionStudents && $sessionStudents.filter(student => {\n    return !student.attendance || student.attendance.status !== 'Present'\n  }).map(student => (student.englishName || student.chineseName)).join(', ')\n</script>\n\n<style>\n  main {\n    display: flex;\n    flex-flow: column;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n  }\n\n  .late {\n    color: #ff3344;\n  }\n</style>\n\n<main>\n  <TextStretcher text=\"{$session.group.name} class lesson {$session.number}\" maxSize=\"300\" />\n  <div class:late={timeDirection($session.startsAt, $time) < 0}>\n    <TextStretcher text=\"{timeDirection($session.startsAt, $time) > 0 ? 'starts' : 'scheduled to start'}\n        {timeToStart($session.startsAt, $time)}\" />\n  </div>\n\n  {#if absentStudents}\n    <TextStretcher text=\"waiting on {absentStudents}\" minSize=\"32\" maxSize=\"156\" />\n  {/if}\n</main>",
    "<script>\n  import { onMount } from 'svelte'\n  import { ws } from '../../data/ws-client'\n  import { session, sessionStudents, sessionId } from '../session/data'\n  import { points } from './data'\n  import ScoreboardRow from './ScoreboardRow.svelte'\n  import { POINTS_SUB } from '../session/queries'\n\n  let newPoint = null\n\n  const yay = new Audio('sounds/ui-confirmation-alert-a5min.wav')\n  const boo = new Audio('sounds/quick-fart.wav')\n  const opening = new Audio('sounds/gamelan_glissando_upward_002_538.mp3')\n\n  $: console.log($sessionStudents)\n  onMount(() => {\n    opening.play()\n    const subscription = ws\n      .request({\n        query: POINTS_SUB,\n        variables: { classSessionId: $session.id }\n      })\n      .subscribe({\n        next (message) {\n          if (message.data && message.data.points) {\n            const { node, mutation, previousValues } = message.data.points\n            if (mutation === 'CREATED') pointAdded(node)\n            if (mutation === 'DELETED') {\n              points.update(previous => {\n                return previous.filter(point => point.id !== previousValues.id)\n              })\n            }\n          }\n        }\n      })\n    return () => subscription && subscription.unsubscribe()\n  })\n  const setNewPoint = point => {\n    newPoint = point\n    setTimeout(() => {\n      newPoint = null\n    }, 1000)\n  }\n\n  const pointAdded = point => {\n    setNewPoint(point)\n    if (point.value > 0) {\n      yay.play()\n    } else {\n      boo.play()\n    }\n\n    points.update(previous => {\n      return [point, ...previous]\n    })\n  }\n</script>\n\n<style>\n  section {\n    height: calc(100vh - 6rem);\n  }\n\n  ul {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n  }\n</style>\n\n<h2 class=\"title\">{$session.group.name} class lesson {$session.number}</h2>\n\n{#if $sessionStudents}\n<section class=\"scoreboard\">\n  <ul>\n    {#each $sessionStudents as student (student.id)} <ScoreboardRow {student}\n    sessionId={$sessionId} glow={newPoint && newPoint.student.id === student.id}\n    /> {/each}\n  </ul>\n</section>\n{/if}",
    "<script>\n  import { notifications } from './data'\n\n  export let id\n  export let message\n\n  $: text = !message || typeof message === 'string' ? message : message.text\n  $: type = !message || typeof message === 'string' ? 'info' : message.type\n\n  const remove = () => notifications.remove(id)\n</script>\n\n\n<div class=\"notification is-{type}\">\n  <button class=\"delete\" on:click={remove}></button>\n  {text}\n</div>\n\n<style>\n  .notification {\n    margin-bottom: 0.5rem;\n  }\n</style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import Error from './Error.svelte'\n\n  const dispatch = createEventDispatcher();\n\n  export let open = false\n  export let loading = false\n  export let errors = ''\n  export let name = \"item\"\n\n  const handleDelete = async () => {\n    dispatch('delete')\n  }\n  const close = () => { open = false }\n</script>\n\n<style>\n  .buttons {\n    float: right;\n    padding: 1rem;\n  }\n</style>\n\n<h1 class=\"title\">Delete {name}</h1>\n<Error {errors} />\n<p>Permanently delete <slot>\n    <span class=\"placeholder\">item</span>\n  </slot>\n  ?</p>\n<div class=\"buttons\">\n  <button class=\"button is-primary\" disabled={loading} class:is-loading={loading}\n    on:click={handleDelete}>Delete</button>\n  <button class=\"button\" on:click={close}>Keep it</button>\n</div>",
    "<script>\n  let span\n  export let text = 'this is stretchy'\n  export let padding = 5\n  let fontSize = 14\n  export let minSize = 14\n  export let maxSize = 512\n\n  $: if (span) {\n    const availableWidth = span.parentNode.clientWidth\n    const currentWidth = span.scrollWidth\n    fontSize = Math.min(\n      Math.max(\n        minSize,\n        ((availableWidth - fontSize * 2) / currentWidth) * fontSize),\n      maxSize\n    )\n  }\n</script>\n\n<style>\n  .wrapper {\n    display: flex;\n    align-content: flex-start;\n    justify-content: center;\n    flex-wrap: nowrap;\n  }\n</style>\n\n<div class=\"wrapper\">\n  <p bind:this={span} style=\"font-size:{fontSize}px\">\n    {text}\n  </p>\n</div>",
    "<script>\n  import { formatDistance, format, formatRelative } from 'date-fns'\n  import Modal from '../Modal.svelte'\n  import DeleteSession from './DeleteSession.svelte'\n  import EditSession from './EditSession.svelte'\n  import IconButton from '../IconButton.svelte'\n\n  export let session\n  let showDelete = false\n  let showEdit = false\n  let showActions = false\n  export let time = new Date()\n\n  const relativeDate = (date, time) => {\n    if (!date) return\n    return formatDistance(new Date(date), new Date(), { addSuffix: true })\n  }\n\n  const formatTime = (time) => {\n    if (!time) return\n    const dateTime = new Date(time)\n    if (dateTime.getMinutes() === 0) {\n      return format(dateTime, 'h b')\n    }\n    return format(dateTime, 'p')\n  }\n\n  const maybeDate = (date) => {\n    const timeDiff = (new Date(date) - new Date())\n    if (Math.abs(timeDiff) > 8.64e7) { // more than a day ago\n      const dateString = formatRelative(new Date(date), new Date())\n      return ['AM', 'PM'].includes(dateString.slice(-2))\n        ? dateString\n        : `${dateString} ${formatTime(date)}`\n    }\n    return ''\n  }\n  const isCurrentOrPast = (date) => {\n    const now = new Date()\n    const in30 = new Date(now.valueOf() + 30 * 6e+4)\n    return (date < in30.toISOString())\n  }\n</script>\n<style>\n  li {\n    list-style: none;\n    margin: 0;\n    padding: 1rem 0;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  li:nth-child(even) {\n    background: rgba(0, 0, 0, 0.3);\n  }\n\n  .buttons {\n    display: flex;\n    flex-wrap: nowrap;\n  }\n\n  @media only screen and (min-width: 600px) {\n    li {\n      padding: 1rem;\n    }\n  }\n</style>\n\n{#if session}\n<li>\n  {#if isCurrentOrPast(session.startsAt)}\n  <a href=\"#/session/{session.id}\">\n    <span on:click={() => { showActions = !showActions }}>\n    {session.group.name} class {relativeDate(session.startsAt, time)}, {maybeDate(session.startsAt) || formatTime(session.startsAt)} to {formatTime(session.endsAt)}\n  </span>\n</a>\n{:else}\n<span on:click={() => { showActions = !showActions }}>\n    {session.group.name} class {relativeDate(session.startsAt, time)}, {maybeDate(session.startsAt) || formatTime(session.startsAt)} to {formatTime(session.endsAt)}\n  </span>\n{/if}\n\n  <div class=\"buttons\">\n    <IconButton on:click={ () => { showEdit = true }} name=\"edit\" />\n    <IconButton on:click={ () => { showDelete = true }} name=\"minus\" />\n  </div>\n  </li>\n{/if}\n\n<Modal bind:open={showDelete}>\n  {#if showDelete}\n    <DeleteSession {session} bind:open={showDelete} />\n  {/if}\n</Modal>\n\n<Modal bind:open={showEdit}>\n  {#if showEdit}\n    <EditSession {session} bind:open={showEdit} />\n  {/if}\n</Modal>",
    "<script>\n  import { format } from 'date-fns'\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import { semester } from './data'\n  import Input from '../Input.svelte'\n  import Error from '../Error.svelte'\n  import SemesterSelect from './SemesterSelect.svelte'\n  import GroupSelect from '../GroupSelect.svelte'\n  import LessonSelect from './LessonSelect.svelte'\n\n  const dispatch = createEventDispatcher()\n  const defaultStart = new Date()\n  defaultStart.setHours(19)\n  defaultStart.setMinutes(0)\n  const defaultEnd = new Date()\n  defaultEnd.setHours(20)\n  defaultEnd.setMinutes(30)\n\n  export let errors\n  export let loading = false\n  let form\n  let saveButton\n  export let id = ''\n  export let groupId = ''\n  export let startsAt = format(defaultStart, \"yyyy-MM-dd'T'HH:mm\")\n  export let endsAt = format(defaultEnd, \"yyyy-MM-dd'T'HH:mm\")\n  export let lessonId = ''\n\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { id, groupId, startsAt, endsAt, lessonId })\n  }\n</script>\n\n<style>\n  .buttons {\n    padding: 1rem 0;\n  }\n</style>\n\n<h2 class=\"title\">{#if id}Edit{:else}Add{/if} a class session</h2>\n<Error {errors} />\n<form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset>\n  <Input label=\"Start time\" type=\"datetime-local\" bind:value={startsAt} required />\n  <Input label=\"End time\" type=\"datetime-local\" bind:value={endsAt} required />\n <label class=\"label\">\n   Semester & Group\n </label>\n  <SemesterSelect />\n  {#if $semester}\n    <GroupSelect bind:groupId groups={$semester.groups} required />\n  {/if}\n\n  <label class=\"label\">Add lesson</label>\n\n  <LessonSelect bind:lessonId />\n\n  <div class=\"buttons\">\n      <button class=\"button is-primary\" class:is-loading={loading} \n        bind:this={saveButton} type=\"submit\">Save</button>\n      <input class=\"button\" type=\"reset\" value=\"Cancel\" />\n  </div>\n \n</form>",
    "<script>\n  import { semesters } from './data'\n  import DeleteItem from '../DeleteItem.svelte'\n  import EditSemester from './EditSemester.svelte'\n  import Modal from '../Modal.svelte'\n  import IconButton from '../IconButton.svelte'\n\n  let confirmDelete = false\n  let showEdit = false\n  export let semester = {}\n\n  $: startDate = (new Date(semester.startDate)).toDateString()\n  $: endDate = (new Date(semester.endDate)).toDateString()\n\n  const showDeleteDialog = () => { confirmDelete = true }\n</script>\n\n<style>\n  li {\n    list-style: none;\n    border-radius: 4px;\n  }\n\n  li:hover {\n    background: rgba(0, 0, 0, 0.8);\n    padding: 0 10px;\n    margin: 0 -10px;\n  }\n\n  .firstrow {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0.5rem 0;\n    width: 100%;\n  }\n\n  .name {\n    margin-right: 0.6rem;\n    font-weight: bold;\n  }\n\n  .date {\n    white-space: pre;\n    font-size: 80%;\n    color: #ccc;\n  }\n\n  .buttons {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap-reverse;\n    flex-direction: row-reverse;\n    width: 8rem;\n    justify-content: space-between;\n  }\n</style>\n\n<li>\n  <div class=\"firstrow\">\n    <div class=\"info\">\n      <span class=\"name\">{semester.name}</span>\n      <span class=\"date\">{startDate} to {endDate}</span>\n    </div>\n    <div class=\"buttons\">\n      <IconButton name=\"minus\" on:click={showDeleteDialog} />\n      <IconButton name=\"edit\" on:click={ () => { showEdit = true }} />\n    </div>\n  </div>\n\n  <div class=\"action\">\n\n    <DeleteItem id={semester.id} store={semesters} type=\"semester\" name={semester.name} bind:open={confirmDelete} />\n\n    <Modal bind:open={showEdit}>\n      {#if showEdit}\n        <EditSemester {...semester} bind:open={showEdit}></EditSemester>\n      {/if}\n    </Modal>\n  </div>\n</li>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Input from '../Input.svelte'\n  import DatePicker from '../DatePicker.svelte'\n  import Error from '../Error.svelte'\n\n  let saveButton\n  let form\n  let startDate\n  let endDate\n  export let errors\n  export let loading\n  export let name = ''\n  export let defaultDate = null\n  const options = {\n    inline: true,\n    mode: 'range',\n    enableTime: false,\n    altInput: true,\n    altFormat: 'M j, Y',\n    dateFormat: 'Y-m-d'\n  }\n\n  const dispatch = createEventDispatcher()\n\n  $: if (saveButton) { saveButton.disabled = loading }\n\n  const handleChange = (selectedDates) => {\n    if (selectedDates.length === 2) {\n      startDate = selectedDates[0].toISOString()\n      endDate = new Date(selectedDates[1].setHours(23, 59, 59, 999)).toISOString()\n    }\n  }\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { name, startDate, endDate })\n  }\n</script>\n\n<style>\n  .buttons {\n    padding-top: 1rem;\n  }\n\n  form {\n    max-width: 308px;\n  }\n</style>\n\n<h1 class=\"title\">{#if defaultDate}Edit{:else}Create{/if} semester</h1>\n\n  <form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset >\n    <Error {errors}/>\n    <Input bind:value={name} label=\"Name\" placeholder=\"i.e. 'Autumn 1978'\" required />\n    <label class=\"label\" >\n      Start and end dates\n    </label>\n    <DatePicker bind:value={defaultDate} placeholder=\"Pick two dates below\" className=\"input\" {options} \n      on:change={(event) => handleChange(...event.detail)} />\n    <div class=\"buttons\">\n      <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save semester</button>\n      <input type=\"reset\" class=\"button\" value=\"Cancel\">\n    </div>\n  </form>",
    "<script>\n  import { slide } from 'svelte/transition'\n  import { students } from './data'\n  import Modal from '../Modal.svelte'\n  import DeleteItem from '../DeleteItem.svelte'\n  import EditStudent from './EditStudent.svelte'\n  import EditStudentGroups from './EditStudentGroups.svelte'\n  import DL from '../DL.svelte'\n\n  export let student = {}\n  export let semesters = {}\n  let expanded = false\n  let showDelete = false\n  let editShowing = false\n  let groupsShowing = false\n  $: gender = student.gender === 'M' ? 'boy' : 'girl'\n\n  $: birthdate = !student.birthdate ? 'none' : student.birthdate.slice(0, 10)\n  $: groups = !student.groups ? 'none' : student.groups.map(g => {\n    if (!g.name) return\n    return `${g.name} (${g.semester.name})`\n  }).join(', ')\n\n  const showEdit = () => { editShowing = true }\n  const showGroups = () => { groupsShowing = true }\n\n  const getAge = (dateString) => {\n    if (dateString === 'none') return\n    const today = new Date()\n    const birthDate = new Date(dateString)\n    let age = today.getFullYear() - birthDate.getFullYear()\n    const m = today.getMonth() - birthDate.getMonth()\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age--\n    }\n    return age\n  }\n\n  const getCurrentOrNextClass = (groups) => {\n    if (!groups) return\n    if (semesters.currentSemester) {\n      const currentGroup = groups.find(group => {\n        return group.semester.id === semesters.currentSemester.id\n      })\n      if (currentGroup) return `Current ${currentGroup.name} class`\n    }\n    if (semesters.nextSemester) {\n      const nextGroup = groups.find(group => {\n        return group.semester.id === semesters.nextSemester.id\n      })\n      if (nextGroup) return `Next ${nextGroup.name} class`\n    }\n    return 'Not enrolled'\n  }\n\n  $: currentOrNextClass = getCurrentOrNextClass(student.groups)\n</script>\n\n<style>\n  img.portrait {\n    border: 4px solid #aaa;\n  }\n\n  img.F {\n    border: 4px solid lightcoral;\n  }\n\n  img.M {\n    border: 4px solid #5599ff;\n  }\n\n  div.card {\n    padding: 0;\n    margin: 0.3rem;\n    border-radius: 4px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n\n  div.card-content {\n    padding: 1rem;\n  }\n\n  @media only screen and (max-width: 510px) {\n    div.card {\n      width: 100%;\n    }\n\n    div.card-content,\n    .is-4,\n    .is-6 {\n      font-size: 130%;\n    }\n\n    figure img.portrait {\n      width: 96px;\n    }\n  }\n\n  @media only screen and (min-width : 510px) and (max-width : 768px) {\n    div.card {\n      width: 48%;\n    }\n  }\n\n  @media only screen and (min-width: 768px) {\n    div.card {\n      max-width: 320px;\n    }\n\n    figure img.portrait {\n      width: 64px;\n    }\n  }\n\n  li {\n    list-style: none;\n  }\n\n  footer button {\n    border: none;\n    background: transparent;\n    color: #14a098;\n    cursor: pointer;\n    font-size: 1rem;\n  }\n\n  footer button:hover {\n    color: #cb2d6f;\n    background: #2f2f2f;\n  }\n\n  .groups-list {\n    list-style: none;\n    margin: 0;\n  }\n\n  .media {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  .expand-button {\n    margin-left: 1rem;\n    color: #14a098;\n  }\n\n  span.chinese {\n    font-weight: normal;\n  }\n</style>\n\n<div class=\"card\">\n  <div class=\"card-content\">\n    <div class=\"media\" on:click={() => { expanded = !expanded }}>\n      <div class=\"media-left\">\n        <figure class=\"image\">\n          <img src=\"images/{gender}.jpg\" alt=\"portrait\" class=\"is-rounded portrait {student.gender}\">\n        </figure>\n      </div>\n      <div class=\"media-content\">\n        <p><strong>{student.englishName}</strong> <span class=\"chinese\">{student.chineseName}</span></p>\n        <p>{currentOrNextClass}</p>\n        {#if student.birthdate}\n        <p>{getAge(birthdate)} yrs old</p>\n        {/if}\n      </div>\n      <i class=\"expand-button fas fa-angle-{expanded ? 'up' : 'down'}\"></i>\n    </div>\n    {#if expanded}\n    <div transition:slide|local=\"{{ duration: 200 }}\">\n      <DL>\n        <dt>Groups:</dt>\n        <dd>\n          <ul class=\"groups-list\">\n              {#each student.groups as group}\n    <li>{group.name} - {group.semester.name}</li>\n            {:else}\n            none\n            {/each}\n          </ul>\n        </dd>\n\n        <dt>Pinyin:</dt><dd>{student.pinyinName}</dd>\n        <dt>Birthdate:</dt><dd>{birthdate}</dd>\n          <dt>Total points:</dt><dd>{student.pointsTally}</dd>\n      </DL>\n      \n    </div>\n    {/if}\n  </div>\n  <footer class=\"card-footer\">\n    <button class=\"card-footer-item\" on:click={showGroups}>Groups</button>\n    <button class=\"card-footer-item\" on:click={showEdit}>Edit</button>\n    <button class=\"card-footer-item\" on:click={() => { showDelete = true }}>Delete</button>\n  </footer>\n</div>\n\n<DeleteItem\n  id={student.id} \n  store={students} \n  type=\"student\" \n  name=\"{student.englishName} ({student.chineseName})\" \n  bind:open={showDelete} \n/>\n\n<Modal bind:open={editShowing}>\n  {#if editShowing}\n    <EditStudent {student} bind:open={editShowing} />\n  {/if}\n</Modal>\n\n<Modal bind:open={groupsShowing}>\n  {#if groupsShowing}\n    <EditStudentGroups {student} bind:open={groupsShowing} />\n  {/if}\n</Modal>",
    "<script>\n  import { students } from './data'\n\n  let sortParam = 'id'\n  let direction = 1\n  let searchString = ''\n\n  const reload = () => {\n    const directionString = direction === 1 ? 'ASC' : 'DESC'\n    students.get(`${sortParam}_${directionString}`, searchString)\n  }\n  const sort = () => {\n    if (!sortParam) return\n    students.sort(sortParam, direction)\n  }\n  const reverse = () => {\n    direction = -(direction)\n    sort()\n  }\n</script>\n\n<style>\n  .control {\n    margin: 0.5rem;\n  }\n</style>\n\n<div class=\"control search has-icons-left\">\n  <input class=\"input\" type=\"text\" bind:value={searchString} on:input={reload} placeholder=\"Search\">\n  <span class=\"icon is-small is-left\">\n    <i class=\"fas fa-search\"></i>\n  </span>\n</div>\n\n<div class=\"control\">\n  <div class=\"select\">\n    <select bind:value={sortParam} on:change={sort}>\n      <option value=\"id\">Sort by: ID</option>\n      <option value=\"pinyinName\">Chinese name</option>\n      <option value=\"englishName\">English name</option>\n      <option value=\"birthdate\">Age</option>\n      <option value=\"gender\">Gender</option>\n    </select>\n  </div>\n\n  <button class=\"button is-link\" on:click={reverse}><i class=\"fas fa-sort-{direction === -1 ? 'up' : 'down'}\"></i>\n  </button>\n</div>",
    "<script>\n  import { students } from './data'\n  import { notifications } from '../notifications'\n  import Modal from '../Modal.svelte'\n  import StudentForm from './StudentForm.svelte'\n\n  let open = false\n  let errors = null\n  let loading = false\n\n  const reset = () => {\n    errors = null\n    open = false\n  }\n\n  const save = async ({ detail }) => {\n    const { groupId, id, ...input } = detail\n    loading = true\n    try {\n      await students.create(input, groupId)\n      notifications.add({ text: `Created new student: '${detail.englishName}'`, type: 'success' })\n      reset()\n    } catch (error) {\n      errors = error\n      notifications.add({ text: 'Could not save new student', 'type': 'danger' })\n    } finally {\n      loading = false\n    }\n  }\n</script>\n\n<style>\n  button {\n    margin: 0.5rem;\n  }\n</style>\n\n<button class=\"button is-primary\" on:click={()=> open = true}>\n  <i class=\"fas fa-plus\"></i>&nbsp;Add Student\n</button>\n\n<Modal bind:open>\n  <StudentForm on:reset={reset} on:submit={save} {errors} {loading} />\n</Modal>",
    "<script>\n  import { fly } from 'svelte/transition'\n  import { groups } from './data'\n  import Modal from '../Modal.svelte'\n  import EditGroup from './EditGroup.svelte'\n  import DeleteItem from '../DeleteItem.svelte'\n\n  export let group\n  let editShowing = false\n  let showDelete = false\n</script>\n\n<style>\n  .card {\n    min-width: 150px;\n    margin: 0.3rem;\n    display: flex;\n    border-radius: 4px;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n\n  @media only screen and (max-width: 352px) {\n    .card {\n      width: 100%;\n    }\n  }\n\n  @media only screen and (min-width: 352px) and (max-width: 510px) {\n    .card {\n      width: calc(50% - 0.6rem)\n    }\n  }\n\n  footer button {\n    border: none;\n    background: transparent;\n    color: #14a098;\n    cursor: pointer;\n    font-size: 1rem;\n  }\n\n  footer button:hover {\n    color: #cb2d6f;\n    background: #2f2f2f;\n  }\n</style>\n\n<li class=\"card\" in:fly=\"{{ x: 400 }}\" out:fly=\"{{ x: -400 }}\">\n  <div class=\"card-content\">\n    <h3 class=\"title is-4\">{group.name} class</h3>\n    <h4 class=\"subtitle is-6\">{group.semester.name}</h4>\n    {#if group.students && group.students.length}\n    <p><strong>{group.students.length} students</strong></p>\n        <ul class=\"student-list\">\n        {#each group.students as student}\n          <li>{student.chineseName} {student.englishName}</li>\n        {/each}\n        </ul>\n      {/if}\n  </div>\n  \n  <footer class=\"card-footer\">\n    <button class=\"card-footer-item\" on:click={() => { editShowing = true }}>Edit</button>\n    <button class=\"card-footer-item\" on:click={() => { showDelete = true }}>Delete</button>\n  </footer>\n</li>\n\n<Modal bind:open={editShowing}>\n  {#if editShowing}\n    <EditGroup {group} bind:open={editShowing} />\n  {/if}\n</Modal>\n\n<DeleteItem id={group.id} store={groups} type=\"group\" name=\"{group.name} class\" bind:open={showDelete} />",
    "<script>\n  import { sessionStudents, session } from './data'\n  import Loading from '../Loading.svelte'\n  import Error from '../Error.svelte'\n  import AttendanceRow from './AttendanceRow.svelte'\n  import { request } from '../../data/fetch-client'\n  import { MARK_ALL_PRESENT } from './mutations'\n\n  let errors = ''\n\n  const markAllPresent = () => {\n    try {\n      request(MARK_ALL_PRESENT, { classSessionId: $session.id })\n    } catch (error) {\n      errors = error\n    }\n  }\n</script>\n\n<style>\n  section {\n    margin: 1rem 0;\n  }\n\n  button {\n    margin-bottom: 1rem;\n  }\n</style>\n\n<section class=\"attendance-form\">\n  <Error {errors} />\n\n  <button class=\"button is-primary is-inverted\" on:click={markAllPresent}><i class=\"fas fa-clipboard-check\"></i>All\n    present</button>\n  {#if $sessionStudents}\n      {#if $sessionStudents.length}\n        {#each $sessionStudents as student (student.id)}\n          <AttendanceRow {student} sessionId={$session.id} />\n        {/each}\n      {:else}\n        <p>No students were found for this class session.</p>\n      {/if}\n    {:else}\n      <Loading what=\"students\" />\n    {/if}\n</section>",
    "<script>\n  import { session } from './data'\n  import Error from '../Error.svelte'\n  import { format, formatDistance } from 'date-fns'\n  import { request } from '../../data/fetch-client'\n  import { END_CLASS } from './mutations'\n\n  export let open = false\n  let errors = ''\n  let loading = false\n\n  const handleEnd = () => {\n    try {\n      request(END_CLASS, { id: $session.id, now: new Date() })\n    } catch (error) {\n      errors = error\n    }\n  }\n  const endsAt = format(new Date($session.endsAt), 'p')\n  const endsAtDistance = formatDistance(new Date($session.endsAt), new Date(), { addSuffix: true })\n  const startDifference = () => {\n    const starts = new Date($session.startsAt)\n    const started = new Date($session.startedAt)\n    const diff = starts - started\n    const diffString = formatDistance(starts, started)\n    const direction = diff > 0 ? 'early' : 'late'\n    return `${diffString}  ${direction}`\n  }\n</script>\n\n<style>\n  .buttons {\n    margin-top: 2rem;\n    float: right;\n  }\n</style>\n\n<h1 class=\"title\">End {$session.group.name} class lesson {$session.number}</h1>\n<Error {errors} />\n<p>Scheduled end: {endsAt} ({endsAtDistance})</p>\n<p>Class started {startDifference()}</p>\n<br>\n<p>Sure you want to end class now?</p>\n<div class=\"buttons\">\n  <button class=\"button is-primary\" disabled={loading} class:is-loading={loading} on:click={handleEnd}>\n    <i class=\"fas fa-thumbs-up\"></i>\n    End class\n  </button>\n  <button class=\"button\" on:click={() => { open = false }}>Nevermind</button>\n</div>",
    "<script>\n  import { request } from '../../data/fetch-client'\n  import { UPDATE_ATTENDANCE } from './mutations'\n\n  export let student = {}\n  export let sessionId = null\n  export let started = false\n\n  const updateAttendance = () => {\n    const status = present ? 'Absent' : started ? 'Late' : 'Present'\n    try {\n      request(UPDATE_ATTENDANCE, { classSessionId: sessionId, studentId: student.id, status })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n  $: present = !(!student.attendance || student.attendance.status === 'Absent')\n</script>\n\n<style>\n  li {\n    font-size: 1.6rem;\n    list-style: none;\n    padding: 0.5rem 0;\n    cursor: pointer;\n  }\n\n  i.status {\n    margin-right: 0.5rem;\n  }\n\n  li.absent {\n    color: rgba(255, 255, 255, 0.5);\n  }\n</style>\n\n<li on:click={updateAttendance} class:absent={!present}>\n  <i class=\"fas fa-{present ? 'check' : 'dot'}-circle status\"></i>\n  <span class=\"name\">{student.englishName || student.chineseName}</span>\n</li>",
    "<script>\n  import { sessionStudents } from './data'\n  import PointsRow from './PointsRow.svelte'\n\n  export let sessionId\n</script>\n\n<style>\n  section {\n    margin: 1rem 0;\n  }\n</style>\n\n<section class=\"points\">\n  <h3 class=\"title is-4\">Points</h3>\n  <ul>\n    {#each $sessionStudents as student (student.id)}\n    {#if student.attendance && student.attendance.status !== \"Absent\"}\n      <PointsRow {student} {sessionId} />\n    {/if}\n  {/each}\n  </ul>\n</section>",
    "<script>\n  export let result = {}\n\n  const pointsTally = ('0' + result.pointsTally).slice(-2)\n</script>\n\n<style>\n  .absent,\n  .status {\n    color: #bbb;\n  }\n</style>\n\n<li class:absent={result.status===\"Absent\" }>\n  {#if result.status !== \"Absent\"}\n  <span class=\"stars\"><i class=\"fas fa-star\"></i>&times;{pointsTally}</span>\n  {/if}\n\n  <span class=\"name\">{result.student.englishName || result.student.chineseName}</span>\n\n  <span class=\"status\">\n    {#if result.status !== \"Present\"}\n      {result.status}\n    {/if}\n  </span>\n</li>",
    "<script>\n  import { format, formatRelative } from 'date-fns'\n  import { notifications } from '../notifications'\n  import { session } from './data'\n  import { sessions } from '../sessions/data'\n  import Modal from '../Modal.svelte'\n  import EditTimesForm from './EditTimesForm.svelte'\n\n  let open = false\n  let errors = ''\n  let loading = false\n\n  const reset = () => {\n    open = false\n    errors = ''\n  }\n\n  const save = async ({ detail }) => {\n    loading = true\n    detail.startsAt = new Date(detail.startsAt).toISOString()\n    detail.endsAt = new Date(detail.endsAt).toISOString()\n    detail.startedAt = new Date(detail.startedAt).toISOString()\n    detail.endedAt = new Date(detail.endedAt).toISOString()\n    try {\n      const updatedSession = await sessions.patch($session.id, detail)\n      const date = formatRelative(new Date(detail.startsAt), new Date(), { addSuffix: true })\n      notifications.add({ text: `Updated session to ${date} with ${updatedSession.group.name} class`, type: 'success' })\n      reset()\n    } catch (error) {\n      errors = error\n      notifications.add({ text: \"Couldn't save changes to session\", type: 'danger' })\n    } finally {\n      loading = false\n    }\n  }\n\n  const localTime = (time) => format(new Date(time), \"yyyy-MM-dd'T'HH:mm\")\n</script>\n\n<style>\n  .button {\n    margin: 1rem;\n  }\n</style>\n\n<button class=\"button\" on:click={() => { open = true }}>edit times</button>\n\n<Modal bind:open>\n  <EditTimesForm startsAt={localTime($session.startsAt)} endsAt={localTime($session.endsAt)}\n    startedAt={localTime($session.startedAt)} endedAt={localTime($session.endedAt)} {loading} {errors} on:submit={save}\n    on:reset={reset} />\n\n</Modal>",
    "<script>\n  import { onMount } from 'svelte'\n  import { tags } from './data'\n  import { notifications } from '../notifications'\n\n  export let item\n  export let store\n  export let type = ''\n  let newTag = ''\n  let toAdd\n\n  onMount(async () => {\n    if (!$tags) {\n      await tags.get()\n    }\n  })\n\n  $: currentTags = item.tags.length > 0 ? item.tags.map(t => t.id) : []\n  $: otherTags = ($tags && $tags.length > 0) ? $tags.filter(t => !currentTags.includes(t.id)) : []\n\n  const add = async kind => {\n    const input = {}\n    if (kind === 'new') {\n      if (!newTag) return\n      input.tags = { create: { name: newTag } }\n    } else {\n      if (!toAdd) return\n      input.tags = { connect: { id: toAdd } }\n    }\n    try {\n      await store.patch({ input, id: item.id })\n      notifications.add({ text: 'Added tag to item', type: 'success' })\n      newTag = ''\n      toAdd = ''\n    } catch (error) {\n      console.error(error)\n      notifications.add({ text: \"Couldn't add tag to item\", type: 'danger' })\n    }\n  }\n</script>\n\n<style>\n  .select {\n    margin: 0 0.5rem 0.5rem 0;\n  }\n\n  .field {\n    margin-bottom: 0.5rem;\n  }\n\n  input {\n    width: 15rem;\n  }\n\n  .button {\n    border-radius: 0 4px 4px 0;\n  }\n</style>\n\n{#if otherTags}\n<div class=\"select\">\n    <select bind:value={toAdd} on:change={add}>\n      <option value=\"\">Add existing tag</option>\n      {#each otherTags as tag (tag.id)}\n        <option value={tag.id}>{tag.name}</option>\n        {/each}\n    </select>\n  </div>\n{/if}\n\n<div class=\"field has-addons\">\n  <div class=\"control new has-icons-left\">\n    <input class=\"input\" type=\"text\" bind:value={newTag} on:change={ () => add('new') } placeholder=\"new tag\">\n    <span class=\"icon is-small is-left\">\n      <i class=\"fas fa-tag\"></i>\n    </span>\n  </div>\n  <button class=\"button is-success\" on:change={ () => add('new')}>add</button>\n</div>",
    "<script>\n  import { lesson } from './data'\n  import { notifications } from '../notifications'\n\n  export let material\n\n  const toggle = async () => {\n    const input = {}\n    let text = 'Removed material from lesson'\n    if (isAdded) {\n      input.materials = { disconnect: { id: material.id } }\n    } else {\n      text = 'Added material to lesson'\n      input.materials = { connect: { id: material.id } }\n    }\n    try {\n      await lesson.patch({ id: $lesson.id, input })\n      notifications.add({ text, type: 'success' })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  $: isAdded = !!$lesson.materials.find(m => m.id === material.id)\n</script>\n\n<style>\n  li {\n    list-style: none;\n    display: flex;\n  }\n\n  i {\n    margin: 0.2rem 0.5rem;\n  }\n</style>\n\n<li on:click={toggle}>\n  <label class=\"checkbox\">\n    <i class=\"fas fa-{isAdded ? 'check-' : ''}square status\"></i>\n    {material.title} - {material.type}\n  </label>\n</li>",
    "<script>\n  import { lesson } from './data'\n  import { notifications } from '../notifications'\n\n  export let word\n  $: isAdded = !!$lesson.words.find(w => w.id === word.id)\n\n  const toggle = async () => {\n    const input = {}\n    let text = 'Removed word from lesson'\n    if (isAdded) {\n      input.words = { disconnect: { id: word.id } }\n    } else {\n      text = 'Added word to lesson'\n      input.words = { connect: { id: word.id } }\n    }\n    try {\n      await lesson.patch({ id: $lesson.id, input })\n      notifications.add({ text, type: 'success' })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n</script>\n\n<style>\n  li {\n    list-style: none;\n    display: flex;\n  }\n\n  i {\n    margin: 0.2rem 0.5rem;\n  }\n</style>\n\n<li on:click={toggle}>\n  <label class=\"checkbox\">\n    <i class=\"fas fa-{isAdded ? 'check-' : ''}square status\"></i>\n    {word.english}\n    {#if word.chinese}({word.chinese}){/if}\n  </label>\n</li>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Input from '../Input.svelte'\n  import Error from '../Error.svelte'\n\n  export let title = ''\n  export let url = ''\n  export let notes = ''\n  export let type = ''\n  export let id = ''\n  export let errors\n  export let loading\n  let saveButton\n  let form\n\n  const dispatch = createEventDispatcher()\n\n  $: if (saveButton) { saveButton.disabled = loading }\n\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { title, url, notes, type })\n  }\n</script>\n\n<style>\n  .buttons {\n    padding-top: 1rem;\n  }\n</style>\n\n<h1 class=\"title\">{#if id}Edit{:else}Create{/if} material</h1>\n  \n    <form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset >\n      <Error {errors}/>\n\n      <Input bind:value={title} label=\"Title\" placeholder=\"e.g. 'Song: Teacher on the bookcase'\" required />\n      <Input bind:value={url} label=\"Complete URL\" required />\n      <Input bind:value={type} label=\"Filetype\" placeholder=\"e.g. 'audio/mp3'\" required />\n\n      <textarea class=\"textarea\" bind:value={notes}></textarea>\n\n      <div class=\"buttons\">\n        <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save material</button>\n        <input type=\"reset\" class=\"button\" value=\"Cancel\">\n      </div>\n    </form>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Input from '../Input.svelte'\n  import Error from '../Error.svelte'\n\n  export let english = ''\n  export let chinese = ''\n  export let audio = ''\n  export let id = null\n  export let errors\n  export let loading\n  let saveButton\n  let form\n\n  const dispatch = createEventDispatcher()\n\n  $: if (saveButton) { saveButton.disabled = loading }\n\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { english, chinese, audio })\n  }\n</script>\n\n<style>\n  .buttons {\n    padding-top: 1rem;\n  }\n\n  form {\n    max-width: 308px;\n  }\n</style>\n\n<h1 class=\"title\">{#if id}Edit{:else}Create{/if} word</h1>\n    \n      <form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset >\n        <Error {errors}/>\n  \n        <Input bind:value={english} label=\"English\" placeholder=\"e.g. 'bookcase'\" required />\n        <Input bind:value={chinese} label=\"Chinese\" placeholder=\"e.g. '书柜'\" />\n        <Input bind:value={audio} label=\"URL of audio\" />\n  \n        <div class=\"buttons\">\n          <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save word</button>\n          <input type=\"reset\" class=\"button\" value=\"Cancel\">\n        </div>\n      </form>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Error from '../Error.svelte'\n  import Input from '../Input.svelte'\n\n  const dispatch = createEventDispatcher()\n\n  export let name = ''\n  export let id = null\n  export let loading = false\n  export let errors\n  export let connections = null\n\n  let form\n  let saveButton\n\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { id, name })\n  }\n</script>\n\n<style>\n  .buttons {\n    margin-top: 1rem;\n  }\n</style>\n\n<form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset>\n\n  {#if errors}\n   <Error {errors}/>\n  {/if}\n\n  <Input type=\"text\" bind:value={name} label={id ? 'Name' : 'New tag name'} />\n\n  <div class=\"buttons\">\n    <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save Tag</button>\n    <input type=\"reset\" class=\"button\" value=\"Cancel\">\n   </div>\n\n</form>",
    "<script>\n  import { onMount } from 'svelte'\n  import { notifications } from '../notifications'\n  import { tag } from './data'\n  import Loading from '../Loading.svelte'\n  import Error from '../Error.svelte'\n\n  export let id\n  let errors = ''\n\n  onMount(async () => {\n    if (!$tag || $tag.id !== id) {\n      try {\n        await tag.get(id)\n      } catch (error) {\n        errors = error\n        notifications.add({ text: 'Could not get related items from server', type: 'danger' })\n      }\n    }\n  })\n</script>\n\n<style>\n  section {\n    margin: 0.5rem 0;\n    padding: 0.5rem 0;\n  }\n</style>\n\n<section class=\"errors\">\n  <Error {errors} />\n</section>\n\n{#if $tag && $tag.id === id}\n\n  {#if $tag.materials.length > 0}\n  <section class=\"materials\">\n    <h2 class=\"title is-4\">Materials</h2>\n    {#each $tag.materials as material (material.id)}\n      <a href=\"#/material/{material.id}\">{material.title}</a>\n    {/each}\n  </section>\n  {/if}\n\n  {#if $tag.lessons.length > 0}\n  <section class=\"lessons\">\n    <h2 class=\"title is-4\">Lessons</h2>\n    {#each $tag.lessons as lesson (lesson.id)}\n      <a href=\"#/lesson/{lesson.id}\">{lesson.name}</a>\n    {/each}\n  </section>\n  {/if}\n\n  {#if $tag.words.length > 0}\n  <section class=\"words\">\n    <h2 class=\"title is-4\">Words</h2>\n    {#each $tag.words as word (word.id)}\n      <a href=\"#/word/{word.id}\">{word.english}</a>\n    {/each}\n  </section>\n  {/if}\n\n{:else if !errors}\n  <Loading what=\"connections\"/>\n{/if}",
    "<script>\n  import { fly } from 'svelte/transition'\n  import { points } from './data'\n  import Star from './Star.svelte'\n  export let student\n  export let sessionId\n  export let glow = false\n\n  $: pointsTally = $points ? $points.reduce((sum, point) => {\n    if (point.student.id !== student.id) return sum\n    return sum + point.value\n  }, 0) : 0\n</script>\n\n<style>\n  li {\n    position: relative;\n    width: 100%;\n  }\n\n  .content {\n    display: flex;\n    position: relative;\n    align-items: center;\n    flex-wrap: wrap;\n    background: transparent;\n    z-index: 10;\n    width: auto;\n  }\n\n  div.bg {\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 8rem;\n    z-index: 1;\n    transition: all 1s ease-out;\n    background: white;\n    border-radius: 10px;\n  }\n\n  div.bg.glow {\n    opacity: 0.1;\n  }\n\n  .name {\n    font-size: 4rem;\n    margin: 1rem;\n    width: 15rem;\n  }\n\n  @keyframes grow {\n    0% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n\n    50% {\n      -webkit-transform: scale(1.3);\n      transform: scale(1.3);\n    }\n\n    100% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n\n  .name.glow {\n    -webkit-animation-name: grow;\n    animation-name: grow;\n    -webkit-animation-duration: 1s;\n    animation-duration: 1s;\n    -webkit-animation-timing-function: ease-out;\n    animation-timing-function: ease-out;\n  }\n\n  .absent {\n    color: rgba(140, 140, 140, 0.5);\n  }\n</style>\n\n<li>\n  <div class=\"content\">\n    <span class=\"name\" class:glow class:absent={!student.attendance || student.attendance.status === 'Absent' }>\n      {student.englishName || student.chineseName}\n    </span>\n    {#if student.attendance && student.attendance.status !== 'Absent'}\n          {#each { length: pointsTally } as point, i}\n            <div in:fly=\"{{ x: -400 }}\" >\n              <Star index={i} size=\"5rem\" />\n            </div>\n          {/each}\n        {/if}\n  </div>\n  <div class=\"bg\" class:glow></div>\n</li>",
    "<script>\n  import { session } from '../session/data'\n  import CreateReport from './CreateReport.svelte'\n  import ReportDetails from './ReportDetails.svelte'\n  import PublishReportButton from './PublishReportButton.svelte'\n</script>\n\n<style>\n  section {\n    margin: 1rem 0;\n  }\n</style>\n\n<section class=\"report\">\n  <h3 class=\"title is-4\">Report</h3>\n  {#if !$session.lesson}\n      <p>A lesson must be added before a report can be created.</p>\n    {:else if $session && !$session.report}\n      <p>No report exists for this session.</p>\n      <CreateReport classSessionId={$session.id} />\n    {:else}\n      <PublishReportButton classSessionId={$session.id} />\n      <!-- show the detials of the report here -->\n      <ReportDetails report={$session.report} classSessionId={$session.id} />\n    {/if}\n</section>",
    "<script>\n  export let name = ''\n  export let color = 'white'\n  export let disabled = false\n</script>\n\n<style>\n  button {\n    cursor: pointer;\n    border: none;\n    background: none;\n    border-radius: 4px;\n    padding: 0;\n    margin: 0.5rem;\n    font-size: inherit;\n    outline: none;\n  }\n\n  i {\n    color: var(--color);\n  }\n\n  button:disabled i {\n    color: grey;\n  }\n\n  button:hover {\n    color: #bbb;\n  }\n</style>\n\n<button on:click {disabled}><i class=\"fas fa-{name}\" style=\"--color: {color}\"></i></button>",
    "<script>\n  import { onMount } from 'svelte'\n  import { request } from '../data/fetch-client'\n  import { ACTIVE_GROUPS } from '../data/queries'\n\n  export let groups = null\n  let selectElement\n  let errors = ''\n  export let groupId = ''\n  export let required = false\n\n  onMount(async () => {\n    if (!groups) {\n      try {\n        const result = await request(ACTIVE_GROUPS)\n        groups = !result ? [] : result.activeGroups\n      } catch (error) {\n        errors = error\n      }\n\n   }\n  })\n\n  function checkValidity () {\n    errors = !selectElement.validity.valid && selectElement.validationMessage\n      ? selectElement.validationMessage\n      : ''\n  }\n</script>\n\n<style>\n  .field {\n    margin-bottom: 1rem;\n  }\n</style>\n\n<div class=\"field\">\n  <div class=\"select\">\n    <select bind:value={groupId} bind:this={selectElement} class:is-loading={!groups}\n      on:invalid|preventDefault={checkValidity} {required}>\n      {#if groups}\n      {#if groups.length}\n      <option value=\"\">Select group...</option>\n      {#each groups as group}\n        <option value={group.id}>{group.semester ? group.semester.name + ' ': \"\"}{group.name} class</option>\n      {/each}\n      {:else}\n      <option>No active groups</option>\n      {/if}\n    {:else}\n      <option>Loading groups ...</option>\n    {/if}\n  </select>\n</div>\n{#if errors} \n<p class=\"help is-danger\">{JSON.stringify(errors)}</p>\n{/if}\n</div>",
    "<!-- Most of this is adapted from svelte-flatpickr, modified to work with svelte3 -->\n<script>\n  import flatpickr from 'flatpickr'\n  import { onMount, onDestroy, createEventDispatcher } from 'svelte'\n  import 'flatpickr/dist/flatpickr.css'\n  import '../../public/calendar-theme.css'\n\n  const dispatch = createEventDispatcher()\n\n  let dateInput\n  let fp\n  export let value\n  export let placeholder = ''\n  export let className = ''\n  export let options = {}\n\n  const hooks = new Set([\n    'onChange',\n    'onOpen',\n    'onClose',\n    'onMonthChange',\n    'onYearChange',\n    'onReady',\n    'onValueUpdate',\n    'onDayCreate'\n  ])\n\n  onMount(() => {\n    fp = flatpickr(dateInput, addHooks(options))\n  })\n\n  $: if (fp && value) {\n    fp.setDate(value)\n  }\n\n  onDestroy(() => { if (fp && 'destroy' in fp) fp.destroy() })\n\n  const addHooks = (options) => {\n    options = Object.assign({}, options)\n    for (let hook of hooks) {\n      let dispatcher = (selectedDates, dateString, instance) => {\n        dispatch(stripOn(hook), [selectedDates, dateString, instance])\n      }\n      if (hook in options) {\n        // Hooks must be arrays\n        if (!Array.isArray(options[hook])) {\n          options[hook] = [options[hook]]\n        }\n        options[hook].push(dispatcher)\n      } else {\n        options[hook] = [dispatcher]\n      }\n    }\n    if (options.onChange && !options.onChange.includes(updateValue)) {\n      options.onChange.push(updateValue)\n    }\n    return options\n  }\n  const updateValue = (newValue) => {\n    if (Array.isArray(newValue) && newValue.length === 1) {\n      newValue = newValue[0]\n    }\n    value = newValue\n  }\n  const stripOn = (hook) => {\n    return hook.charAt(2).toLowerCase() + hook.substring(3)\n  }\n</script>\n\n<style>\n  input {\n    width: 308px;\n  }\n</style>\n\n<input bind:this={dateInput} bind:value type=\"date\" class={className} placeholder={placeholder} />",
    "<script>\n  import { onMount } from 'svelte'\n  import { semesters } from '../semesters/data'\n  import { semester } from './data'\n\n  let semesterSelect\n\n  onMount(async () => {\n    await semesters.get()\n    if (!$semester) { // not already chosen then get default\n      const now = new Date().toISOString()\n      const current = $semesters.find(s => s.startDate < now && s.endDate > now)\n      if (current) {\n        semester.set(current)\n      }\n    }\n  })\n\n  const handleChange = () => {\n    const chosen = $semesters.find(s => s.id === semesterSelect.value)\n    semester.set(chosen)\n  }\n</script>\n\n<style>\n  .select {\n    margin-bottom: 1rem;\n  }\n</style>\n\n<div class=\"select\">\n\n  <select value={$semester && $semester.id} on:change={handleChange} bind:this={semesterSelect}>\n    {#if $semesters}\n    {#each $semesters as {id, name} (id)}\n    <option value={id}>{name}</option>\n    {/each}\n    {:else}\n    <option value=\"\">Loading semesters...</option>\n    {/if}\n  </select>\n</div>",
    "<script>\n  import { onMount } from 'svelte'\n  import { lessons } from '../lessons/data'\n  import FilterItems from '../FilterItems.svelte'\n\n  export let lessonId = ''\n\n  onMount(async () => {\n    await lessons.get()\n  })\n</script>\n\n<style>\n  .lesson-select {\n    margin-bottom: 1rem;\n  }\n</style>\n\n<div class=\"lesson-select\">\n  <FilterItems store={lessons} />\n\n  <div class=\"select\">\n    <select bind:value={lessonId}>\n      {#if $lessons}\n      <option value=\"\">{$lessons.length} matching lessons</option>\n      {#each $lessons as lesson (lesson.id)}\n        <option value={lesson.id} selected={lesson.id === lessonId}>{lesson.name}</option>\n      {/each}\n      {:else}\n      <option value=\"\">Loading lessons...</option>\n      {/if}\n    </select>\n  </div>\n</div>",
    "<script>\n  import { onMount } from 'svelte'\n  import { request } from '../../data/fetch-client'\n  import { CURRENT_NEXT_SEMESTER_GROUPS } from '../../data/queries'\n  import { notifications } from '../notifications'\n  import { students } from './data'\n  import Error from '../Error.svelte'\n\n  let semesters\n  let selectCurrent\n  let currentSemester\n  let nextSemester\n  let selectNext\n  let errors = ''\n  let currentLoading = false\n  let nextLoading = false\n  let closeButton\n  export let open\n  export let student = {}\n\n  onMount(() => {\n    semesters = request(CURRENT_NEXT_SEMESTER_GROUPS)\n  })\n  $: loading = currentLoading || nextLoading\n\n  const isInGroup = (id) => {\n    return !!student.groups.find(g => g.id === id)\n  }\n\n  async function joinOrChangeGroup (select, semester) {\n    select === selectCurrent ? currentLoading = true : nextLoading = true\n    select.disabled = true\n    closeButton.disabled = true\n    // find out if student is alrady in a group of the same semester\n    const selected = select.value\n    const groupName = select.selectedOptions[0].text\n    const sameSemester = semester.groups.find(group => isInGroup(group.id))\n    let text = ''\n    try {\n      if (selected === '' && sameSemester) {\n        await students.removeStudentFromGroup(student.id, sameSemester.id)\n        text = `Removed ${student.englishName} from ${sameSemester.name} class`\n      } else if (sameSemester) {\n        await students.moveToDifferentGroup(student.id, sameSemester.id, selected)\n        text = `Switched ${student.englishName} from ${sameSemester.name} class to ${groupName} class`\n      } else {\n        await students.addStudentToGroup(student.id, selected)\n        text = `Added ${student.englishName} to ${groupName} class`\n      }\n      notifications.add({ text, type: 'success' })\n    } catch (error) {\n      errors = error\n      notifications.add({ text: `Unable to change ${student.englishName}'s classes`, type: 'danger' })\n    } finally {\n      select.disabled = false\n      closeButton.disabled = false\n      select === selectCurrent ? currentLoading = false : nextLoading = false\n    }\n  }\n</script>\n\n<style>\n  .control {\n    grid-column: selects;\n  }\n\n  .label {\n    grid-column: labels;\n    justify-self: end;\n  }\n\n  .buttons {\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .grid-container {\n    display: grid;\n    align-items: center;\n    grid-template-columns: [labels] auto [selects] auto;\n    justify-content: start;\n    grid-gap: 1rem 1rem;\n    margin-bottom: 1rem;\n  }\n</style>\n\n<h2 class=\"title\">Change {student.englishName}'s classes</h2>\n<Error {errors} />\n<div class=\"grid-container\">\n  {#await semesters}\n  Loading groups ...\n{:then result}\n\n  {#if result && result.currentSemester}\n    <label class=\"label\" >Current semester</label>\n    <div class=\"control\">\n        <div class=\"select\" class:is-loading={currentLoading}>\n          <select bind:value={currentSemester} bind:this={selectCurrent} on:change={()=>joinOrChangeGroup(selectCurrent, result.currentSemester)}>\n              <option value=\"\">none</option>\n              {#each result.currentSemester.groups as group}\n                <option value={group.id} selected={isInGroup(group.id)}>{group.name}</option>\n              {/each}\n          </select>\n        </div>\n      </div>\n  {/if}\n\n  {#if result && result.nextSemester}\n  <label class=\"label\">{result.nextSemester.name}</label>\n  <div class=\"control\">\n    <div class=\"select\" class:is-loading={nextLoading}>\n      <select bind:value={nextSemester} bind:this={selectNext} on:change={()=>joinOrChangeGroup(selectNext, result.nextSemester)}>\n        <option value=\"\">none</option>\n        {#each result.nextSemester.groups as group}\n          <option value={group.id} selected={isInGroup(group.id)}>{group.name}</option>\n        {/each}\n      </select>\n    </div>\n  </div>\n  {/if}\n  {:catch error}\n    {error}\n  {/await}\n</div>\n\n  <div class=\"buttons\">\n    <button \n      class=\"button is-primary\" \n      class:is-loading={loading} \n      bind:this={closeButton} \n      on:click={() =>open = false}\n      >\n      Done\n    </button>\n  </div>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Error from '../Error.svelte'\n  import Input from '../Input.svelte'\n  import GroupSelect from '../GroupSelect.svelte'\n\n  const dispatch = createEventDispatcher()\n\n  export let chineseName = ''\n  export let pinyinName = ''\n  export let englishName = ''\n  export let birthdate = null\n  export let groupId = null\n  export let id = null\n  export let loading = false\n  export let errors\n  export let groups = []\n  export let gender = null\n  let form\n  let saveButton\n\n  const todaysDate = new Date().toISOString().slice(0, 10)\n  $: if (saveButton) { saveButton.disabled = loading }\n\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { id, chineseName, birthdate, englishName, pinyinName, gender, groupId })\n  }\n</script>\n\n<style>\n  .genders {\n    margin: 1rem 0 0.5rem;\n  }\n\n  .buttons {\n    margin-top: 1rem;\n  }\n</style>\n\n<h2 class=\"title\">{#if id}Edit{:else}Add{/if} a student</h2>\n\n  <form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset >\n    {#if errors}\n    <Error {errors}/>\n    {/if}\n    <Input bind:value={chineseName} label=\"Chinese name\" placeholder=\"孙悟空\" />\n    <Input bind:value={pinyinName} label=\"Pinyin name\" placeholder=\"Sūn Wùkōng\" />\n    <Input bind:value={englishName} label=\"English name\" placeholder=\"Monkey King\" />\n    <Input type=\"date\" bind:value={birthdate} label=\"Birthdate\" max={todaysDate} />\n    \n    <div class=\"control genders\">\n\t\t\t<label class=\"radio\">\n\t\t\t\t<input type='radio' bind:group={gender} value='M'>\n\t\t\t\tMale\n\t\t\t</label>\n\n\t\t\t<label class=\"radio\">\n\t\t\t\t<input type='radio' bind:group={gender} value='F'>\n\t\t\t\tFemale\n      </label>\n    </div>\n    {#if !id}\n    <GroupSelect bind:groupId />\n    {/if}\n    <div class=\"buttons\">\n      <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save student</button>\n      <input type=\"reset\" class=\"button\" value=\"Cancel\">\n    </div>\n  </form>",
    "<script>\n  import { createEventDispatcher } from 'svelte'\n  import { notifications } from '../notifications'\n  import Input from '../Input.svelte'\n  import SemesterSelect from './SemesterSelect.svelte'\n  import Error from '../Error.svelte'\n\n  const dispatch = createEventDispatcher()\n\n  let form\n  let saveButton\n  export let errors = ''\n  export let loading = false\n  export let name = ''\n  export let semesterId = null\n  export let id = null\n\n  const handleSubmit = () => {\n    const isValid = form.checkValidity()\n    if (!isValid) {\n      notifications.add({\n        text: 'Please fix form errors first.',\n        type: 'danger'\n      })\n      return\n    }\n    dispatch('submit', { id, name, semesterId })\n  }\n\n</script>\n\n\n<style>\n  .buttons {\n    margin-top: 1rem;\n  }\n</style>\n\n<h2 class=\"title\">{#if id}Edit{:else}Add{/if} a group</h2>\n\n<form novalidate bind:this={form} on:submit|preventDefault={handleSubmit} on:reset>\n    {#if errors}\n    <Error {errors}/>\n    {/if}\n\n    <Input label=\"Name\" bind:value={name} />\n\n    <SemesterSelect bind:value={semesterId} edit={!!id} />\n\n    <div class=\"buttons\">\n      <button type=\"submit\" class=\"button is-primary\" class:is-loading={loading} bind:this={saveButton}>Save group</button>\n      <input type=\"reset\" class=\"button\" value=\"Cancel\">\n    </div>\n</form>",
    "<script>\n  import { points } from './data'\n  import IconButton from '../IconButton.svelte'\n  export let student\n  export let sessionId\n\n  const addPoint = value => {\n    points.add(value, student.id, sessionId)\n  }\n  $: pointsTally = $points\n    ? $points.reduce((sum, point) => {\n      if (point.student.id !== student.id) return sum\n      return sum + point.value\n    }, 0)\n    : 0\n</script>\n\n<style>\n  li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 2rem;\n    max-width: 500px;\n  }\n\n  span.name {\n    width: 10rem;\n    border: red;\n  }\n\n  span.points {\n    text-align: right;\n  }\n</style>\n\n<li>\n  <IconButton name=\"plus-square\" color=\"#55FF66\" on:click={() => addPoint(1)} />\n  <span class=\"name\">{student.englishName || student.chineseName}</span>\n  <span class=\"points\">{pointsTally}</span>\n  <IconButton name=\"minus-square\" color=\"#FF3344\" disabled={pointsTally < 1}\n  on:click={ () => addPoint(-1)}/>\n</li>\n",
    "<script>\n  export let size = '8rem'\n  export let group = false\n\n  export let index = 0\n  export let number = index + 1\n\n  const hue = (index) => index * 30\n</script>\n\n<style>\n  .star {\n    width: var(--size);\n    margin: 0.5rem;\n    height: var(--size);\n    fill: hsl(var(--hue), 100%, 50%);\n    animation-name: spin;\n    animation-duration: 1000ms;\n    animation-iteration-count: 1;\n    animation-timing-function: linear;\n  }\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  .group {\n    width: calc(var(--size) * 1.5);\n    height: calc(var(--size) * 1.5);\n  }\n</style>\n\n<svg class=\"star\" class:group xmlns=\"http://www.w3.org/2000/svg\" style='--hue: {hue(index)}; --size: {size}'\n  viewBox=\"0 0 32.218 32.218\">\n  <path\n    d=\"M32.143 12.403c-.494-1.545-3.213-1.898-6.092-2.279-1.578-.207-3.371-.441-3.912-.842-.545-.398-1.305-2.035-1.977-3.482C18.94 3.169 17.783.687 16.165.683l-.03-.005c-1.604.027-2.773 2.479-4.016 5.082-.685 1.439-1.464 3.07-2.007 3.465-.549.391-2.342.611-3.925.803-2.876.35-5.599.678-6.107 2.215s1.479 3.426 3.585 5.422c1.156 1.098 2.465 2.342 2.671 2.982s-.143 2.416-.448 3.977c-.558 2.844-1.085 5.537.219 6.5.312.223.704.336 1.167.326 1.331-.021 3.246-1.057 5.097-2.061 1.387-.758 2.96-1.613 3.66-1.621.677 0 2.255.879 3.647 1.654 1.893 1.051 3.852 2.139 5.185 2.117.416-.006.771-.113 1.061-.322 1.312-.945.812-3.637.285-6.492-.29-1.564-.615-3.344-.41-3.984.212-.637 1.536-1.865 2.703-2.955 2.125-1.977 4.131-3.838 3.641-5.383z\" />\n  {#if number}\n  <text x=\"50%\" y=\"60%\" dominant-baseline=\"middle\" text-anchor=\"middle\" fill=\"black\" font-size=\"0.8rem\">\n    {number}\n  </text>\n  {/if}\n\n</svg>",
    "<script>\n  import { request } from '../../data/fetch-client'\n  import { CREATE_REPORT } from './mutations'\n\n  export let classSessionId\n\n  const create = async () => {\n    // create a report from lesson\n    await request(CREATE_REPORT, { classSessionId })\n  }\n</script>\n\n<style>\n  .button {\n    margin: 1rem;\n  }\n</style>\n\n<button class=\"button\" on:click={create}>Create report</button>",
    "<script>\n  import EditableTextarea from './EditableTextarea.svelte'\n  import RemoveWordButton from './RemoveWordButton.svelte'\n  import AddWordToReport from './AddWordToReport.svelte'\n  import RemoveMaterialButton from './RemoveMaterialButton.svelte'\n  import AddMaterialToReport from './AddMaterialToReport.svelte'\n\n  export let report\n  export let classSessionId\n</script>\n\n<style>\n  .title {\n    margin-top: 1.5rem;\n    margin-bottom: 1rem;\n  }\n\n  section {\n    padding-bottom: 1rem;\n    max-width: 700px;\n  }\n</style>\n\n\n<section>\n  <h3 class=\"title is-5\">Summary (English)</h3>\n  <EditableTextarea text={report.summaryEN} key='summaryEN' />\n</section>\n\n<section>\n  <h3 class=\"title is-5\">Homework (English)</h3>\n  <EditableTextarea text={report.homeworkEN} key='homeworkEN' />\n</section>\n\n<section>\n  <h3 class=\"title is-5\">Summary (Chinese)</h3>\n  <EditableTextarea text={report.summaryZH} key='summaryZH' />\n</section>\n\n<section>\n  <h3 class=\"title is-5\">Homework (Chinese)</h3>\n  <EditableTextarea text={report.homeworkZH} key='homeworkZH' />\n</section>\n\n<section>\n  <h3 class=\"title is-5\">Performance</h3>\n  <EditableTextarea text={report.performance} key='performance' />\n</section>\n\n<section>\n  <h3 class=\"title is-5\">Vocabulary</h3>\n  {#if report.words && report.words.length > 0}\n    <ul class=\"words-list\">\n      {#each report.words as word (word.id)}\n      <li>\n        <a href=\"#/word/{word.id}\">{word.english} ({word.chinese})</a>\n        <RemoveWordButton wordId={word.id} {classSessionId} />\n      </li> \n      {/each}\n    </ul>\n    {/if}\n    <AddWordToReport />\n</section>\n\n<section>\n  <h3 class=\"title is-5\">Materials</h3>\n  {#if report.materials && report.materials.length > 0}\n  <ul class=\"materials-list\">\n    {#each report.materials as material (material.id)}\n      <li>\n        <a href=\"#/material/{material.id}\">{material.title}</a>\n         - {material.type} \n         <RemoveMaterialButton materialId={material.id} {classSessionId} /> \n      </li>\n    {/each}\n  </ul>\n  {/if}\n  <AddMaterialToReport />\n</section>",
    "<script>\n  import { onMount } from 'svelte'\n  import { semesters } from '../semesters/data'\n\n  let selectElement\n  let error = ''\n  export let edit = false\n  export let value = ''\n\n  onMount(() => {\n    if (!$semesters || $semesters.length === 0) {\n      semesters.get()\n    }\n  })\n\n  function checkValidity () {\n    error = !selectElement.validity.valid && selectElement.validationMessage\n      ? selectElement.validationMessage\n      : ''\n  }\n</script>\n\n<style>\n  .select {\n    margin-bottom: 1rem;\n  }\n</style>\n\n<label class=\"label\">Semester</label>\n{#if edit}\n<p class=\"help is-warning\">Be careful! Only change if there aren't any class sessions.</p>\n{/if}\n<div class=\"select\">\n  <select bind:value required bind:this={selectElement} on:invalid|preventDefault={checkValidity}>\n    {#await $semesters}\n        <option>Loading semesters ...</option>\n      {:then result}\n        {#if result && result.length}\n          <option value=\"\">--</option>\n          {#each result as semester}\n            <option value={semester.id} selected={semester.id === value}>{semester.name}</option>\n          {/each}\n        {/if}\n      {:catch}\n        <option>Loading semesters ...</option>\n      {/await}\n    </select>\n    {#if error}\n    <p class=\"help is-danger\">{error}</p>\n    {/if}\n  </div>",
    "<script>\n  import { notifications } from '../notifications'\n  import { sessions } from '../sessions/data'\n  import { session } from '../session/data'\n  import marked from 'marked'\n\n  export let text = ''\n  export let key = ''\n\n  let original = text && text.slice(0)\n  let input\n  let edit = true\n  let alreadySet = false\n  let loading = false\n  let errors = ''\n\n  const inputHandler = event => {\n    input.style.height = 'auto'\n    input.style.height = input.scrollHeight + 'px'\n  }\n\n  // adjust the height when component loads\n  $: if (!alreadySet && input) {\n    inputHandler()\n    alreadySet = true\n  }\n\n  const save = async () => {\n    loading = true\n    const input = { report: { update: { [key]: text } } }\n    try {\n      await sessions.patch($session.id, input)\n      notifications.add({ text: 'Successfuly saved changes', type: 'success' })\n      errors = ''\n      original = text.slice(0)\n    } catch (error) {\n      errors = error\n      notifications.add({ text: \"Couldn't save changes\", type: 'danger' })\n    } finally {\n      loading = false\n    }\n  }\n\n  const toggleEdit = () => {\n    edit = !edit\n    if (edit) alreadySet = false\n  }\n\n  const discardChanges = () => {\n    text = original.slice(0)\n  }\n</script>\n\n<style>\n  :global(p) {\n    margin: 1rem 0 1rem;\n  }\n\n  .textarea {\n    background: inherit;\n    color: white;\n    resize: none;\n    overflow: hidden;\n    min-height: 1rem;\n    margin: 0.5rem 0;\n  }\n</style>\n\n<div class=\"buttons\">\n  {#if edit}\n  <button class=\"button\" on:click=\"{toggleEdit}\">\n    <i class=\"fas fa-eye\"></i>Preview\n  </button>\n  {:else}\n  <button class=\"button\" on:click=\"{toggleEdit}\">\n    <i class=\"fas fa-edit\"></i>Edit\n  </button>\n  {/if} {#if text !== original}\n  <button class=\"button is-danger\" on:click=\"{discardChanges}\">\n    <i class=\"fas fa-history\"></i>Discard changes\n  </button>\n  <button\n    class=\"button is-primary\"\n    on:click=\"{save}\"\n    class:is-loading=\"{loading}\"\n  >\n    <i class=\"fas fa-save\"></i>Save changes\n  </button>\n  {/if}\n</div>\n\n{#if edit}\n<textarea\n  bind:this=\"{input}\"\n  class=\"textarea\"\n  bind:value=\"{text}\"\n  on:input=\"{inputHandler}\"\n></textarea>\n{:else} {@html marked(text, { breaks: true })} {/if}\n",
    "<script>\n  import { onMount } from 'svelte'\n  import { words } from '../words/data'\n  import Modal from '../Modal.svelte'\n  import Error from '../Error.svelte'\n  import AddWordRow from './AddWordRow.svelte'\n  import FilterItems from '../FilterItems.svelte'\n\n  let open = false\n  let errors = ''\n\n  onMount(async () => {\n    try {\n      await words.get()\n    } catch (error) {\n      errors = error\n    }\n  })\n</script>\n\n<style>\n  .buttons {\n    padding: 1rem 0;\n  }\n\n  .add {\n    margin-top: 1rem;\n  }\n</style>\n\n<button class=\"button add\" on:click={()=> { open = true }}><i class=\"fas fa-plus\"></i>add words</button>\n\n<Modal bind:open>\n\n  <h2 class=\"title is-4\">Add word to session vocabulary</h2>\n\n  <FilterItems store={words} searchParams={['english', 'chinese' ]} />\n\n  <Error {errors} />\n\n  <div class=\"results\">\n    {#if $words }\n        <p>{$words.length} matches:</p>\n        {#each $words as word (word.id)}\n          <AddWordRow {word} />\n        {/each}\n        {/if}\n      </div>\n    \n      <div class=\"buttons\">\n        <button class=\"button\" on:click={() => { open = false }}>Exit</button>\n      </div>\n    \n    \n    </Modal>",
    "<script>\n  import { onMount } from 'svelte'\n  import { materials } from '../materials/data'\n  import Modal from '../Modal.svelte'\n  import Error from '../Error.svelte'\n  import AddMaterialRow from './AddMaterialRow.svelte'\n  import FilterItems from '../FilterItems.svelte'\n\n  let open = false\n  let errors = ''\n\n  onMount(async () => {\n    try {\n      await materials.get()\n    } catch (error) {\n      errors = error\n    }\n  })\n</script>\n\n<style>\n  .buttons {\n    padding: 1rem 0;\n  }\n\n  .add {\n    margin-top: 1rem;\n  }\n</style>\n\n<button class=\"button add\" on:click={() => { open = true }}><i class=\"fas fa-plus\"></i>add material</button>\n\n<Modal bind:open>\n\n  <h2 class=\"title is-4\">Add material to session report</h2>\n\n  <FilterItems store={materials} searchParams='title' />\n\n  <Error {errors} />\n  <div class=\"results\">\n    {#if $materials }\n      <p>{$materials.length} matches:</p>\n      {#each $materials as material (material.id)}\n        <AddMaterialRow {material} />\n      {/each}\n      {/if}\n    </div>\n  \n    <div class=\"buttons\">\n      <button class=\"button\" on:click={() => { open = false }}>Exit</button>\n    </div>\n  \n  </Modal>",
    "<script>\n  import { sessions } from '../sessions/data'\n  import { session } from '../session/data'\n  import { notifications } from '../notifications'\n\n  export let word\n  $: isAdded = !!$session.report.words.find(w => w.id === word.id)\n\n  const toggle = async () => {\n    const input = { report: { update: {} } }\n    let text = 'Removed word session vocabulary'\n    if (isAdded) {\n      input.report.update.words = { disconnect: { id: word.id } }\n    } else {\n      text = 'Added word to session vocabulary'\n      input.report.update.words = { connect: { id: word.id } }\n    }\n    try {\n      await sessions.patch($session.id, input)\n      notifications.add({ text, type: 'success' })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n</script>\n\n<style>\n  li {\n    list-style: none;\n    display: flex;\n  }\n\n  i {\n    margin: 0.2rem 0.5rem;\n  }\n</style>\n\n<li on:click={toggle}>\n  <label class=\"checkbox\">\n    <i class=\"fas fa-{isAdded ? 'check-' : ''}square status\"></i>\n    {word.english} ({word.chinese})\n  </label>\n</li>",
    "<script>\n  import { sessions } from '../sessions/data'\n  import { session } from '../session/data'\n  import { notifications } from '../notifications'\n\n  export let material\n\n  const toggle = async () => {\n    const input = { report: { update: {} } }\n    let text = 'Removed material from report'\n    if (isAdded) {\n      input.report.update.materials = { disconnect: { id: material.id } }\n    } else {\n      text = 'Added material to report'\n      input.report.update.materials = { connect: { id: material.id } }\n    }\n    try {\n      await sessions.patch($session.id, input)\n      notifications.add({ text, type: 'success' })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  $: isAdded = !!$session.report.materials.find(m => m.id === material.id)\n</script>\n\n<style>\n  li {\n    list-style: none;\n    display: flex;\n  }\n\n  i {\n    margin: 0.2rem 0.5rem;\n  }\n</style>\n\n<li on:click={toggle}>\n  <label class=\"checkbox\">\n    <i class=\"fas fa-{isAdded ? 'check-' : ''}square status\"></i>\n    {material.title} - {material.type}\n  </label>\n</li>"
  ],
  "names": [],
  "mappings": "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"
}