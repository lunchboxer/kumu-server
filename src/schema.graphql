scalar DateTime

type Query {
  me: User
  user(id: ID!): User
  users: [User!]!
  student(id: ID!): Student
  students(orderBy: StudentOrderByInput, searchString: String): [Student!]!
  group(id: ID!): Group
  groups: [Group!]!
  semester(id: ID!): Semester
  semesters: [Semester!]!
  classSession(id: ID!): ClassSession
  classSessions: [ClassSession!]!
  points: [Point!]!
  attendances: [Attendance!]!
  activeGroups: [Group!]!
  currentSemester: Semester
  nextSemester: Semester
}

type Mutation {
  # signup(username: String!, password: String!): AuthPayload!
  ## User and Auth
  createUser(username: String!, password: String!): User
  updateUser(id: ID!, input: UserInput!): User
  deleteUser(id: ID!): User
  login(username: String!, password: String!): AuthPayload!
  changePassword(id: ID!, newPassword: String!): User

  ## Student
  createStudent(input: StudentInput!, groupId: ID): Student
  updateStudent(id: ID!, input: StudentInput!): Student
  deleteStudent(id: ID!): Student

  ## Student-Group
  addStudentToGroup(studentId: ID!, groupId: ID!): Student
  removeStudentFromGroup(studentId: ID!, groupId: ID!): Student
  # if student is already in a group this semester, remove and add
  moveStudentToDifferentGroup(
    studentId: ID!
    oldGroupId: ID!
    newGroupId: ID!
  ): Student

  ## Group
  createGroup(name: String!, semesterId: ID!): Group
  updateGroup(id: ID!, name: String, semesterId: ID): Group
  deleteGroup(id: ID!): Group

  ## Semester
  createSemester(input: SemesterInput!): Semester
  updateSemester(id: ID!, input: SemesterInput!): Semester
  deleteSemester(id: ID!): Semester

  ## Point
  addPoint(input: PointInput!): Point
  undoPoint(id: ID!): Point

  ## Attendance
  # markAllPresent(classSessionId: ID!): Boolean
  # markPresent(classSessionId: ID!, studentID: ID!): Attendance
  # markLeftEarly(classSessionId: ID!, studentID: ID!): Attendance

  ## ClassSession
  createClassSession(input: ClassSessionInput!, groupId: ID!): ClassSession
  updateClassSession(
    id: ID!
    input: ClassSessionInput!
    groupId: ID
  ): ClassSession
}

type Subscription {
  semesters: Semester
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  username: String!
  role: Role
}

enum Role {
  Admin
}

type Student {
  id: ID!
  chineseName: String!
  englishName: String!
  pinyinName: String
  gender: Gender
  birthdate: DateTime!
  groups: [Group!]!
  points: [Point!]!
  pointsTally: Int
}

enum StudentOrderByInput {
  id_ASC
  id_DESC
  chineseName_ASC
  chineseName_DESC
  englishName_ASC
  englishName_DESC
  pinyinName_ASC
  pinyinName_DESC
  birthdate_ASC
  birthdate_DESC
  gender_ASC
  gender_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum Gender {
  M
  F
}

type Attendance {
  id: ID!
  classSession: ClassSession!
  createdAt: DateTime!
  student: Student!
  event: AttendanceEvent!
}

# used in Attendance
enum AttendanceEvent {
  Arrived
  Left
}

type Group {
  id: ID!
  name: String!
  semester: Semester!
  students: [Student!]!
}

type Point {
  # points awarded to students during the lesson, can be positive or negative
  id: ID!
  value: Int!
  student: Student!
  classSession: ClassSession!
}

type ClassSession {
  id: ID!
  startsAt: DateTime!
  endsAt: DateTime!
  group: Group!
  points: [Point!]!
  attendances: [Attendance!]!
  stage: Stage!
}

enum Stage {
  Inactive # scheduled, but teacher hasn't viewed
  Active # preclass, time for attendance
  Started # class time
  Ended # teacher has ended the class
}

type Semester {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
  name: String!
  groups: [Group!]!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

input StudentInput {
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
}

input SemesterInput {
  startDate: DateTime
  endDate: DateTime
  name: String
}

input PointInput {
  value: Int!
  studentId: ID!
  classSessionId: ID!
}

input ClassSessionInput {
  startsAt: DateTime!
  endsAt: DateTime!
  stage: Stage
}

input UserInput {
  username: String
  role: Role
}
