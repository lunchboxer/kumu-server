# import * from './generated/graphql/prisma.graphql'
scalar DateTime

type Query {
  me: User
  user(id: ID!): User
  users: [User!]!
  student(id: ID!): Student
  students(
    orderBy: StudentOrderByInput
    where: StudentWhereInput
    searchString: String
  ): [Student!]!
  group(id: ID!): Group
  groups: [Group!]!
  semester(id: ID!): Semester
  semesters: [Semester!]!
  classSession(id: ID!): ClassSession
  classSessions(
    where: ClassSessionWhereInput
    orderBy: ClassSessionOrderByInput
  ): [ClassSession!]!
  points(where: PointWhereInput): [Point!]!
  attendances(where: AttendanceWhereInput): [Attendance!]!
  activeGroups: [Group!]!
  currentSemester: Semester
  nextSemester: Semester
  lesson(id: ID!): Lesson
  lessons: [Lesson!]!
  material(id: ID!): Material
  materials(
    where: MaterialWhereInput
    orderBy: MaterialOrderByInput
  ): [Material!]!
  word(id: ID!): Word
  words: [Word!]!
  tag(id: ID!): Tag
  tags: [Tag!]!
  report(id: ID!): Report
}

type Mutation {
  # signup(username: String!, password: String!): AuthPayload!
  ## User and Auth
  createUser(username: String!, password: String!): User
  updateUser(id: ID!, input: UserInput!): User
  deleteUser(id: ID!): User
  login(username: String!, password: String!): AuthPayload!
  changePassword(id: ID!, newPassword: String!): User

  ## Student
  createStudent(input: StudentInput!, groupId: ID): Student
  updateStudent(id: ID!, input: StudentInput!): Student
  deleteStudent(id: ID!): Student

  ## Student-Group
  addStudentToGroup(studentId: ID!, groupId: ID!): Student
  removeStudentFromGroup(studentId: ID!, groupId: ID!): Student
  # if student is already in a group this semester, remove and add
  moveStudentToDifferentGroup(
    studentId: ID!
    oldGroupId: ID!
    newGroupId: ID!
  ): Student

  ## Group
  createGroup(name: String!, semesterId: ID!): Group
  updateGroup(id: ID!, name: String, semesterId: ID): Group
  deleteGroup(id: ID!): Group

  ## Semester
  createSemester(input: SemesterInput!): Semester
  updateSemester(id: ID!, input: SemesterInput!): Semester
  deleteSemester(id: ID!): Semester

  ## Point
  addPoint(value: Int!, studentId: ID!, classSessionId: ID!): Point
  undoPoint(id: ID!): Point

  ## Attendance
  markAllPresent(classSessionId: ID!): Boolean
  updateAttendance(
    classSessionId: ID!
    studentId: ID!
    status: String!
  ): Attendance
  markRestAbsent(classSessionId: ID!): Boolean

  ## ClassSession
  createClassSession(input: ClassSessionInput!, groupId: ID!): ClassSession
  updateClassSession(
    id: ID!
    input: ClassSessionInput
    groupId: ID
  ): ClassSession
  deleteClassSession(id: ID!): ClassSession
  activateSession(id: ID!): ClassSession

  ## Lesson
  createLesson(input: LessonCreateInput!): Lesson
  updateLesson(input: LessonUpdateInput!, id: ID!): Lesson
  deleteLesson(id: ID!): Lesson

  ## Tag
  createTag(name: String!): Tag
  updateTag(input: TagUpdateInput!, id: ID!): Tag
  deleteTag(id: ID!): Tag

  ## Material
  createMaterial(input: MaterialCreateInput!): Material
  updateMaterial(input: MaterialUpdateInput!, id: ID!): Material
  deleteMaterial(id: ID!): Material

  ## Word
  createWord(input: WordCreateInput!): Word
  updateWord(input: WordUpdateInput!, id: ID!): Word
  deleteWord(id: ID!): Word
}

type Subscription {
  attendances(classSessionId: ID): Attendance
  classSession(id: ID!): ClassSession
  semesters: Semester
  classSessions(
    where: ClassSessionSubscriptionWhereInput
  ): ClassSessionSubscriptionPayload
  points(classSessionId: ID): PointSubscriptionPayload
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  username: String!
  role: Role
}

type Student {
  id: ID!
  chineseName: String!
  englishName: String!
  pinyinName: String
  gender: Gender
  birthdate: DateTime
  groups: [Group!]!
  points: [Point!]!
  pointsTally: Int
}

type Group {
  id: ID!
  name: String!
  semester: Semester!
  students: [Student!]!
}

type Point {
  # points awarded to students during the lesson, can be positive or negative
  id: ID!
  value: Int!
  student: Student!
  classSession: ClassSession!
}

type ClassSession {
  id: ID!
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  group: Group!
  points: [Point!]!
  attendances: [Attendance!]!
  stage: Stage!
  report: Report
  number: Int
}

type Semester {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
  name: String!
  groups: [Group!]!
}

input StudentInput {
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
}

input SemesterInput {
  startDate: DateTime
  endDate: DateTime
  name: String
}

input PointInput {
  value: Int!
  studentId: ID!
  classSessionId: ID!
}

input ClassSessionInput {
  startsAt: DateTime
  endsAt: DateTime
  stage: Stage
  startedAt: DateTime
  endedAt: DateTime
}

input UserInput {
  username: String
  role: Role
}

type Tag {
  id: ID!
  name: String!
  lessons: [Lesson!]!
  words: [Word!]!
  materials: [Material!]!
  connections: Int
}
