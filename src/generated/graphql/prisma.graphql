type AggregateAttendance {
  count: Int!
}

type AggregateClassSession {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateLesson {
  count: Int!
}

type AggregateMaterial {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregatePoint {
  count: Int!
}

type AggregateSemester {
  count: Int!
}

type AggregateStudent {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateViewer {
  count: Int!
}

type AggregateWord {
  count: Int!
}

type Attendance {
  classSession: ClassSession!
  id: ID!
  student: Student!
  status: AttendanceStatus!
  arrivedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AttendanceConnection {
  pageInfo: PageInfo!
  edges: [AttendanceEdge]!
  aggregate: AggregateAttendance!
}

input AttendanceCreateInput {
  classSession: ClassSessionCreateOneWithoutAttendancesInput!
  id: ID
  student: StudentCreateOneWithoutAttendancesInput!
  status: AttendanceStatus!
  arrivedAt: DateTime
}

input AttendanceCreateManyWithoutClassSessionInput {
  create: [AttendanceCreateWithoutClassSessionInput!]
  connect: [AttendanceWhereUniqueInput!]
}

input AttendanceCreateManyWithoutStudentInput {
  create: [AttendanceCreateWithoutStudentInput!]
  connect: [AttendanceWhereUniqueInput!]
}

input AttendanceCreateWithoutClassSessionInput {
  id: ID
  student: StudentCreateOneWithoutAttendancesInput!
  status: AttendanceStatus!
  arrivedAt: DateTime
}

input AttendanceCreateWithoutStudentInput {
  classSession: ClassSessionCreateOneWithoutAttendancesInput!
  id: ID
  status: AttendanceStatus!
  arrivedAt: DateTime
}

type AttendanceEdge {
  node: Attendance!
  cursor: String!
}

enum AttendanceOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  arrivedAt_ASC
  arrivedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AttendancePreviousValues {
  id: ID!
  status: AttendanceStatus!
  arrivedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AttendanceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: AttendanceStatus
  status_not: AttendanceStatus
  status_in: [AttendanceStatus!]
  status_not_in: [AttendanceStatus!]
  arrivedAt: DateTime
  arrivedAt_not: DateTime
  arrivedAt_in: [DateTime!]
  arrivedAt_not_in: [DateTime!]
  arrivedAt_lt: DateTime
  arrivedAt_lte: DateTime
  arrivedAt_gt: DateTime
  arrivedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AttendanceScalarWhereInput!]
  OR: [AttendanceScalarWhereInput!]
  NOT: [AttendanceScalarWhereInput!]
}

enum AttendanceStatus {
  Absent
  Present
  Late
  LeftEarly
  LateLeftEarly
}

type AttendanceSubscriptionPayload {
  mutation: MutationType!
  node: Attendance
  updatedFields: [String!]
  previousValues: AttendancePreviousValues
}

input AttendanceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AttendanceWhereInput
  AND: [AttendanceSubscriptionWhereInput!]
  OR: [AttendanceSubscriptionWhereInput!]
  NOT: [AttendanceSubscriptionWhereInput!]
}

input AttendanceUpdateInput {
  classSession: ClassSessionUpdateOneRequiredWithoutAttendancesInput
  student: StudentUpdateOneRequiredWithoutAttendancesInput
  status: AttendanceStatus
  arrivedAt: DateTime
}

input AttendanceUpdateManyDataInput {
  status: AttendanceStatus
  arrivedAt: DateTime
}

input AttendanceUpdateManyMutationInput {
  status: AttendanceStatus
  arrivedAt: DateTime
}

input AttendanceUpdateManyWithoutClassSessionInput {
  create: [AttendanceCreateWithoutClassSessionInput!]
  delete: [AttendanceWhereUniqueInput!]
  connect: [AttendanceWhereUniqueInput!]
  set: [AttendanceWhereUniqueInput!]
  disconnect: [AttendanceWhereUniqueInput!]
  update: [AttendanceUpdateWithWhereUniqueWithoutClassSessionInput!]
  upsert: [AttendanceUpsertWithWhereUniqueWithoutClassSessionInput!]
  deleteMany: [AttendanceScalarWhereInput!]
  updateMany: [AttendanceUpdateManyWithWhereNestedInput!]
}

input AttendanceUpdateManyWithoutStudentInput {
  create: [AttendanceCreateWithoutStudentInput!]
  delete: [AttendanceWhereUniqueInput!]
  connect: [AttendanceWhereUniqueInput!]
  set: [AttendanceWhereUniqueInput!]
  disconnect: [AttendanceWhereUniqueInput!]
  update: [AttendanceUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [AttendanceUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [AttendanceScalarWhereInput!]
  updateMany: [AttendanceUpdateManyWithWhereNestedInput!]
}

input AttendanceUpdateManyWithWhereNestedInput {
  where: AttendanceScalarWhereInput!
  data: AttendanceUpdateManyDataInput!
}

input AttendanceUpdateWithoutClassSessionDataInput {
  student: StudentUpdateOneRequiredWithoutAttendancesInput
  status: AttendanceStatus
  arrivedAt: DateTime
}

input AttendanceUpdateWithoutStudentDataInput {
  classSession: ClassSessionUpdateOneRequiredWithoutAttendancesInput
  status: AttendanceStatus
  arrivedAt: DateTime
}

input AttendanceUpdateWithWhereUniqueWithoutClassSessionInput {
  where: AttendanceWhereUniqueInput!
  data: AttendanceUpdateWithoutClassSessionDataInput!
}

input AttendanceUpdateWithWhereUniqueWithoutStudentInput {
  where: AttendanceWhereUniqueInput!
  data: AttendanceUpdateWithoutStudentDataInput!
}

input AttendanceUpsertWithWhereUniqueWithoutClassSessionInput {
  where: AttendanceWhereUniqueInput!
  update: AttendanceUpdateWithoutClassSessionDataInput!
  create: AttendanceCreateWithoutClassSessionInput!
}

input AttendanceUpsertWithWhereUniqueWithoutStudentInput {
  where: AttendanceWhereUniqueInput!
  update: AttendanceUpdateWithoutStudentDataInput!
  create: AttendanceCreateWithoutStudentInput!
}

input AttendanceWhereInput {
  classSession: ClassSessionWhereInput
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: StudentWhereInput
  status: AttendanceStatus
  status_not: AttendanceStatus
  status_in: [AttendanceStatus!]
  status_not_in: [AttendanceStatus!]
  arrivedAt: DateTime
  arrivedAt_not: DateTime
  arrivedAt_in: [DateTime!]
  arrivedAt_not_in: [DateTime!]
  arrivedAt_lt: DateTime
  arrivedAt_lte: DateTime
  arrivedAt_gt: DateTime
  arrivedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AttendanceWhereInput!]
  OR: [AttendanceWhereInput!]
  NOT: [AttendanceWhereInput!]
}

input AttendanceWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type ClassSession {
  id: ID!
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  group: Group!
  points(where: PointWhereInput, orderBy: PointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Point!]
  attendances(where: AttendanceWhereInput, orderBy: AttendanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attendance!]
  stage: Stage!
  lesson: Lesson
  summary_EN: String
  summary_ZH: String
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClassSessionConnection {
  pageInfo: PageInfo!
  edges: [ClassSessionEdge]!
  aggregate: AggregateClassSession!
}

input ClassSessionCreateInput {
  id: ID
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  group: GroupCreateOneWithoutClassSessionsInput!
  points: PointCreateManyWithoutClassSessionInput
  attendances: AttendanceCreateManyWithoutClassSessionInput
  stage: Stage
  lesson: LessonCreateOneInput
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionCreateManyWithoutGroupInput {
  create: [ClassSessionCreateWithoutGroupInput!]
  connect: [ClassSessionWhereUniqueInput!]
}

input ClassSessionCreateOneWithoutAttendancesInput {
  create: ClassSessionCreateWithoutAttendancesInput
  connect: ClassSessionWhereUniqueInput
}

input ClassSessionCreateOneWithoutPointsInput {
  create: ClassSessionCreateWithoutPointsInput
  connect: ClassSessionWhereUniqueInput
}

input ClassSessionCreateWithoutAttendancesInput {
  id: ID
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  group: GroupCreateOneWithoutClassSessionsInput!
  points: PointCreateManyWithoutClassSessionInput
  stage: Stage
  lesson: LessonCreateOneInput
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionCreateWithoutGroupInput {
  id: ID
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  points: PointCreateManyWithoutClassSessionInput
  attendances: AttendanceCreateManyWithoutClassSessionInput
  stage: Stage
  lesson: LessonCreateOneInput
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionCreateWithoutPointsInput {
  id: ID
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  group: GroupCreateOneWithoutClassSessionsInput!
  attendances: AttendanceCreateManyWithoutClassSessionInput
  stage: Stage
  lesson: LessonCreateOneInput
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

type ClassSessionEdge {
  node: ClassSession!
  cursor: String!
}

enum ClassSessionOrderByInput {
  id_ASC
  id_DESC
  startsAt_ASC
  startsAt_DESC
  startedAt_ASC
  startedAt_DESC
  endsAt_ASC
  endsAt_DESC
  endedAt_ASC
  endedAt_DESC
  stage_ASC
  stage_DESC
  summary_EN_ASC
  summary_EN_DESC
  summary_ZH_ASC
  summary_ZH_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ClassSessionPreviousValues {
  id: ID!
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  stage: Stage!
  summary_EN: String
  summary_ZH: String
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ClassSessionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startsAt: DateTime
  startsAt_not: DateTime
  startsAt_in: [DateTime!]
  startsAt_not_in: [DateTime!]
  startsAt_lt: DateTime
  startsAt_lte: DateTime
  startsAt_gt: DateTime
  startsAt_gte: DateTime
  startedAt: DateTime
  startedAt_not: DateTime
  startedAt_in: [DateTime!]
  startedAt_not_in: [DateTime!]
  startedAt_lt: DateTime
  startedAt_lte: DateTime
  startedAt_gt: DateTime
  startedAt_gte: DateTime
  endsAt: DateTime
  endsAt_not: DateTime
  endsAt_in: [DateTime!]
  endsAt_not_in: [DateTime!]
  endsAt_lt: DateTime
  endsAt_lte: DateTime
  endsAt_gt: DateTime
  endsAt_gte: DateTime
  endedAt: DateTime
  endedAt_not: DateTime
  endedAt_in: [DateTime!]
  endedAt_not_in: [DateTime!]
  endedAt_lt: DateTime
  endedAt_lte: DateTime
  endedAt_gt: DateTime
  endedAt_gte: DateTime
  stage: Stage
  stage_not: Stage
  stage_in: [Stage!]
  stage_not_in: [Stage!]
  summary_EN: String
  summary_EN_not: String
  summary_EN_in: [String!]
  summary_EN_not_in: [String!]
  summary_EN_lt: String
  summary_EN_lte: String
  summary_EN_gt: String
  summary_EN_gte: String
  summary_EN_contains: String
  summary_EN_not_contains: String
  summary_EN_starts_with: String
  summary_EN_not_starts_with: String
  summary_EN_ends_with: String
  summary_EN_not_ends_with: String
  summary_ZH: String
  summary_ZH_not: String
  summary_ZH_in: [String!]
  summary_ZH_not_in: [String!]
  summary_ZH_lt: String
  summary_ZH_lte: String
  summary_ZH_gt: String
  summary_ZH_gte: String
  summary_ZH_contains: String
  summary_ZH_not_contains: String
  summary_ZH_starts_with: String
  summary_ZH_not_starts_with: String
  summary_ZH_ends_with: String
  summary_ZH_not_ends_with: String
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ClassSessionScalarWhereInput!]
  OR: [ClassSessionScalarWhereInput!]
  NOT: [ClassSessionScalarWhereInput!]
}

type ClassSessionSubscriptionPayload {
  mutation: MutationType!
  node: ClassSession
  updatedFields: [String!]
  previousValues: ClassSessionPreviousValues
}

input ClassSessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClassSessionWhereInput
  AND: [ClassSessionSubscriptionWhereInput!]
  OR: [ClassSessionSubscriptionWhereInput!]
  NOT: [ClassSessionSubscriptionWhereInput!]
}

input ClassSessionUpdateInput {
  startsAt: DateTime
  startedAt: DateTime
  endsAt: DateTime
  endedAt: DateTime
  group: GroupUpdateOneRequiredWithoutClassSessionsInput
  points: PointUpdateManyWithoutClassSessionInput
  attendances: AttendanceUpdateManyWithoutClassSessionInput
  stage: Stage
  lesson: LessonUpdateOneInput
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionUpdateManyDataInput {
  startsAt: DateTime
  startedAt: DateTime
  endsAt: DateTime
  endedAt: DateTime
  stage: Stage
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionUpdateManyMutationInput {
  startsAt: DateTime
  startedAt: DateTime
  endsAt: DateTime
  endedAt: DateTime
  stage: Stage
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionUpdateManyWithoutGroupInput {
  create: [ClassSessionCreateWithoutGroupInput!]
  delete: [ClassSessionWhereUniqueInput!]
  connect: [ClassSessionWhereUniqueInput!]
  set: [ClassSessionWhereUniqueInput!]
  disconnect: [ClassSessionWhereUniqueInput!]
  update: [ClassSessionUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [ClassSessionUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [ClassSessionScalarWhereInput!]
  updateMany: [ClassSessionUpdateManyWithWhereNestedInput!]
}

input ClassSessionUpdateManyWithWhereNestedInput {
  where: ClassSessionScalarWhereInput!
  data: ClassSessionUpdateManyDataInput!
}

input ClassSessionUpdateOneRequiredWithoutAttendancesInput {
  create: ClassSessionCreateWithoutAttendancesInput
  update: ClassSessionUpdateWithoutAttendancesDataInput
  upsert: ClassSessionUpsertWithoutAttendancesInput
  connect: ClassSessionWhereUniqueInput
}

input ClassSessionUpdateOneRequiredWithoutPointsInput {
  create: ClassSessionCreateWithoutPointsInput
  update: ClassSessionUpdateWithoutPointsDataInput
  upsert: ClassSessionUpsertWithoutPointsInput
  connect: ClassSessionWhereUniqueInput
}

input ClassSessionUpdateWithoutAttendancesDataInput {
  startsAt: DateTime
  startedAt: DateTime
  endsAt: DateTime
  endedAt: DateTime
  group: GroupUpdateOneRequiredWithoutClassSessionsInput
  points: PointUpdateManyWithoutClassSessionInput
  stage: Stage
  lesson: LessonUpdateOneInput
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionUpdateWithoutGroupDataInput {
  startsAt: DateTime
  startedAt: DateTime
  endsAt: DateTime
  endedAt: DateTime
  points: PointUpdateManyWithoutClassSessionInput
  attendances: AttendanceUpdateManyWithoutClassSessionInput
  stage: Stage
  lesson: LessonUpdateOneInput
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionUpdateWithoutPointsDataInput {
  startsAt: DateTime
  startedAt: DateTime
  endsAt: DateTime
  endedAt: DateTime
  group: GroupUpdateOneRequiredWithoutClassSessionsInput
  attendances: AttendanceUpdateManyWithoutClassSessionInput
  stage: Stage
  lesson: LessonUpdateOneInput
  summary_EN: String
  summary_ZH: String
  published: Boolean
}

input ClassSessionUpdateWithWhereUniqueWithoutGroupInput {
  where: ClassSessionWhereUniqueInput!
  data: ClassSessionUpdateWithoutGroupDataInput!
}

input ClassSessionUpsertWithoutAttendancesInput {
  update: ClassSessionUpdateWithoutAttendancesDataInput!
  create: ClassSessionCreateWithoutAttendancesInput!
}

input ClassSessionUpsertWithoutPointsInput {
  update: ClassSessionUpdateWithoutPointsDataInput!
  create: ClassSessionCreateWithoutPointsInput!
}

input ClassSessionUpsertWithWhereUniqueWithoutGroupInput {
  where: ClassSessionWhereUniqueInput!
  update: ClassSessionUpdateWithoutGroupDataInput!
  create: ClassSessionCreateWithoutGroupInput!
}

input ClassSessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startsAt: DateTime
  startsAt_not: DateTime
  startsAt_in: [DateTime!]
  startsAt_not_in: [DateTime!]
  startsAt_lt: DateTime
  startsAt_lte: DateTime
  startsAt_gt: DateTime
  startsAt_gte: DateTime
  startedAt: DateTime
  startedAt_not: DateTime
  startedAt_in: [DateTime!]
  startedAt_not_in: [DateTime!]
  startedAt_lt: DateTime
  startedAt_lte: DateTime
  startedAt_gt: DateTime
  startedAt_gte: DateTime
  endsAt: DateTime
  endsAt_not: DateTime
  endsAt_in: [DateTime!]
  endsAt_not_in: [DateTime!]
  endsAt_lt: DateTime
  endsAt_lte: DateTime
  endsAt_gt: DateTime
  endsAt_gte: DateTime
  endedAt: DateTime
  endedAt_not: DateTime
  endedAt_in: [DateTime!]
  endedAt_not_in: [DateTime!]
  endedAt_lt: DateTime
  endedAt_lte: DateTime
  endedAt_gt: DateTime
  endedAt_gte: DateTime
  group: GroupWhereInput
  points_every: PointWhereInput
  points_some: PointWhereInput
  points_none: PointWhereInput
  attendances_every: AttendanceWhereInput
  attendances_some: AttendanceWhereInput
  attendances_none: AttendanceWhereInput
  stage: Stage
  stage_not: Stage
  stage_in: [Stage!]
  stage_not_in: [Stage!]
  lesson: LessonWhereInput
  summary_EN: String
  summary_EN_not: String
  summary_EN_in: [String!]
  summary_EN_not_in: [String!]
  summary_EN_lt: String
  summary_EN_lte: String
  summary_EN_gt: String
  summary_EN_gte: String
  summary_EN_contains: String
  summary_EN_not_contains: String
  summary_EN_starts_with: String
  summary_EN_not_starts_with: String
  summary_EN_ends_with: String
  summary_EN_not_ends_with: String
  summary_ZH: String
  summary_ZH_not: String
  summary_ZH_in: [String!]
  summary_ZH_not_in: [String!]
  summary_ZH_lt: String
  summary_ZH_lte: String
  summary_ZH_gt: String
  summary_ZH_gte: String
  summary_ZH_contains: String
  summary_ZH_not_contains: String
  summary_ZH_starts_with: String
  summary_ZH_not_starts_with: String
  summary_ZH_ends_with: String
  summary_ZH_not_ends_with: String
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ClassSessionWhereInput!]
  OR: [ClassSessionWhereInput!]
  NOT: [ClassSessionWhereInput!]
}

input ClassSessionWhereUniqueInput {
  id: ID
}

scalar DateTime

enum Gender {
  M
  F
}

type Group {
  id: ID!
  name: String!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student!]
  classSessions(where: ClassSessionWhereInput, orderBy: ClassSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClassSession!]
  semester: Semester!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  students: StudentCreateManyWithoutGroupsInput
  classSessions: ClassSessionCreateManyWithoutGroupInput
  semester: SemesterCreateOneWithoutGroupsInput!
}

input GroupCreateManyWithoutSemesterInput {
  create: [GroupCreateWithoutSemesterInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutStudentsInput {
  create: [GroupCreateWithoutStudentsInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutClassSessionsInput {
  create: GroupCreateWithoutClassSessionsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutClassSessionsInput {
  id: ID
  name: String!
  students: StudentCreateManyWithoutGroupsInput
  semester: SemesterCreateOneWithoutGroupsInput!
}

input GroupCreateWithoutSemesterInput {
  id: ID
  name: String!
  students: StudentCreateManyWithoutGroupsInput
  classSessions: ClassSessionCreateManyWithoutGroupInput
}

input GroupCreateWithoutStudentsInput {
  id: ID
  name: String!
  classSessions: ClassSessionCreateManyWithoutGroupInput
  semester: SemesterCreateOneWithoutGroupsInput!
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  name: String
  students: StudentUpdateManyWithoutGroupsInput
  classSessions: ClassSessionUpdateManyWithoutGroupInput
  semester: SemesterUpdateOneRequiredWithoutGroupsInput
}

input GroupUpdateManyDataInput {
  name: String
}

input GroupUpdateManyMutationInput {
  name: String
}

input GroupUpdateManyWithoutSemesterInput {
  create: [GroupCreateWithoutSemesterInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutSemesterInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutSemesterInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithoutStudentsInput {
  create: [GroupCreateWithoutStudentsInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutStudentsInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutStudentsInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneRequiredWithoutClassSessionsInput {
  create: GroupCreateWithoutClassSessionsInput
  update: GroupUpdateWithoutClassSessionsDataInput
  upsert: GroupUpsertWithoutClassSessionsInput
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutClassSessionsDataInput {
  name: String
  students: StudentUpdateManyWithoutGroupsInput
  semester: SemesterUpdateOneRequiredWithoutGroupsInput
}

input GroupUpdateWithoutSemesterDataInput {
  name: String
  students: StudentUpdateManyWithoutGroupsInput
  classSessions: ClassSessionUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutStudentsDataInput {
  name: String
  classSessions: ClassSessionUpdateManyWithoutGroupInput
  semester: SemesterUpdateOneRequiredWithoutGroupsInput
}

input GroupUpdateWithWhereUniqueWithoutSemesterInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutSemesterDataInput!
}

input GroupUpdateWithWhereUniqueWithoutStudentsInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutStudentsDataInput!
}

input GroupUpsertWithoutClassSessionsInput {
  update: GroupUpdateWithoutClassSessionsDataInput!
  create: GroupCreateWithoutClassSessionsInput!
}

input GroupUpsertWithWhereUniqueWithoutSemesterInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutSemesterDataInput!
  create: GroupCreateWithoutSemesterInput!
}

input GroupUpsertWithWhereUniqueWithoutStudentsInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutStudentsDataInput!
  create: GroupCreateWithoutStudentsInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  students_every: StudentWhereInput
  students_some: StudentWhereInput
  students_none: StudentWhereInput
  classSessions_every: ClassSessionWhereInput
  classSessions_some: ClassSessionWhereInput
  classSessions_none: ClassSessionWhereInput
  semester: SemesterWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
}

scalar Json

type Lesson {
  id: ID!
  name: String!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  words(where: WordWhereInput, orderBy: WordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Word!]
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
  materials(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Material!]
}

type LessonConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge]!
  aggregate: AggregateLesson!
}

input LessonCreateInput {
  id: ID
  name: String!
  tags: TagCreateManyInput
  words: WordCreateManyWithoutLessonsInput
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
  materials: MaterialCreateManyInput
}

input LessonCreateManyWithoutWordsInput {
  create: [LessonCreateWithoutWordsInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateOneInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
}

input LessonCreateWithoutWordsInput {
  id: ID
  name: String!
  tags: TagCreateManyInput
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
  materials: MaterialCreateManyInput
}

type LessonEdge {
  node: Lesson!
  cursor: String!
}

enum LessonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  homeworkEN_ASC
  homeworkEN_DESC
  homeworkZH_ASC
  homeworkZH_DESC
  summaryEN_ASC
  summaryEN_DESC
  summaryZH_ASC
  summaryZH_DESC
}

type LessonPreviousValues {
  id: ID!
  name: String!
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
}

input LessonScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  homeworkEN: String
  homeworkEN_not: String
  homeworkEN_in: [String!]
  homeworkEN_not_in: [String!]
  homeworkEN_lt: String
  homeworkEN_lte: String
  homeworkEN_gt: String
  homeworkEN_gte: String
  homeworkEN_contains: String
  homeworkEN_not_contains: String
  homeworkEN_starts_with: String
  homeworkEN_not_starts_with: String
  homeworkEN_ends_with: String
  homeworkEN_not_ends_with: String
  homeworkZH: String
  homeworkZH_not: String
  homeworkZH_in: [String!]
  homeworkZH_not_in: [String!]
  homeworkZH_lt: String
  homeworkZH_lte: String
  homeworkZH_gt: String
  homeworkZH_gte: String
  homeworkZH_contains: String
  homeworkZH_not_contains: String
  homeworkZH_starts_with: String
  homeworkZH_not_starts_with: String
  homeworkZH_ends_with: String
  homeworkZH_not_ends_with: String
  summaryEN: String
  summaryEN_not: String
  summaryEN_in: [String!]
  summaryEN_not_in: [String!]
  summaryEN_lt: String
  summaryEN_lte: String
  summaryEN_gt: String
  summaryEN_gte: String
  summaryEN_contains: String
  summaryEN_not_contains: String
  summaryEN_starts_with: String
  summaryEN_not_starts_with: String
  summaryEN_ends_with: String
  summaryEN_not_ends_with: String
  summaryZH: String
  summaryZH_not: String
  summaryZH_in: [String!]
  summaryZH_not_in: [String!]
  summaryZH_lt: String
  summaryZH_lte: String
  summaryZH_gt: String
  summaryZH_gte: String
  summaryZH_contains: String
  summaryZH_not_contains: String
  summaryZH_starts_with: String
  summaryZH_not_starts_with: String
  summaryZH_ends_with: String
  summaryZH_not_ends_with: String
  AND: [LessonScalarWhereInput!]
  OR: [LessonScalarWhereInput!]
  NOT: [LessonScalarWhereInput!]
}

type LessonSubscriptionPayload {
  mutation: MutationType!
  node: Lesson
  updatedFields: [String!]
  previousValues: LessonPreviousValues
}

input LessonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LessonWhereInput
  AND: [LessonSubscriptionWhereInput!]
  OR: [LessonSubscriptionWhereInput!]
  NOT: [LessonSubscriptionWhereInput!]
}

input LessonUpdateDataInput {
  name: String
  tags: TagUpdateManyInput
  words: WordUpdateManyWithoutLessonsInput
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
  materials: MaterialUpdateManyInput
}

input LessonUpdateInput {
  name: String
  tags: TagUpdateManyInput
  words: WordUpdateManyWithoutLessonsInput
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
  materials: MaterialUpdateManyInput
}

input LessonUpdateManyDataInput {
  name: String
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
}

input LessonUpdateManyMutationInput {
  name: String
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
}

input LessonUpdateManyWithoutWordsInput {
  create: [LessonCreateWithoutWordsInput!]
  delete: [LessonWhereUniqueInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutWordsInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutWordsInput!]
  deleteMany: [LessonScalarWhereInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
}

input LessonUpdateManyWithWhereNestedInput {
  where: LessonScalarWhereInput!
  data: LessonUpdateManyDataInput!
}

input LessonUpdateOneInput {
  create: LessonCreateInput
  update: LessonUpdateDataInput
  upsert: LessonUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateWithoutWordsDataInput {
  name: String
  tags: TagUpdateManyInput
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
  materials: MaterialUpdateManyInput
}

input LessonUpdateWithWhereUniqueWithoutWordsInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutWordsDataInput!
}

input LessonUpsertNestedInput {
  update: LessonUpdateDataInput!
  create: LessonCreateInput!
}

input LessonUpsertWithWhereUniqueWithoutWordsInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutWordsDataInput!
  create: LessonCreateWithoutWordsInput!
}

input LessonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  words_every: WordWhereInput
  words_some: WordWhereInput
  words_none: WordWhereInput
  homeworkEN: String
  homeworkEN_not: String
  homeworkEN_in: [String!]
  homeworkEN_not_in: [String!]
  homeworkEN_lt: String
  homeworkEN_lte: String
  homeworkEN_gt: String
  homeworkEN_gte: String
  homeworkEN_contains: String
  homeworkEN_not_contains: String
  homeworkEN_starts_with: String
  homeworkEN_not_starts_with: String
  homeworkEN_ends_with: String
  homeworkEN_not_ends_with: String
  homeworkZH: String
  homeworkZH_not: String
  homeworkZH_in: [String!]
  homeworkZH_not_in: [String!]
  homeworkZH_lt: String
  homeworkZH_lte: String
  homeworkZH_gt: String
  homeworkZH_gte: String
  homeworkZH_contains: String
  homeworkZH_not_contains: String
  homeworkZH_starts_with: String
  homeworkZH_not_starts_with: String
  homeworkZH_ends_with: String
  homeworkZH_not_ends_with: String
  summaryEN: String
  summaryEN_not: String
  summaryEN_in: [String!]
  summaryEN_not_in: [String!]
  summaryEN_lt: String
  summaryEN_lte: String
  summaryEN_gt: String
  summaryEN_gte: String
  summaryEN_contains: String
  summaryEN_not_contains: String
  summaryEN_starts_with: String
  summaryEN_not_starts_with: String
  summaryEN_ends_with: String
  summaryEN_not_ends_with: String
  summaryZH: String
  summaryZH_not: String
  summaryZH_in: [String!]
  summaryZH_not_in: [String!]
  summaryZH_lt: String
  summaryZH_lte: String
  summaryZH_gt: String
  summaryZH_gte: String
  summaryZH_contains: String
  summaryZH_not_contains: String
  summaryZH_starts_with: String
  summaryZH_not_starts_with: String
  summaryZH_ends_with: String
  summaryZH_not_ends_with: String
  materials_every: MaterialWhereInput
  materials_some: MaterialWhereInput
  materials_none: MaterialWhereInput
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
}

input LessonWhereUniqueInput {
  id: ID
}

scalar Long

type Material {
  id: ID!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  type: String
  url: String
  title: String
  notes: String
}

type MaterialConnection {
  pageInfo: PageInfo!
  edges: [MaterialEdge]!
  aggregate: AggregateMaterial!
}

input MaterialCreateInput {
  id: ID
  tags: TagCreateManyInput
  type: String
  url: String
  title: String
  notes: String
}

input MaterialCreateManyInput {
  create: [MaterialCreateInput!]
  connect: [MaterialWhereUniqueInput!]
}

type MaterialEdge {
  node: Material!
  cursor: String!
}

enum MaterialOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  notes_ASC
  notes_DESC
}

type MaterialPreviousValues {
  id: ID!
  type: String
  url: String
  title: String
  notes: String
}

input MaterialScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  AND: [MaterialScalarWhereInput!]
  OR: [MaterialScalarWhereInput!]
  NOT: [MaterialScalarWhereInput!]
}

type MaterialSubscriptionPayload {
  mutation: MutationType!
  node: Material
  updatedFields: [String!]
  previousValues: MaterialPreviousValues
}

input MaterialSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MaterialWhereInput
  AND: [MaterialSubscriptionWhereInput!]
  OR: [MaterialSubscriptionWhereInput!]
  NOT: [MaterialSubscriptionWhereInput!]
}

input MaterialUpdateDataInput {
  tags: TagUpdateManyInput
  type: String
  url: String
  title: String
  notes: String
}

input MaterialUpdateInput {
  tags: TagUpdateManyInput
  type: String
  url: String
  title: String
  notes: String
}

input MaterialUpdateManyDataInput {
  type: String
  url: String
  title: String
  notes: String
}

input MaterialUpdateManyInput {
  create: [MaterialCreateInput!]
  update: [MaterialUpdateWithWhereUniqueNestedInput!]
  upsert: [MaterialUpsertWithWhereUniqueNestedInput!]
  delete: [MaterialWhereUniqueInput!]
  connect: [MaterialWhereUniqueInput!]
  set: [MaterialWhereUniqueInput!]
  disconnect: [MaterialWhereUniqueInput!]
  deleteMany: [MaterialScalarWhereInput!]
  updateMany: [MaterialUpdateManyWithWhereNestedInput!]
}

input MaterialUpdateManyMutationInput {
  type: String
  url: String
  title: String
  notes: String
}

input MaterialUpdateManyWithWhereNestedInput {
  where: MaterialScalarWhereInput!
  data: MaterialUpdateManyDataInput!
}

input MaterialUpdateWithWhereUniqueNestedInput {
  where: MaterialWhereUniqueInput!
  data: MaterialUpdateDataInput!
}

input MaterialUpsertWithWhereUniqueNestedInput {
  where: MaterialWhereUniqueInput!
  update: MaterialUpdateDataInput!
  create: MaterialCreateInput!
}

input MaterialWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  AND: [MaterialWhereInput!]
  OR: [MaterialWhereInput!]
  NOT: [MaterialWhereInput!]
}

input MaterialWhereUniqueInput {
  id: ID
}

type Message {
  id: ID!
  data: Json
  createdAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  data: Json
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  data_ASC
  data_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessagePreviousValues {
  id: ID!
  data: Json
  createdAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  data: Json
}

input MessageUpdateManyMutationInput {
  data: Json
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createAttendance(data: AttendanceCreateInput!): Attendance!
  updateAttendance(data: AttendanceUpdateInput!, where: AttendanceWhereUniqueInput!): Attendance
  updateManyAttendances(data: AttendanceUpdateManyMutationInput!, where: AttendanceWhereInput): BatchPayload!
  upsertAttendance(where: AttendanceWhereUniqueInput!, create: AttendanceCreateInput!, update: AttendanceUpdateInput!): Attendance!
  deleteAttendance(where: AttendanceWhereUniqueInput!): Attendance
  deleteManyAttendances(where: AttendanceWhereInput): BatchPayload!
  createClassSession(data: ClassSessionCreateInput!): ClassSession!
  updateClassSession(data: ClassSessionUpdateInput!, where: ClassSessionWhereUniqueInput!): ClassSession
  updateManyClassSessions(data: ClassSessionUpdateManyMutationInput!, where: ClassSessionWhereInput): BatchPayload!
  upsertClassSession(where: ClassSessionWhereUniqueInput!, create: ClassSessionCreateInput!, update: ClassSessionUpdateInput!): ClassSession!
  deleteClassSession(where: ClassSessionWhereUniqueInput!): ClassSession
  deleteManyClassSessions(where: ClassSessionWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createLesson(data: LessonCreateInput!): Lesson!
  updateLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateManyLessons(data: LessonUpdateManyMutationInput!, where: LessonWhereInput): BatchPayload!
  upsertLesson(where: LessonWhereUniqueInput!, create: LessonCreateInput!, update: LessonUpdateInput!): Lesson!
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteManyLessons(where: LessonWhereInput): BatchPayload!
  createMaterial(data: MaterialCreateInput!): Material!
  updateMaterial(data: MaterialUpdateInput!, where: MaterialWhereUniqueInput!): Material
  updateManyMaterials(data: MaterialUpdateManyMutationInput!, where: MaterialWhereInput): BatchPayload!
  upsertMaterial(where: MaterialWhereUniqueInput!, create: MaterialCreateInput!, update: MaterialUpdateInput!): Material!
  deleteMaterial(where: MaterialWhereUniqueInput!): Material
  deleteManyMaterials(where: MaterialWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createPoint(data: PointCreateInput!): Point!
  updatePoint(data: PointUpdateInput!, where: PointWhereUniqueInput!): Point
  updateManyPoints(data: PointUpdateManyMutationInput!, where: PointWhereInput): BatchPayload!
  upsertPoint(where: PointWhereUniqueInput!, create: PointCreateInput!, update: PointUpdateInput!): Point!
  deletePoint(where: PointWhereUniqueInput!): Point
  deleteManyPoints(where: PointWhereInput): BatchPayload!
  createSemester(data: SemesterCreateInput!): Semester!
  updateSemester(data: SemesterUpdateInput!, where: SemesterWhereUniqueInput!): Semester
  updateManySemesters(data: SemesterUpdateManyMutationInput!, where: SemesterWhereInput): BatchPayload!
  upsertSemester(where: SemesterWhereUniqueInput!, create: SemesterCreateInput!, update: SemesterUpdateInput!): Semester!
  deleteSemester(where: SemesterWhereUniqueInput!): Semester
  deleteManySemesters(where: SemesterWhereInput): BatchPayload!
  createStudent(data: StudentCreateInput!): Student!
  updateStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
  updateManyStudents(data: StudentUpdateManyMutationInput!, where: StudentWhereInput): BatchPayload!
  upsertStudent(where: StudentWhereUniqueInput!, create: StudentCreateInput!, update: StudentUpdateInput!): Student!
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteManyStudents(where: StudentWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createViewer(data: ViewerCreateInput!): Viewer!
  updateViewer(data: ViewerUpdateInput!, where: ViewerWhereUniqueInput!): Viewer
  updateManyViewers(data: ViewerUpdateManyMutationInput!, where: ViewerWhereInput): BatchPayload!
  upsertViewer(where: ViewerWhereUniqueInput!, create: ViewerCreateInput!, update: ViewerUpdateInput!): Viewer!
  deleteViewer(where: ViewerWhereUniqueInput!): Viewer
  deleteManyViewers(where: ViewerWhereInput): BatchPayload!
  createWord(data: WordCreateInput!): Word!
  updateWord(data: WordUpdateInput!, where: WordWhereUniqueInput!): Word
  updateManyWords(data: WordUpdateManyMutationInput!, where: WordWhereInput): BatchPayload!
  upsertWord(where: WordWhereUniqueInput!, create: WordCreateInput!, update: WordUpdateInput!): Word!
  deleteWord(where: WordWhereUniqueInput!): Word
  deleteManyWords(where: WordWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Point {
  id: ID!
  value: Int!
  student: Student!
  classSession: ClassSession!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PointConnection {
  pageInfo: PageInfo!
  edges: [PointEdge]!
  aggregate: AggregatePoint!
}

input PointCreateInput {
  id: ID
  value: Int!
  student: StudentCreateOneWithoutPointsInput!
  classSession: ClassSessionCreateOneWithoutPointsInput!
}

input PointCreateManyWithoutClassSessionInput {
  create: [PointCreateWithoutClassSessionInput!]
  connect: [PointWhereUniqueInput!]
}

input PointCreateManyWithoutStudentInput {
  create: [PointCreateWithoutStudentInput!]
  connect: [PointWhereUniqueInput!]
}

input PointCreateWithoutClassSessionInput {
  id: ID
  value: Int!
  student: StudentCreateOneWithoutPointsInput!
}

input PointCreateWithoutStudentInput {
  id: ID
  value: Int!
  classSession: ClassSessionCreateOneWithoutPointsInput!
}

type PointEdge {
  node: Point!
  cursor: String!
}

enum PointOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PointPreviousValues {
  id: ID!
  value: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PointScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PointScalarWhereInput!]
  OR: [PointScalarWhereInput!]
  NOT: [PointScalarWhereInput!]
}

type PointSubscriptionPayload {
  mutation: MutationType!
  node: Point
  updatedFields: [String!]
  previousValues: PointPreviousValues
}

input PointSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PointWhereInput
  AND: [PointSubscriptionWhereInput!]
  OR: [PointSubscriptionWhereInput!]
  NOT: [PointSubscriptionWhereInput!]
}

input PointUpdateInput {
  value: Int
  student: StudentUpdateOneRequiredWithoutPointsInput
  classSession: ClassSessionUpdateOneRequiredWithoutPointsInput
}

input PointUpdateManyDataInput {
  value: Int
}

input PointUpdateManyMutationInput {
  value: Int
}

input PointUpdateManyWithoutClassSessionInput {
  create: [PointCreateWithoutClassSessionInput!]
  delete: [PointWhereUniqueInput!]
  connect: [PointWhereUniqueInput!]
  set: [PointWhereUniqueInput!]
  disconnect: [PointWhereUniqueInput!]
  update: [PointUpdateWithWhereUniqueWithoutClassSessionInput!]
  upsert: [PointUpsertWithWhereUniqueWithoutClassSessionInput!]
  deleteMany: [PointScalarWhereInput!]
  updateMany: [PointUpdateManyWithWhereNestedInput!]
}

input PointUpdateManyWithoutStudentInput {
  create: [PointCreateWithoutStudentInput!]
  delete: [PointWhereUniqueInput!]
  connect: [PointWhereUniqueInput!]
  set: [PointWhereUniqueInput!]
  disconnect: [PointWhereUniqueInput!]
  update: [PointUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [PointUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [PointScalarWhereInput!]
  updateMany: [PointUpdateManyWithWhereNestedInput!]
}

input PointUpdateManyWithWhereNestedInput {
  where: PointScalarWhereInput!
  data: PointUpdateManyDataInput!
}

input PointUpdateWithoutClassSessionDataInput {
  value: Int
  student: StudentUpdateOneRequiredWithoutPointsInput
}

input PointUpdateWithoutStudentDataInput {
  value: Int
  classSession: ClassSessionUpdateOneRequiredWithoutPointsInput
}

input PointUpdateWithWhereUniqueWithoutClassSessionInput {
  where: PointWhereUniqueInput!
  data: PointUpdateWithoutClassSessionDataInput!
}

input PointUpdateWithWhereUniqueWithoutStudentInput {
  where: PointWhereUniqueInput!
  data: PointUpdateWithoutStudentDataInput!
}

input PointUpsertWithWhereUniqueWithoutClassSessionInput {
  where: PointWhereUniqueInput!
  update: PointUpdateWithoutClassSessionDataInput!
  create: PointCreateWithoutClassSessionInput!
}

input PointUpsertWithWhereUniqueWithoutStudentInput {
  where: PointWhereUniqueInput!
  update: PointUpdateWithoutStudentDataInput!
  create: PointCreateWithoutStudentInput!
}

input PointWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  student: StudentWhereInput
  classSession: ClassSessionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PointWhereInput!]
  OR: [PointWhereInput!]
  NOT: [PointWhereInput!]
}

input PointWhereUniqueInput {
  id: ID
}

type Query {
  attendance(where: AttendanceWhereUniqueInput!): Attendance
  attendances(where: AttendanceWhereInput, orderBy: AttendanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attendance]!
  attendancesConnection(where: AttendanceWhereInput, orderBy: AttendanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttendanceConnection!
  classSession(where: ClassSessionWhereUniqueInput!): ClassSession
  classSessions(where: ClassSessionWhereInput, orderBy: ClassSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClassSession]!
  classSessionsConnection(where: ClassSessionWhereInput, orderBy: ClassSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassSessionConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson]!
  lessonsConnection(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonConnection!
  material(where: MaterialWhereUniqueInput!): Material
  materials(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Material]!
  materialsConnection(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MaterialConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  point(where: PointWhereUniqueInput!): Point
  points(where: PointWhereInput, orderBy: PointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Point]!
  pointsConnection(where: PointWhereInput, orderBy: PointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PointConnection!
  semester(where: SemesterWhereUniqueInput!): Semester
  semesters(where: SemesterWhereInput, orderBy: SemesterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Semester]!
  semestersConnection(where: SemesterWhereInput, orderBy: SemesterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SemesterConnection!
  student(where: StudentWhereUniqueInput!): Student
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student]!
  studentsConnection(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  viewer(where: ViewerWhereUniqueInput!): Viewer
  viewers(where: ViewerWhereInput, orderBy: ViewerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Viewer]!
  viewersConnection(where: ViewerWhereInput, orderBy: ViewerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ViewerConnection!
  word(where: WordWhereUniqueInput!): Word
  words(where: WordWhereInput, orderBy: WordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Word]!
  wordsConnection(where: WordWhereInput, orderBy: WordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WordConnection!
  node(id: ID!): Node
}

enum Role {
  Admin
}

type Semester {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
  name: String!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SemesterConnection {
  pageInfo: PageInfo!
  edges: [SemesterEdge]!
  aggregate: AggregateSemester!
}

input SemesterCreateInput {
  id: ID
  startDate: DateTime!
  endDate: DateTime!
  name: String!
  groups: GroupCreateManyWithoutSemesterInput
}

input SemesterCreateOneWithoutGroupsInput {
  create: SemesterCreateWithoutGroupsInput
  connect: SemesterWhereUniqueInput
}

input SemesterCreateWithoutGroupsInput {
  id: ID
  startDate: DateTime!
  endDate: DateTime!
  name: String!
}

type SemesterEdge {
  node: Semester!
  cursor: String!
}

enum SemesterOrderByInput {
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SemesterPreviousValues {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SemesterSubscriptionPayload {
  mutation: MutationType!
  node: Semester
  updatedFields: [String!]
  previousValues: SemesterPreviousValues
}

input SemesterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SemesterWhereInput
  AND: [SemesterSubscriptionWhereInput!]
  OR: [SemesterSubscriptionWhereInput!]
  NOT: [SemesterSubscriptionWhereInput!]
}

input SemesterUpdateInput {
  startDate: DateTime
  endDate: DateTime
  name: String
  groups: GroupUpdateManyWithoutSemesterInput
}

input SemesterUpdateManyMutationInput {
  startDate: DateTime
  endDate: DateTime
  name: String
}

input SemesterUpdateOneRequiredWithoutGroupsInput {
  create: SemesterCreateWithoutGroupsInput
  update: SemesterUpdateWithoutGroupsDataInput
  upsert: SemesterUpsertWithoutGroupsInput
  connect: SemesterWhereUniqueInput
}

input SemesterUpdateWithoutGroupsDataInput {
  startDate: DateTime
  endDate: DateTime
  name: String
}

input SemesterUpsertWithoutGroupsInput {
  update: SemesterUpdateWithoutGroupsDataInput!
  create: SemesterCreateWithoutGroupsInput!
}

input SemesterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SemesterWhereInput!]
  OR: [SemesterWhereInput!]
  NOT: [SemesterWhereInput!]
}

input SemesterWhereUniqueInput {
  id: ID
  name: String
}

enum Stage {
  Inactive
  Active
  Started
  Ended
}

type Student {
  id: ID!
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  points(where: PointWhereInput, orderBy: PointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Point!]
  attendances(where: AttendanceWhereInput, orderBy: AttendanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attendance!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StudentConnection {
  pageInfo: PageInfo!
  edges: [StudentEdge]!
  aggregate: AggregateStudent!
}

input StudentCreateInput {
  id: ID
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  groups: GroupCreateManyWithoutStudentsInput
  points: PointCreateManyWithoutStudentInput
  attendances: AttendanceCreateManyWithoutStudentInput
}

input StudentCreateManyWithoutGroupsInput {
  create: [StudentCreateWithoutGroupsInput!]
  connect: [StudentWhereUniqueInput!]
}

input StudentCreateOneWithoutAttendancesInput {
  create: StudentCreateWithoutAttendancesInput
  connect: StudentWhereUniqueInput
}

input StudentCreateOneWithoutPointsInput {
  create: StudentCreateWithoutPointsInput
  connect: StudentWhereUniqueInput
}

input StudentCreateWithoutAttendancesInput {
  id: ID
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  groups: GroupCreateManyWithoutStudentsInput
  points: PointCreateManyWithoutStudentInput
}

input StudentCreateWithoutGroupsInput {
  id: ID
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  points: PointCreateManyWithoutStudentInput
  attendances: AttendanceCreateManyWithoutStudentInput
}

input StudentCreateWithoutPointsInput {
  id: ID
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  groups: GroupCreateManyWithoutStudentsInput
  attendances: AttendanceCreateManyWithoutStudentInput
}

type StudentEdge {
  node: Student!
  cursor: String!
}

enum StudentOrderByInput {
  id_ASC
  id_DESC
  chineseName_ASC
  chineseName_DESC
  englishName_ASC
  englishName_DESC
  pinyinName_ASC
  pinyinName_DESC
  birthdate_ASC
  birthdate_DESC
  gender_ASC
  gender_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StudentPreviousValues {
  id: ID!
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StudentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chineseName: String
  chineseName_not: String
  chineseName_in: [String!]
  chineseName_not_in: [String!]
  chineseName_lt: String
  chineseName_lte: String
  chineseName_gt: String
  chineseName_gte: String
  chineseName_contains: String
  chineseName_not_contains: String
  chineseName_starts_with: String
  chineseName_not_starts_with: String
  chineseName_ends_with: String
  chineseName_not_ends_with: String
  englishName: String
  englishName_not: String
  englishName_in: [String!]
  englishName_not_in: [String!]
  englishName_lt: String
  englishName_lte: String
  englishName_gt: String
  englishName_gte: String
  englishName_contains: String
  englishName_not_contains: String
  englishName_starts_with: String
  englishName_not_starts_with: String
  englishName_ends_with: String
  englishName_not_ends_with: String
  pinyinName: String
  pinyinName_not: String
  pinyinName_in: [String!]
  pinyinName_not_in: [String!]
  pinyinName_lt: String
  pinyinName_lte: String
  pinyinName_gt: String
  pinyinName_gte: String
  pinyinName_contains: String
  pinyinName_not_contains: String
  pinyinName_starts_with: String
  pinyinName_not_starts_with: String
  pinyinName_ends_with: String
  pinyinName_not_ends_with: String
  birthdate: DateTime
  birthdate_not: DateTime
  birthdate_in: [DateTime!]
  birthdate_not_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StudentScalarWhereInput!]
  OR: [StudentScalarWhereInput!]
  NOT: [StudentScalarWhereInput!]
}

type StudentSubscriptionPayload {
  mutation: MutationType!
  node: Student
  updatedFields: [String!]
  previousValues: StudentPreviousValues
}

input StudentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudentWhereInput
  AND: [StudentSubscriptionWhereInput!]
  OR: [StudentSubscriptionWhereInput!]
  NOT: [StudentSubscriptionWhereInput!]
}

input StudentUpdateInput {
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  groups: GroupUpdateManyWithoutStudentsInput
  points: PointUpdateManyWithoutStudentInput
  attendances: AttendanceUpdateManyWithoutStudentInput
}

input StudentUpdateManyDataInput {
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
}

input StudentUpdateManyMutationInput {
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
}

input StudentUpdateManyWithoutGroupsInput {
  create: [StudentCreateWithoutGroupsInput!]
  delete: [StudentWhereUniqueInput!]
  connect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  disconnect: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutGroupsInput!]
  deleteMany: [StudentScalarWhereInput!]
  updateMany: [StudentUpdateManyWithWhereNestedInput!]
}

input StudentUpdateManyWithWhereNestedInput {
  where: StudentScalarWhereInput!
  data: StudentUpdateManyDataInput!
}

input StudentUpdateOneRequiredWithoutAttendancesInput {
  create: StudentCreateWithoutAttendancesInput
  update: StudentUpdateWithoutAttendancesDataInput
  upsert: StudentUpsertWithoutAttendancesInput
  connect: StudentWhereUniqueInput
}

input StudentUpdateOneRequiredWithoutPointsInput {
  create: StudentCreateWithoutPointsInput
  update: StudentUpdateWithoutPointsDataInput
  upsert: StudentUpsertWithoutPointsInput
  connect: StudentWhereUniqueInput
}

input StudentUpdateWithoutAttendancesDataInput {
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  groups: GroupUpdateManyWithoutStudentsInput
  points: PointUpdateManyWithoutStudentInput
}

input StudentUpdateWithoutGroupsDataInput {
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  points: PointUpdateManyWithoutStudentInput
  attendances: AttendanceUpdateManyWithoutStudentInput
}

input StudentUpdateWithoutPointsDataInput {
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  groups: GroupUpdateManyWithoutStudentsInput
  attendances: AttendanceUpdateManyWithoutStudentInput
}

input StudentUpdateWithWhereUniqueWithoutGroupsInput {
  where: StudentWhereUniqueInput!
  data: StudentUpdateWithoutGroupsDataInput!
}

input StudentUpsertWithoutAttendancesInput {
  update: StudentUpdateWithoutAttendancesDataInput!
  create: StudentCreateWithoutAttendancesInput!
}

input StudentUpsertWithoutPointsInput {
  update: StudentUpdateWithoutPointsDataInput!
  create: StudentCreateWithoutPointsInput!
}

input StudentUpsertWithWhereUniqueWithoutGroupsInput {
  where: StudentWhereUniqueInput!
  update: StudentUpdateWithoutGroupsDataInput!
  create: StudentCreateWithoutGroupsInput!
}

input StudentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chineseName: String
  chineseName_not: String
  chineseName_in: [String!]
  chineseName_not_in: [String!]
  chineseName_lt: String
  chineseName_lte: String
  chineseName_gt: String
  chineseName_gte: String
  chineseName_contains: String
  chineseName_not_contains: String
  chineseName_starts_with: String
  chineseName_not_starts_with: String
  chineseName_ends_with: String
  chineseName_not_ends_with: String
  englishName: String
  englishName_not: String
  englishName_in: [String!]
  englishName_not_in: [String!]
  englishName_lt: String
  englishName_lte: String
  englishName_gt: String
  englishName_gte: String
  englishName_contains: String
  englishName_not_contains: String
  englishName_starts_with: String
  englishName_not_starts_with: String
  englishName_ends_with: String
  englishName_not_ends_with: String
  pinyinName: String
  pinyinName_not: String
  pinyinName_in: [String!]
  pinyinName_not_in: [String!]
  pinyinName_lt: String
  pinyinName_lte: String
  pinyinName_gt: String
  pinyinName_gte: String
  pinyinName_contains: String
  pinyinName_not_contains: String
  pinyinName_starts_with: String
  pinyinName_not_starts_with: String
  pinyinName_ends_with: String
  pinyinName_not_ends_with: String
  birthdate: DateTime
  birthdate_not: DateTime
  birthdate_in: [DateTime!]
  birthdate_not_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  points_every: PointWhereInput
  points_some: PointWhereInput
  points_none: PointWhereInput
  attendances_every: AttendanceWhereInput
  attendances_some: AttendanceWhereInput
  attendances_none: AttendanceWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
}

input StudentWhereUniqueInput {
  id: ID
}

type Subscription {
  attendance(where: AttendanceSubscriptionWhereInput): AttendanceSubscriptionPayload
  classSession(where: ClassSessionSubscriptionWhereInput): ClassSessionSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  lesson(where: LessonSubscriptionWhereInput): LessonSubscriptionPayload
  material(where: MaterialSubscriptionWhereInput): MaterialSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  point(where: PointSubscriptionWhereInput): PointSubscriptionPayload
  semester(where: SemesterSubscriptionWhereInput): SemesterSubscriptionPayload
  student(where: StudentSubscriptionWhereInput): StudentSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  viewer(where: ViewerSubscriptionWhereInput): ViewerSubscriptionPayload
  word(where: WordSubscriptionWhereInput): WordSubscriptionPayload
}

type Tag {
  id: ID!
  name: String!
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
}

input TagCreateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateDataInput {
  name: String
}

input TagUpdateInput {
  name: String
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  update: [TagUpdateWithWhereUniqueNestedInput!]
  upsert: [TagUpsertWithWhereUniqueNestedInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  data: TagUpdateDataInput!
}

input TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  update: TagUpdateDataInput!
  create: TagCreateInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  username: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  role: Role
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  role: Role
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  role: Role
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

type Viewer {
  id: ID!
  name: String
  createdAt: DateTime!
}

type ViewerConnection {
  pageInfo: PageInfo!
  edges: [ViewerEdge]!
  aggregate: AggregateViewer!
}

input ViewerCreateInput {
  id: ID
  name: String
}

type ViewerEdge {
  node: Viewer!
  cursor: String!
}

enum ViewerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
}

type ViewerPreviousValues {
  id: ID!
  name: String
  createdAt: DateTime!
}

type ViewerSubscriptionPayload {
  mutation: MutationType!
  node: Viewer
  updatedFields: [String!]
  previousValues: ViewerPreviousValues
}

input ViewerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ViewerWhereInput
  AND: [ViewerSubscriptionWhereInput!]
  OR: [ViewerSubscriptionWhereInput!]
  NOT: [ViewerSubscriptionWhereInput!]
}

input ViewerUpdateInput {
  name: String
}

input ViewerUpdateManyMutationInput {
  name: String
}

input ViewerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ViewerWhereInput!]
  OR: [ViewerWhereInput!]
  NOT: [ViewerWhereInput!]
}

input ViewerWhereUniqueInput {
  id: ID
}

type Word {
  id: ID!
  english: String!
  chinese: String
  audio: String
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
}

type WordConnection {
  pageInfo: PageInfo!
  edges: [WordEdge]!
  aggregate: AggregateWord!
}

input WordCreateInput {
  id: ID
  english: String!
  chinese: String
  audio: String
  lessons: LessonCreateManyWithoutWordsInput
  tags: TagCreateManyInput
}

input WordCreateManyWithoutLessonsInput {
  create: [WordCreateWithoutLessonsInput!]
  connect: [WordWhereUniqueInput!]
}

input WordCreateWithoutLessonsInput {
  id: ID
  english: String!
  chinese: String
  audio: String
  tags: TagCreateManyInput
}

type WordEdge {
  node: Word!
  cursor: String!
}

enum WordOrderByInput {
  id_ASC
  id_DESC
  english_ASC
  english_DESC
  chinese_ASC
  chinese_DESC
  audio_ASC
  audio_DESC
}

type WordPreviousValues {
  id: ID!
  english: String!
  chinese: String
  audio: String
}

input WordScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  english: String
  english_not: String
  english_in: [String!]
  english_not_in: [String!]
  english_lt: String
  english_lte: String
  english_gt: String
  english_gte: String
  english_contains: String
  english_not_contains: String
  english_starts_with: String
  english_not_starts_with: String
  english_ends_with: String
  english_not_ends_with: String
  chinese: String
  chinese_not: String
  chinese_in: [String!]
  chinese_not_in: [String!]
  chinese_lt: String
  chinese_lte: String
  chinese_gt: String
  chinese_gte: String
  chinese_contains: String
  chinese_not_contains: String
  chinese_starts_with: String
  chinese_not_starts_with: String
  chinese_ends_with: String
  chinese_not_ends_with: String
  audio: String
  audio_not: String
  audio_in: [String!]
  audio_not_in: [String!]
  audio_lt: String
  audio_lte: String
  audio_gt: String
  audio_gte: String
  audio_contains: String
  audio_not_contains: String
  audio_starts_with: String
  audio_not_starts_with: String
  audio_ends_with: String
  audio_not_ends_with: String
  AND: [WordScalarWhereInput!]
  OR: [WordScalarWhereInput!]
  NOT: [WordScalarWhereInput!]
}

type WordSubscriptionPayload {
  mutation: MutationType!
  node: Word
  updatedFields: [String!]
  previousValues: WordPreviousValues
}

input WordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WordWhereInput
  AND: [WordSubscriptionWhereInput!]
  OR: [WordSubscriptionWhereInput!]
  NOT: [WordSubscriptionWhereInput!]
}

input WordUpdateInput {
  english: String
  chinese: String
  audio: String
  lessons: LessonUpdateManyWithoutWordsInput
  tags: TagUpdateManyInput
}

input WordUpdateManyDataInput {
  english: String
  chinese: String
  audio: String
}

input WordUpdateManyMutationInput {
  english: String
  chinese: String
  audio: String
}

input WordUpdateManyWithoutLessonsInput {
  create: [WordCreateWithoutLessonsInput!]
  delete: [WordWhereUniqueInput!]
  connect: [WordWhereUniqueInput!]
  set: [WordWhereUniqueInput!]
  disconnect: [WordWhereUniqueInput!]
  update: [WordUpdateWithWhereUniqueWithoutLessonsInput!]
  upsert: [WordUpsertWithWhereUniqueWithoutLessonsInput!]
  deleteMany: [WordScalarWhereInput!]
  updateMany: [WordUpdateManyWithWhereNestedInput!]
}

input WordUpdateManyWithWhereNestedInput {
  where: WordScalarWhereInput!
  data: WordUpdateManyDataInput!
}

input WordUpdateWithoutLessonsDataInput {
  english: String
  chinese: String
  audio: String
  tags: TagUpdateManyInput
}

input WordUpdateWithWhereUniqueWithoutLessonsInput {
  where: WordWhereUniqueInput!
  data: WordUpdateWithoutLessonsDataInput!
}

input WordUpsertWithWhereUniqueWithoutLessonsInput {
  where: WordWhereUniqueInput!
  update: WordUpdateWithoutLessonsDataInput!
  create: WordCreateWithoutLessonsInput!
}

input WordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  english: String
  english_not: String
  english_in: [String!]
  english_not_in: [String!]
  english_lt: String
  english_lte: String
  english_gt: String
  english_gte: String
  english_contains: String
  english_not_contains: String
  english_starts_with: String
  english_not_starts_with: String
  english_ends_with: String
  english_not_ends_with: String
  chinese: String
  chinese_not: String
  chinese_in: [String!]
  chinese_not_in: [String!]
  chinese_lt: String
  chinese_lte: String
  chinese_gt: String
  chinese_gte: String
  chinese_contains: String
  chinese_not_contains: String
  chinese_starts_with: String
  chinese_not_starts_with: String
  chinese_ends_with: String
  chinese_not_ends_with: String
  audio: String
  audio_not: String
  audio_in: [String!]
  audio_not_in: [String!]
  audio_lt: String
  audio_lte: String
  audio_gt: String
  audio_gte: String
  audio_contains: String
  audio_not_contains: String
  audio_starts_with: String
  audio_not_starts_with: String
  audio_ends_with: String
  audio_not_ends_with: String
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  AND: [WordWhereInput!]
  OR: [WordWhereInput!]
  NOT: [WordWhereInput!]
}

input WordWhereUniqueInput {
  id: ID
}
