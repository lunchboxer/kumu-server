// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  attendance: (where?: AttendanceWhereInput) => Promise<boolean>;
  classSession: (where?: ClassSessionWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  lesson: (where?: LessonWhereInput) => Promise<boolean>;
  material: (where?: MaterialWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  point: (where?: PointWhereInput) => Promise<boolean>;
  report: (where?: ReportWhereInput) => Promise<boolean>;
  semester: (where?: SemesterWhereInput) => Promise<boolean>;
  student: (where?: StudentWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  viewer: (where?: ViewerWhereInput) => Promise<boolean>;
  word: (where?: WordWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attendance: (where: AttendanceWhereUniqueInput) => AttendanceNullablePromise;
  attendances: (args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attendance>;
  attendancesConnection: (args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttendanceConnectionPromise;
  classSession: (
    where: ClassSessionWhereUniqueInput
  ) => ClassSessionNullablePromise;
  classSessions: (args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ClassSession>;
  classSessionsConnection: (args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassSessionConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  lesson: (where: LessonWhereUniqueInput) => LessonNullablePromise;
  lessons: (args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Lesson>;
  lessonsConnection: (args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LessonConnectionPromise;
  material: (where: MaterialWhereUniqueInput) => MaterialNullablePromise;
  materials: (args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Material>;
  materialsConnection: (args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MaterialConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  point: (where: PointWhereUniqueInput) => PointNullablePromise;
  points: (args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Point>;
  pointsConnection: (args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PointConnectionPromise;
  report: (where: ReportWhereUniqueInput) => ReportNullablePromise;
  reports: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Report>;
  reportsConnection: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReportConnectionPromise;
  semester: (where: SemesterWhereUniqueInput) => SemesterNullablePromise;
  semesters: (args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Semester>;
  semestersConnection: (args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SemesterConnectionPromise;
  student: (where: StudentWhereUniqueInput) => StudentNullablePromise;
  students: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Student>;
  studentsConnection: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StudentConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  viewer: (where: ViewerWhereUniqueInput) => ViewerNullablePromise;
  viewers: (args?: {
    where?: ViewerWhereInput;
    orderBy?: ViewerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Viewer>;
  viewersConnection: (args?: {
    where?: ViewerWhereInput;
    orderBy?: ViewerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ViewerConnectionPromise;
  word: (where: WordWhereUniqueInput) => WordNullablePromise;
  words: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Word>;
  wordsConnection: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttendance: (data: AttendanceCreateInput) => AttendancePromise;
  updateAttendance: (args: {
    data: AttendanceUpdateInput;
    where: AttendanceWhereUniqueInput;
  }) => AttendancePromise;
  updateManyAttendances: (args: {
    data: AttendanceUpdateManyMutationInput;
    where?: AttendanceWhereInput;
  }) => BatchPayloadPromise;
  upsertAttendance: (args: {
    where: AttendanceWhereUniqueInput;
    create: AttendanceCreateInput;
    update: AttendanceUpdateInput;
  }) => AttendancePromise;
  deleteAttendance: (where: AttendanceWhereUniqueInput) => AttendancePromise;
  deleteManyAttendances: (where?: AttendanceWhereInput) => BatchPayloadPromise;
  createClassSession: (data: ClassSessionCreateInput) => ClassSessionPromise;
  updateClassSession: (args: {
    data: ClassSessionUpdateInput;
    where: ClassSessionWhereUniqueInput;
  }) => ClassSessionPromise;
  updateManyClassSessions: (args: {
    data: ClassSessionUpdateManyMutationInput;
    where?: ClassSessionWhereInput;
  }) => BatchPayloadPromise;
  upsertClassSession: (args: {
    where: ClassSessionWhereUniqueInput;
    create: ClassSessionCreateInput;
    update: ClassSessionUpdateInput;
  }) => ClassSessionPromise;
  deleteClassSession: (
    where: ClassSessionWhereUniqueInput
  ) => ClassSessionPromise;
  deleteManyClassSessions: (
    where?: ClassSessionWhereInput
  ) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createLesson: (data: LessonCreateInput) => LessonPromise;
  updateLesson: (args: {
    data: LessonUpdateInput;
    where: LessonWhereUniqueInput;
  }) => LessonPromise;
  updateManyLessons: (args: {
    data: LessonUpdateManyMutationInput;
    where?: LessonWhereInput;
  }) => BatchPayloadPromise;
  upsertLesson: (args: {
    where: LessonWhereUniqueInput;
    create: LessonCreateInput;
    update: LessonUpdateInput;
  }) => LessonPromise;
  deleteLesson: (where: LessonWhereUniqueInput) => LessonPromise;
  deleteManyLessons: (where?: LessonWhereInput) => BatchPayloadPromise;
  createMaterial: (data: MaterialCreateInput) => MaterialPromise;
  updateMaterial: (args: {
    data: MaterialUpdateInput;
    where: MaterialWhereUniqueInput;
  }) => MaterialPromise;
  updateManyMaterials: (args: {
    data: MaterialUpdateManyMutationInput;
    where?: MaterialWhereInput;
  }) => BatchPayloadPromise;
  upsertMaterial: (args: {
    where: MaterialWhereUniqueInput;
    create: MaterialCreateInput;
    update: MaterialUpdateInput;
  }) => MaterialPromise;
  deleteMaterial: (where: MaterialWhereUniqueInput) => MaterialPromise;
  deleteManyMaterials: (where?: MaterialWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createPoint: (data: PointCreateInput) => PointPromise;
  updatePoint: (args: {
    data: PointUpdateInput;
    where: PointWhereUniqueInput;
  }) => PointPromise;
  updateManyPoints: (args: {
    data: PointUpdateManyMutationInput;
    where?: PointWhereInput;
  }) => BatchPayloadPromise;
  upsertPoint: (args: {
    where: PointWhereUniqueInput;
    create: PointCreateInput;
    update: PointUpdateInput;
  }) => PointPromise;
  deletePoint: (where: PointWhereUniqueInput) => PointPromise;
  deleteManyPoints: (where?: PointWhereInput) => BatchPayloadPromise;
  createReport: (data: ReportCreateInput) => ReportPromise;
  updateReport: (args: {
    data: ReportUpdateInput;
    where: ReportWhereUniqueInput;
  }) => ReportPromise;
  updateManyReports: (args: {
    data: ReportUpdateManyMutationInput;
    where?: ReportWhereInput;
  }) => BatchPayloadPromise;
  upsertReport: (args: {
    where: ReportWhereUniqueInput;
    create: ReportCreateInput;
    update: ReportUpdateInput;
  }) => ReportPromise;
  deleteReport: (where: ReportWhereUniqueInput) => ReportPromise;
  deleteManyReports: (where?: ReportWhereInput) => BatchPayloadPromise;
  createSemester: (data: SemesterCreateInput) => SemesterPromise;
  updateSemester: (args: {
    data: SemesterUpdateInput;
    where: SemesterWhereUniqueInput;
  }) => SemesterPromise;
  updateManySemesters: (args: {
    data: SemesterUpdateManyMutationInput;
    where?: SemesterWhereInput;
  }) => BatchPayloadPromise;
  upsertSemester: (args: {
    where: SemesterWhereUniqueInput;
    create: SemesterCreateInput;
    update: SemesterUpdateInput;
  }) => SemesterPromise;
  deleteSemester: (where: SemesterWhereUniqueInput) => SemesterPromise;
  deleteManySemesters: (where?: SemesterWhereInput) => BatchPayloadPromise;
  createStudent: (data: StudentCreateInput) => StudentPromise;
  updateStudent: (args: {
    data: StudentUpdateInput;
    where: StudentWhereUniqueInput;
  }) => StudentPromise;
  updateManyStudents: (args: {
    data: StudentUpdateManyMutationInput;
    where?: StudentWhereInput;
  }) => BatchPayloadPromise;
  upsertStudent: (args: {
    where: StudentWhereUniqueInput;
    create: StudentCreateInput;
    update: StudentUpdateInput;
  }) => StudentPromise;
  deleteStudent: (where: StudentWhereUniqueInput) => StudentPromise;
  deleteManyStudents: (where?: StudentWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createViewer: (data: ViewerCreateInput) => ViewerPromise;
  updateViewer: (args: {
    data: ViewerUpdateInput;
    where: ViewerWhereUniqueInput;
  }) => ViewerPromise;
  updateManyViewers: (args: {
    data: ViewerUpdateManyMutationInput;
    where?: ViewerWhereInput;
  }) => BatchPayloadPromise;
  upsertViewer: (args: {
    where: ViewerWhereUniqueInput;
    create: ViewerCreateInput;
    update: ViewerUpdateInput;
  }) => ViewerPromise;
  deleteViewer: (where: ViewerWhereUniqueInput) => ViewerPromise;
  deleteManyViewers: (where?: ViewerWhereInput) => BatchPayloadPromise;
  createWord: (data: WordCreateInput) => WordPromise;
  updateWord: (args: {
    data: WordUpdateInput;
    where: WordWhereUniqueInput;
  }) => WordPromise;
  updateManyWords: (args: {
    data: WordUpdateManyMutationInput;
    where?: WordWhereInput;
  }) => BatchPayloadPromise;
  upsertWord: (args: {
    where: WordWhereUniqueInput;
    create: WordCreateInput;
    update: WordUpdateInput;
  }) => WordPromise;
  deleteWord: (where: WordWhereUniqueInput) => WordPromise;
  deleteManyWords: (where?: WordWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attendance: (
    where?: AttendanceSubscriptionWhereInput
  ) => AttendanceSubscriptionPayloadSubscription;
  classSession: (
    where?: ClassSessionSubscriptionWhereInput
  ) => ClassSessionSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  lesson: (
    where?: LessonSubscriptionWhereInput
  ) => LessonSubscriptionPayloadSubscription;
  material: (
    where?: MaterialSubscriptionWhereInput
  ) => MaterialSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  point: (
    where?: PointSubscriptionWhereInput
  ) => PointSubscriptionPayloadSubscription;
  report: (
    where?: ReportSubscriptionWhereInput
  ) => ReportSubscriptionPayloadSubscription;
  semester: (
    where?: SemesterSubscriptionWhereInput
  ) => SemesterSubscriptionPayloadSubscription;
  student: (
    where?: StudentSubscriptionWhereInput
  ) => StudentSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  viewer: (
    where?: ViewerSubscriptionWhereInput
  ) => ViewerSubscriptionPayloadSubscription;
  word: (
    where?: WordSubscriptionWhereInput
  ) => WordSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Gender = "M" | "F";

export type AttendanceStatus =
  | "Absent"
  | "Present"
  | "Late"
  | "LeftEarly"
  | "LateLeftEarly";

export type Stage = "Inactive" | "Active" | "Started" | "Ended";

export type StudentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "chineseName_ASC"
  | "chineseName_DESC"
  | "englishName_ASC"
  | "englishName_DESC"
  | "pinyinName_ASC"
  | "pinyinName_DESC"
  | "birthdate_ASC"
  | "birthdate_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PointOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttendanceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "arrivedAt_ASC"
  | "arrivedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClassSessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startsAt_ASC"
  | "startsAt_DESC"
  | "startedAt_ASC"
  | "startedAt_DESC"
  | "endsAt_ASC"
  | "endsAt_DESC"
  | "endedAt_ASC"
  | "endedAt_DESC"
  | "stage_ASC"
  | "stage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type LessonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "homeworkEN_ASC"
  | "homeworkEN_DESC"
  | "homeworkZH_ASC"
  | "homeworkZH_DESC"
  | "summaryEN_ASC"
  | "summaryEN_DESC"
  | "summaryZH_ASC"
  | "summaryZH_DESC";

export type WordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "english_ASC"
  | "english_DESC"
  | "chinese_ASC"
  | "chinese_DESC"
  | "audio_ASC"
  | "audio_DESC";

export type MaterialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC"
  | "title_ASC"
  | "title_DESC"
  | "notes_ASC"
  | "notes_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "data_ASC"
  | "data_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "homeworkEN_ASC"
  | "homeworkEN_DESC"
  | "homeworkZH_ASC"
  | "homeworkZH_DESC"
  | "summaryEN_ASC"
  | "summaryEN_DESC"
  | "summaryZH_ASC"
  | "summaryZH_DESC"
  | "performance_ASC"
  | "performance_DESC"
  | "published_ASC"
  | "published_DESC";

export type SemesterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role = "Admin";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "role_ASC"
  | "role_DESC";

export type ViewerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AttendanceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface StudentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  chineseName?: Maybe<String>;
  chineseName_not?: Maybe<String>;
  chineseName_in?: Maybe<String[] | String>;
  chineseName_not_in?: Maybe<String[] | String>;
  chineseName_lt?: Maybe<String>;
  chineseName_lte?: Maybe<String>;
  chineseName_gt?: Maybe<String>;
  chineseName_gte?: Maybe<String>;
  chineseName_contains?: Maybe<String>;
  chineseName_not_contains?: Maybe<String>;
  chineseName_starts_with?: Maybe<String>;
  chineseName_not_starts_with?: Maybe<String>;
  chineseName_ends_with?: Maybe<String>;
  chineseName_not_ends_with?: Maybe<String>;
  englishName?: Maybe<String>;
  englishName_not?: Maybe<String>;
  englishName_in?: Maybe<String[] | String>;
  englishName_not_in?: Maybe<String[] | String>;
  englishName_lt?: Maybe<String>;
  englishName_lte?: Maybe<String>;
  englishName_gt?: Maybe<String>;
  englishName_gte?: Maybe<String>;
  englishName_contains?: Maybe<String>;
  englishName_not_contains?: Maybe<String>;
  englishName_starts_with?: Maybe<String>;
  englishName_not_starts_with?: Maybe<String>;
  englishName_ends_with?: Maybe<String>;
  englishName_not_ends_with?: Maybe<String>;
  pinyinName?: Maybe<String>;
  pinyinName_not?: Maybe<String>;
  pinyinName_in?: Maybe<String[] | String>;
  pinyinName_not_in?: Maybe<String[] | String>;
  pinyinName_lt?: Maybe<String>;
  pinyinName_lte?: Maybe<String>;
  pinyinName_gt?: Maybe<String>;
  pinyinName_gte?: Maybe<String>;
  pinyinName_contains?: Maybe<String>;
  pinyinName_not_contains?: Maybe<String>;
  pinyinName_starts_with?: Maybe<String>;
  pinyinName_not_starts_with?: Maybe<String>;
  pinyinName_ends_with?: Maybe<String>;
  pinyinName_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  groups_every?: Maybe<GroupWhereInput>;
  groups_some?: Maybe<GroupWhereInput>;
  groups_none?: Maybe<GroupWhereInput>;
  points_every?: Maybe<PointWhereInput>;
  points_some?: Maybe<PointWhereInput>;
  points_none?: Maybe<PointWhereInput>;
  attendances_every?: Maybe<AttendanceWhereInput>;
  attendances_some?: Maybe<AttendanceWhereInput>;
  attendances_none?: Maybe<AttendanceWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  OR?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  NOT?: Maybe<StudentWhereInput[] | StudentWhereInput>;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  students_every?: Maybe<StudentWhereInput>;
  students_some?: Maybe<StudentWhereInput>;
  students_none?: Maybe<StudentWhereInput>;
  classSessions_every?: Maybe<ClassSessionWhereInput>;
  classSessions_some?: Maybe<ClassSessionWhereInput>;
  classSessions_none?: Maybe<ClassSessionWhereInput>;
  semester?: Maybe<SemesterWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface ClassSessionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startsAt?: Maybe<DateTimeInput>;
  startsAt_not?: Maybe<DateTimeInput>;
  startsAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startsAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startsAt_lt?: Maybe<DateTimeInput>;
  startsAt_lte?: Maybe<DateTimeInput>;
  startsAt_gt?: Maybe<DateTimeInput>;
  startsAt_gte?: Maybe<DateTimeInput>;
  startedAt?: Maybe<DateTimeInput>;
  startedAt_not?: Maybe<DateTimeInput>;
  startedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startedAt_lt?: Maybe<DateTimeInput>;
  startedAt_lte?: Maybe<DateTimeInput>;
  startedAt_gt?: Maybe<DateTimeInput>;
  startedAt_gte?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endsAt_not?: Maybe<DateTimeInput>;
  endsAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endsAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endsAt_lt?: Maybe<DateTimeInput>;
  endsAt_lte?: Maybe<DateTimeInput>;
  endsAt_gt?: Maybe<DateTimeInput>;
  endsAt_gte?: Maybe<DateTimeInput>;
  endedAt?: Maybe<DateTimeInput>;
  endedAt_not?: Maybe<DateTimeInput>;
  endedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endedAt_lt?: Maybe<DateTimeInput>;
  endedAt_lte?: Maybe<DateTimeInput>;
  endedAt_gt?: Maybe<DateTimeInput>;
  endedAt_gte?: Maybe<DateTimeInput>;
  group?: Maybe<GroupWhereInput>;
  points_every?: Maybe<PointWhereInput>;
  points_some?: Maybe<PointWhereInput>;
  points_none?: Maybe<PointWhereInput>;
  attendances_every?: Maybe<AttendanceWhereInput>;
  attendances_some?: Maybe<AttendanceWhereInput>;
  attendances_none?: Maybe<AttendanceWhereInput>;
  stage?: Maybe<Stage>;
  stage_not?: Maybe<Stage>;
  stage_in?: Maybe<Stage[] | Stage>;
  stage_not_in?: Maybe<Stage[] | Stage>;
  lesson?: Maybe<LessonWhereInput>;
  report?: Maybe<ReportWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClassSessionWhereInput[] | ClassSessionWhereInput>;
  OR?: Maybe<ClassSessionWhereInput[] | ClassSessionWhereInput>;
  NOT?: Maybe<ClassSessionWhereInput[] | ClassSessionWhereInput>;
}

export interface PointWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  value_not?: Maybe<Int>;
  value_in?: Maybe<Int[] | Int>;
  value_not_in?: Maybe<Int[] | Int>;
  value_lt?: Maybe<Int>;
  value_lte?: Maybe<Int>;
  value_gt?: Maybe<Int>;
  value_gte?: Maybe<Int>;
  student?: Maybe<StudentWhereInput>;
  classSession?: Maybe<ClassSessionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PointWhereInput[] | PointWhereInput>;
  OR?: Maybe<PointWhereInput[] | PointWhereInput>;
  NOT?: Maybe<PointWhereInput[] | PointWhereInput>;
}

export interface AttendanceWhereInput {
  classSession?: Maybe<ClassSessionWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  student?: Maybe<StudentWhereInput>;
  status?: Maybe<AttendanceStatus>;
  status_not?: Maybe<AttendanceStatus>;
  status_in?: Maybe<AttendanceStatus[] | AttendanceStatus>;
  status_not_in?: Maybe<AttendanceStatus[] | AttendanceStatus>;
  arrivedAt?: Maybe<DateTimeInput>;
  arrivedAt_not?: Maybe<DateTimeInput>;
  arrivedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  arrivedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  arrivedAt_lt?: Maybe<DateTimeInput>;
  arrivedAt_lte?: Maybe<DateTimeInput>;
  arrivedAt_gt?: Maybe<DateTimeInput>;
  arrivedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AttendanceWhereInput[] | AttendanceWhereInput>;
  OR?: Maybe<AttendanceWhereInput[] | AttendanceWhereInput>;
  NOT?: Maybe<AttendanceWhereInput[] | AttendanceWhereInput>;
}

export interface LessonWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  words_every?: Maybe<WordWhereInput>;
  words_some?: Maybe<WordWhereInput>;
  words_none?: Maybe<WordWhereInput>;
  homeworkEN?: Maybe<String>;
  homeworkEN_not?: Maybe<String>;
  homeworkEN_in?: Maybe<String[] | String>;
  homeworkEN_not_in?: Maybe<String[] | String>;
  homeworkEN_lt?: Maybe<String>;
  homeworkEN_lte?: Maybe<String>;
  homeworkEN_gt?: Maybe<String>;
  homeworkEN_gte?: Maybe<String>;
  homeworkEN_contains?: Maybe<String>;
  homeworkEN_not_contains?: Maybe<String>;
  homeworkEN_starts_with?: Maybe<String>;
  homeworkEN_not_starts_with?: Maybe<String>;
  homeworkEN_ends_with?: Maybe<String>;
  homeworkEN_not_ends_with?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  homeworkZH_not?: Maybe<String>;
  homeworkZH_in?: Maybe<String[] | String>;
  homeworkZH_not_in?: Maybe<String[] | String>;
  homeworkZH_lt?: Maybe<String>;
  homeworkZH_lte?: Maybe<String>;
  homeworkZH_gt?: Maybe<String>;
  homeworkZH_gte?: Maybe<String>;
  homeworkZH_contains?: Maybe<String>;
  homeworkZH_not_contains?: Maybe<String>;
  homeworkZH_starts_with?: Maybe<String>;
  homeworkZH_not_starts_with?: Maybe<String>;
  homeworkZH_ends_with?: Maybe<String>;
  homeworkZH_not_ends_with?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryEN_not?: Maybe<String>;
  summaryEN_in?: Maybe<String[] | String>;
  summaryEN_not_in?: Maybe<String[] | String>;
  summaryEN_lt?: Maybe<String>;
  summaryEN_lte?: Maybe<String>;
  summaryEN_gt?: Maybe<String>;
  summaryEN_gte?: Maybe<String>;
  summaryEN_contains?: Maybe<String>;
  summaryEN_not_contains?: Maybe<String>;
  summaryEN_starts_with?: Maybe<String>;
  summaryEN_not_starts_with?: Maybe<String>;
  summaryEN_ends_with?: Maybe<String>;
  summaryEN_not_ends_with?: Maybe<String>;
  summaryZH?: Maybe<String>;
  summaryZH_not?: Maybe<String>;
  summaryZH_in?: Maybe<String[] | String>;
  summaryZH_not_in?: Maybe<String[] | String>;
  summaryZH_lt?: Maybe<String>;
  summaryZH_lte?: Maybe<String>;
  summaryZH_gt?: Maybe<String>;
  summaryZH_gte?: Maybe<String>;
  summaryZH_contains?: Maybe<String>;
  summaryZH_not_contains?: Maybe<String>;
  summaryZH_starts_with?: Maybe<String>;
  summaryZH_not_starts_with?: Maybe<String>;
  summaryZH_ends_with?: Maybe<String>;
  summaryZH_not_ends_with?: Maybe<String>;
  materials_every?: Maybe<MaterialWhereInput>;
  materials_some?: Maybe<MaterialWhereInput>;
  materials_none?: Maybe<MaterialWhereInput>;
  AND?: Maybe<LessonWhereInput[] | LessonWhereInput>;
  OR?: Maybe<LessonWhereInput[] | LessonWhereInput>;
  NOT?: Maybe<LessonWhereInput[] | LessonWhereInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lessons_every?: Maybe<LessonWhereInput>;
  lessons_some?: Maybe<LessonWhereInput>;
  lessons_none?: Maybe<LessonWhereInput>;
  words_every?: Maybe<WordWhereInput>;
  words_some?: Maybe<WordWhereInput>;
  words_none?: Maybe<WordWhereInput>;
  materials_every?: Maybe<MaterialWhereInput>;
  materials_some?: Maybe<MaterialWhereInput>;
  materials_none?: Maybe<MaterialWhereInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface WordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  english?: Maybe<String>;
  english_not?: Maybe<String>;
  english_in?: Maybe<String[] | String>;
  english_not_in?: Maybe<String[] | String>;
  english_lt?: Maybe<String>;
  english_lte?: Maybe<String>;
  english_gt?: Maybe<String>;
  english_gte?: Maybe<String>;
  english_contains?: Maybe<String>;
  english_not_contains?: Maybe<String>;
  english_starts_with?: Maybe<String>;
  english_not_starts_with?: Maybe<String>;
  english_ends_with?: Maybe<String>;
  english_not_ends_with?: Maybe<String>;
  chinese?: Maybe<String>;
  chinese_not?: Maybe<String>;
  chinese_in?: Maybe<String[] | String>;
  chinese_not_in?: Maybe<String[] | String>;
  chinese_lt?: Maybe<String>;
  chinese_lte?: Maybe<String>;
  chinese_gt?: Maybe<String>;
  chinese_gte?: Maybe<String>;
  chinese_contains?: Maybe<String>;
  chinese_not_contains?: Maybe<String>;
  chinese_starts_with?: Maybe<String>;
  chinese_not_starts_with?: Maybe<String>;
  chinese_ends_with?: Maybe<String>;
  chinese_not_ends_with?: Maybe<String>;
  audio?: Maybe<String>;
  audio_not?: Maybe<String>;
  audio_in?: Maybe<String[] | String>;
  audio_not_in?: Maybe<String[] | String>;
  audio_lt?: Maybe<String>;
  audio_lte?: Maybe<String>;
  audio_gt?: Maybe<String>;
  audio_gte?: Maybe<String>;
  audio_contains?: Maybe<String>;
  audio_not_contains?: Maybe<String>;
  audio_starts_with?: Maybe<String>;
  audio_not_starts_with?: Maybe<String>;
  audio_ends_with?: Maybe<String>;
  audio_not_ends_with?: Maybe<String>;
  lessons_every?: Maybe<LessonWhereInput>;
  lessons_some?: Maybe<LessonWhereInput>;
  lessons_none?: Maybe<LessonWhereInput>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  AND?: Maybe<WordWhereInput[] | WordWhereInput>;
  OR?: Maybe<WordWhereInput[] | WordWhereInput>;
  NOT?: Maybe<WordWhereInput[] | WordWhereInput>;
}

export interface MaterialWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  AND?: Maybe<MaterialWhereInput[] | MaterialWhereInput>;
  OR?: Maybe<MaterialWhereInput[] | MaterialWhereInput>;
  NOT?: Maybe<MaterialWhereInput[] | MaterialWhereInput>;
}

export interface ReportWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  homeworkEN?: Maybe<String>;
  homeworkEN_not?: Maybe<String>;
  homeworkEN_in?: Maybe<String[] | String>;
  homeworkEN_not_in?: Maybe<String[] | String>;
  homeworkEN_lt?: Maybe<String>;
  homeworkEN_lte?: Maybe<String>;
  homeworkEN_gt?: Maybe<String>;
  homeworkEN_gte?: Maybe<String>;
  homeworkEN_contains?: Maybe<String>;
  homeworkEN_not_contains?: Maybe<String>;
  homeworkEN_starts_with?: Maybe<String>;
  homeworkEN_not_starts_with?: Maybe<String>;
  homeworkEN_ends_with?: Maybe<String>;
  homeworkEN_not_ends_with?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  homeworkZH_not?: Maybe<String>;
  homeworkZH_in?: Maybe<String[] | String>;
  homeworkZH_not_in?: Maybe<String[] | String>;
  homeworkZH_lt?: Maybe<String>;
  homeworkZH_lte?: Maybe<String>;
  homeworkZH_gt?: Maybe<String>;
  homeworkZH_gte?: Maybe<String>;
  homeworkZH_contains?: Maybe<String>;
  homeworkZH_not_contains?: Maybe<String>;
  homeworkZH_starts_with?: Maybe<String>;
  homeworkZH_not_starts_with?: Maybe<String>;
  homeworkZH_ends_with?: Maybe<String>;
  homeworkZH_not_ends_with?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryEN_not?: Maybe<String>;
  summaryEN_in?: Maybe<String[] | String>;
  summaryEN_not_in?: Maybe<String[] | String>;
  summaryEN_lt?: Maybe<String>;
  summaryEN_lte?: Maybe<String>;
  summaryEN_gt?: Maybe<String>;
  summaryEN_gte?: Maybe<String>;
  summaryEN_contains?: Maybe<String>;
  summaryEN_not_contains?: Maybe<String>;
  summaryEN_starts_with?: Maybe<String>;
  summaryEN_not_starts_with?: Maybe<String>;
  summaryEN_ends_with?: Maybe<String>;
  summaryEN_not_ends_with?: Maybe<String>;
  summaryZH?: Maybe<String>;
  summaryZH_not?: Maybe<String>;
  summaryZH_in?: Maybe<String[] | String>;
  summaryZH_not_in?: Maybe<String[] | String>;
  summaryZH_lt?: Maybe<String>;
  summaryZH_lte?: Maybe<String>;
  summaryZH_gt?: Maybe<String>;
  summaryZH_gte?: Maybe<String>;
  summaryZH_contains?: Maybe<String>;
  summaryZH_not_contains?: Maybe<String>;
  summaryZH_starts_with?: Maybe<String>;
  summaryZH_not_starts_with?: Maybe<String>;
  summaryZH_ends_with?: Maybe<String>;
  summaryZH_not_ends_with?: Maybe<String>;
  performance?: Maybe<String>;
  performance_not?: Maybe<String>;
  performance_in?: Maybe<String[] | String>;
  performance_not_in?: Maybe<String[] | String>;
  performance_lt?: Maybe<String>;
  performance_lte?: Maybe<String>;
  performance_gt?: Maybe<String>;
  performance_gte?: Maybe<String>;
  performance_contains?: Maybe<String>;
  performance_not_contains?: Maybe<String>;
  performance_starts_with?: Maybe<String>;
  performance_not_starts_with?: Maybe<String>;
  performance_ends_with?: Maybe<String>;
  performance_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  materials_every?: Maybe<MaterialWhereInput>;
  materials_some?: Maybe<MaterialWhereInput>;
  materials_none?: Maybe<MaterialWhereInput>;
  words_every?: Maybe<WordWhereInput>;
  words_some?: Maybe<WordWhereInput>;
  words_none?: Maybe<WordWhereInput>;
  AND?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  OR?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  NOT?: Maybe<ReportWhereInput[] | ReportWhereInput>;
}

export interface SemesterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  groups_every?: Maybe<GroupWhereInput>;
  groups_some?: Maybe<GroupWhereInput>;
  groups_none?: Maybe<GroupWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SemesterWhereInput[] | SemesterWhereInput>;
  OR?: Maybe<SemesterWhereInput[] | SemesterWhereInput>;
  NOT?: Maybe<SemesterWhereInput[] | SemesterWhereInput>;
}

export type ClassSessionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LessonWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MaterialWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export type PointWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ReportWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SemesterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type StudentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type ViewerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ViewerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ViewerWhereInput[] | ViewerWhereInput>;
  OR?: Maybe<ViewerWhereInput[] | ViewerWhereInput>;
  NOT?: Maybe<ViewerWhereInput[] | ViewerWhereInput>;
}

export type WordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AttendanceCreateInput {
  classSession: ClassSessionCreateOneWithoutAttendancesInput;
  id?: Maybe<ID_Input>;
  student: StudentCreateOneWithoutAttendancesInput;
  status: AttendanceStatus;
  arrivedAt?: Maybe<DateTimeInput>;
}

export interface ClassSessionCreateOneWithoutAttendancesInput {
  create?: Maybe<ClassSessionCreateWithoutAttendancesInput>;
  connect?: Maybe<ClassSessionWhereUniqueInput>;
}

export interface ClassSessionCreateWithoutAttendancesInput {
  id?: Maybe<ID_Input>;
  startsAt: DateTimeInput;
  startedAt?: Maybe<DateTimeInput>;
  endsAt: DateTimeInput;
  endedAt?: Maybe<DateTimeInput>;
  group: GroupCreateOneWithoutClassSessionsInput;
  points?: Maybe<PointCreateManyWithoutClassSessionInput>;
  stage?: Maybe<Stage>;
  lesson?: Maybe<LessonCreateOneInput>;
  report?: Maybe<ReportCreateOneInput>;
}

export interface GroupCreateOneWithoutClassSessionsInput {
  create?: Maybe<GroupCreateWithoutClassSessionsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutClassSessionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  students?: Maybe<StudentCreateManyWithoutGroupsInput>;
  semester: SemesterCreateOneWithoutGroupsInput;
}

export interface StudentCreateManyWithoutGroupsInput {
  create?: Maybe<
    StudentCreateWithoutGroupsInput[] | StudentCreateWithoutGroupsInput
  >;
  connect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
}

export interface StudentCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  points?: Maybe<PointCreateManyWithoutStudentInput>;
  attendances?: Maybe<AttendanceCreateManyWithoutStudentInput>;
}

export interface PointCreateManyWithoutStudentInput {
  create?: Maybe<
    PointCreateWithoutStudentInput[] | PointCreateWithoutStudentInput
  >;
  connect?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
}

export interface PointCreateWithoutStudentInput {
  id?: Maybe<ID_Input>;
  value: Int;
  classSession: ClassSessionCreateOneWithoutPointsInput;
}

export interface ClassSessionCreateOneWithoutPointsInput {
  create?: Maybe<ClassSessionCreateWithoutPointsInput>;
  connect?: Maybe<ClassSessionWhereUniqueInput>;
}

export interface ClassSessionCreateWithoutPointsInput {
  id?: Maybe<ID_Input>;
  startsAt: DateTimeInput;
  startedAt?: Maybe<DateTimeInput>;
  endsAt: DateTimeInput;
  endedAt?: Maybe<DateTimeInput>;
  group: GroupCreateOneWithoutClassSessionsInput;
  attendances?: Maybe<AttendanceCreateManyWithoutClassSessionInput>;
  stage?: Maybe<Stage>;
  lesson?: Maybe<LessonCreateOneInput>;
  report?: Maybe<ReportCreateOneInput>;
}

export interface AttendanceCreateManyWithoutClassSessionInput {
  create?: Maybe<
    | AttendanceCreateWithoutClassSessionInput[]
    | AttendanceCreateWithoutClassSessionInput
  >;
  connect?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
}

export interface AttendanceCreateWithoutClassSessionInput {
  id?: Maybe<ID_Input>;
  student: StudentCreateOneWithoutAttendancesInput;
  status: AttendanceStatus;
  arrivedAt?: Maybe<DateTimeInput>;
}

export interface StudentCreateOneWithoutAttendancesInput {
  create?: Maybe<StudentCreateWithoutAttendancesInput>;
  connect?: Maybe<StudentWhereUniqueInput>;
}

export interface StudentCreateWithoutAttendancesInput {
  id?: Maybe<ID_Input>;
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  groups?: Maybe<GroupCreateManyWithoutStudentsInput>;
  points?: Maybe<PointCreateManyWithoutStudentInput>;
}

export interface GroupCreateManyWithoutStudentsInput {
  create?: Maybe<
    GroupCreateWithoutStudentsInput[] | GroupCreateWithoutStudentsInput
  >;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutStudentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  classSessions?: Maybe<ClassSessionCreateManyWithoutGroupInput>;
  semester: SemesterCreateOneWithoutGroupsInput;
}

export interface ClassSessionCreateManyWithoutGroupInput {
  create?: Maybe<
    ClassSessionCreateWithoutGroupInput[] | ClassSessionCreateWithoutGroupInput
  >;
  connect?: Maybe<
    ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput
  >;
}

export interface ClassSessionCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  startsAt: DateTimeInput;
  startedAt?: Maybe<DateTimeInput>;
  endsAt: DateTimeInput;
  endedAt?: Maybe<DateTimeInput>;
  points?: Maybe<PointCreateManyWithoutClassSessionInput>;
  attendances?: Maybe<AttendanceCreateManyWithoutClassSessionInput>;
  stage?: Maybe<Stage>;
  lesson?: Maybe<LessonCreateOneInput>;
  report?: Maybe<ReportCreateOneInput>;
}

export interface PointCreateManyWithoutClassSessionInput {
  create?: Maybe<
    PointCreateWithoutClassSessionInput[] | PointCreateWithoutClassSessionInput
  >;
  connect?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
}

export interface PointCreateWithoutClassSessionInput {
  id?: Maybe<ID_Input>;
  value: Int;
  student: StudentCreateOneWithoutPointsInput;
}

export interface StudentCreateOneWithoutPointsInput {
  create?: Maybe<StudentCreateWithoutPointsInput>;
  connect?: Maybe<StudentWhereUniqueInput>;
}

export interface StudentCreateWithoutPointsInput {
  id?: Maybe<ID_Input>;
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  groups?: Maybe<GroupCreateManyWithoutStudentsInput>;
  attendances?: Maybe<AttendanceCreateManyWithoutStudentInput>;
}

export interface AttendanceCreateManyWithoutStudentInput {
  create?: Maybe<
    AttendanceCreateWithoutStudentInput[] | AttendanceCreateWithoutStudentInput
  >;
  connect?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
}

export interface AttendanceCreateWithoutStudentInput {
  classSession: ClassSessionCreateOneWithoutAttendancesInput;
  id?: Maybe<ID_Input>;
  status: AttendanceStatus;
  arrivedAt?: Maybe<DateTimeInput>;
}

export interface LessonCreateOneInput {
  create?: Maybe<LessonCreateInput>;
  connect?: Maybe<LessonWhereUniqueInput>;
}

export interface LessonCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  tags?: Maybe<TagCreateManyWithoutLessonsInput>;
  words?: Maybe<WordCreateManyWithoutLessonsInput>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  materials?: Maybe<MaterialCreateManyInput>;
}

export interface TagCreateManyWithoutLessonsInput {
  create?: Maybe<TagCreateWithoutLessonsInput[] | TagCreateWithoutLessonsInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateWithoutLessonsInput {
  id?: Maybe<ID_Input>;
  name: String;
  words?: Maybe<WordCreateManyWithoutTagsInput>;
  materials?: Maybe<MaterialCreateManyWithoutTagsInput>;
}

export interface WordCreateManyWithoutTagsInput {
  create?: Maybe<WordCreateWithoutTagsInput[] | WordCreateWithoutTagsInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
}

export interface WordCreateWithoutTagsInput {
  id?: Maybe<ID_Input>;
  english: String;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
  lessons?: Maybe<LessonCreateManyWithoutWordsInput>;
}

export interface LessonCreateManyWithoutWordsInput {
  create?: Maybe<
    LessonCreateWithoutWordsInput[] | LessonCreateWithoutWordsInput
  >;
  connect?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
}

export interface LessonCreateWithoutWordsInput {
  id?: Maybe<ID_Input>;
  name: String;
  tags?: Maybe<TagCreateManyWithoutLessonsInput>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  materials?: Maybe<MaterialCreateManyInput>;
}

export interface MaterialCreateManyInput {
  create?: Maybe<MaterialCreateInput[] | MaterialCreateInput>;
  connect?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
}

export interface MaterialCreateInput {
  id?: Maybe<ID_Input>;
  tags?: Maybe<TagCreateManyWithoutMaterialsInput>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  title?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface TagCreateManyWithoutMaterialsInput {
  create?: Maybe<
    TagCreateWithoutMaterialsInput[] | TagCreateWithoutMaterialsInput
  >;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateWithoutMaterialsInput {
  id?: Maybe<ID_Input>;
  name: String;
  lessons?: Maybe<LessonCreateManyWithoutTagsInput>;
  words?: Maybe<WordCreateManyWithoutTagsInput>;
}

export interface LessonCreateManyWithoutTagsInput {
  create?: Maybe<LessonCreateWithoutTagsInput[] | LessonCreateWithoutTagsInput>;
  connect?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
}

export interface LessonCreateWithoutTagsInput {
  id?: Maybe<ID_Input>;
  name: String;
  words?: Maybe<WordCreateManyWithoutLessonsInput>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  materials?: Maybe<MaterialCreateManyInput>;
}

export interface WordCreateManyWithoutLessonsInput {
  create?: Maybe<
    WordCreateWithoutLessonsInput[] | WordCreateWithoutLessonsInput
  >;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
}

export interface WordCreateWithoutLessonsInput {
  id?: Maybe<ID_Input>;
  english: String;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
  tags?: Maybe<TagCreateManyWithoutWordsInput>;
}

export interface TagCreateManyWithoutWordsInput {
  create?: Maybe<TagCreateWithoutWordsInput[] | TagCreateWithoutWordsInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateWithoutWordsInput {
  id?: Maybe<ID_Input>;
  name: String;
  lessons?: Maybe<LessonCreateManyWithoutTagsInput>;
  materials?: Maybe<MaterialCreateManyWithoutTagsInput>;
}

export interface MaterialCreateManyWithoutTagsInput {
  create?: Maybe<
    MaterialCreateWithoutTagsInput[] | MaterialCreateWithoutTagsInput
  >;
  connect?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
}

export interface MaterialCreateWithoutTagsInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  title?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface ReportCreateOneInput {
  create?: Maybe<ReportCreateInput>;
  connect?: Maybe<ReportWhereUniqueInput>;
}

export interface ReportCreateInput {
  id?: Maybe<ID_Input>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  performance?: Maybe<String>;
  published?: Maybe<Boolean>;
  materials?: Maybe<MaterialCreateManyInput>;
  words?: Maybe<WordCreateManyInput>;
}

export interface WordCreateManyInput {
  create?: Maybe<WordCreateInput[] | WordCreateInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
}

export interface WordCreateInput {
  id?: Maybe<ID_Input>;
  english: String;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
  lessons?: Maybe<LessonCreateManyWithoutWordsInput>;
  tags?: Maybe<TagCreateManyWithoutWordsInput>;
}

export interface SemesterCreateOneWithoutGroupsInput {
  create?: Maybe<SemesterCreateWithoutGroupsInput>;
  connect?: Maybe<SemesterWhereUniqueInput>;
}

export interface SemesterCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  name: String;
}

export interface AttendanceUpdateInput {
  classSession?: Maybe<ClassSessionUpdateOneRequiredWithoutAttendancesInput>;
  student?: Maybe<StudentUpdateOneRequiredWithoutAttendancesInput>;
  status?: Maybe<AttendanceStatus>;
  arrivedAt?: Maybe<DateTimeInput>;
}

export interface ClassSessionUpdateOneRequiredWithoutAttendancesInput {
  create?: Maybe<ClassSessionCreateWithoutAttendancesInput>;
  update?: Maybe<ClassSessionUpdateWithoutAttendancesDataInput>;
  upsert?: Maybe<ClassSessionUpsertWithoutAttendancesInput>;
  connect?: Maybe<ClassSessionWhereUniqueInput>;
}

export interface ClassSessionUpdateWithoutAttendancesDataInput {
  startsAt?: Maybe<DateTimeInput>;
  startedAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endedAt?: Maybe<DateTimeInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutClassSessionsInput>;
  points?: Maybe<PointUpdateManyWithoutClassSessionInput>;
  stage?: Maybe<Stage>;
  lesson?: Maybe<LessonUpdateOneInput>;
  report?: Maybe<ReportUpdateOneInput>;
}

export interface GroupUpdateOneRequiredWithoutClassSessionsInput {
  create?: Maybe<GroupCreateWithoutClassSessionsInput>;
  update?: Maybe<GroupUpdateWithoutClassSessionsDataInput>;
  upsert?: Maybe<GroupUpsertWithoutClassSessionsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutClassSessionsDataInput {
  name?: Maybe<String>;
  students?: Maybe<StudentUpdateManyWithoutGroupsInput>;
  semester?: Maybe<SemesterUpdateOneRequiredWithoutGroupsInput>;
}

export interface StudentUpdateManyWithoutGroupsInput {
  create?: Maybe<
    StudentCreateWithoutGroupsInput[] | StudentCreateWithoutGroupsInput
  >;
  delete?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  connect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  set?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  disconnect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  update?: Maybe<
    | StudentUpdateWithWhereUniqueWithoutGroupsInput[]
    | StudentUpdateWithWhereUniqueWithoutGroupsInput
  >;
  upsert?: Maybe<
    | StudentUpsertWithWhereUniqueWithoutGroupsInput[]
    | StudentUpsertWithWhereUniqueWithoutGroupsInput
  >;
  deleteMany?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  updateMany?: Maybe<
    | StudentUpdateManyWithWhereNestedInput[]
    | StudentUpdateManyWithWhereNestedInput
  >;
}

export interface StudentUpdateWithWhereUniqueWithoutGroupsInput {
  where: StudentWhereUniqueInput;
  data: StudentUpdateWithoutGroupsDataInput;
}

export interface StudentUpdateWithoutGroupsDataInput {
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  points?: Maybe<PointUpdateManyWithoutStudentInput>;
  attendances?: Maybe<AttendanceUpdateManyWithoutStudentInput>;
}

export interface PointUpdateManyWithoutStudentInput {
  create?: Maybe<
    PointCreateWithoutStudentInput[] | PointCreateWithoutStudentInput
  >;
  delete?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
  connect?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
  set?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
  disconnect?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
  update?: Maybe<
    | PointUpdateWithWhereUniqueWithoutStudentInput[]
    | PointUpdateWithWhereUniqueWithoutStudentInput
  >;
  upsert?: Maybe<
    | PointUpsertWithWhereUniqueWithoutStudentInput[]
    | PointUpsertWithWhereUniqueWithoutStudentInput
  >;
  deleteMany?: Maybe<PointScalarWhereInput[] | PointScalarWhereInput>;
  updateMany?: Maybe<
    PointUpdateManyWithWhereNestedInput[] | PointUpdateManyWithWhereNestedInput
  >;
}

export interface PointUpdateWithWhereUniqueWithoutStudentInput {
  where: PointWhereUniqueInput;
  data: PointUpdateWithoutStudentDataInput;
}

export interface PointUpdateWithoutStudentDataInput {
  value?: Maybe<Int>;
  classSession?: Maybe<ClassSessionUpdateOneRequiredWithoutPointsInput>;
}

export interface ClassSessionUpdateOneRequiredWithoutPointsInput {
  create?: Maybe<ClassSessionCreateWithoutPointsInput>;
  update?: Maybe<ClassSessionUpdateWithoutPointsDataInput>;
  upsert?: Maybe<ClassSessionUpsertWithoutPointsInput>;
  connect?: Maybe<ClassSessionWhereUniqueInput>;
}

export interface ClassSessionUpdateWithoutPointsDataInput {
  startsAt?: Maybe<DateTimeInput>;
  startedAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endedAt?: Maybe<DateTimeInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutClassSessionsInput>;
  attendances?: Maybe<AttendanceUpdateManyWithoutClassSessionInput>;
  stage?: Maybe<Stage>;
  lesson?: Maybe<LessonUpdateOneInput>;
  report?: Maybe<ReportUpdateOneInput>;
}

export interface AttendanceUpdateManyWithoutClassSessionInput {
  create?: Maybe<
    | AttendanceCreateWithoutClassSessionInput[]
    | AttendanceCreateWithoutClassSessionInput
  >;
  delete?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
  connect?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
  set?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
  disconnect?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
  update?: Maybe<
    | AttendanceUpdateWithWhereUniqueWithoutClassSessionInput[]
    | AttendanceUpdateWithWhereUniqueWithoutClassSessionInput
  >;
  upsert?: Maybe<
    | AttendanceUpsertWithWhereUniqueWithoutClassSessionInput[]
    | AttendanceUpsertWithWhereUniqueWithoutClassSessionInput
  >;
  deleteMany?: Maybe<AttendanceScalarWhereInput[] | AttendanceScalarWhereInput>;
  updateMany?: Maybe<
    | AttendanceUpdateManyWithWhereNestedInput[]
    | AttendanceUpdateManyWithWhereNestedInput
  >;
}

export interface AttendanceUpdateWithWhereUniqueWithoutClassSessionInput {
  where: AttendanceWhereUniqueInput;
  data: AttendanceUpdateWithoutClassSessionDataInput;
}

export interface AttendanceUpdateWithoutClassSessionDataInput {
  student?: Maybe<StudentUpdateOneRequiredWithoutAttendancesInput>;
  status?: Maybe<AttendanceStatus>;
  arrivedAt?: Maybe<DateTimeInput>;
}

export interface StudentUpdateOneRequiredWithoutAttendancesInput {
  create?: Maybe<StudentCreateWithoutAttendancesInput>;
  update?: Maybe<StudentUpdateWithoutAttendancesDataInput>;
  upsert?: Maybe<StudentUpsertWithoutAttendancesInput>;
  connect?: Maybe<StudentWhereUniqueInput>;
}

export interface StudentUpdateWithoutAttendancesDataInput {
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  groups?: Maybe<GroupUpdateManyWithoutStudentsInput>;
  points?: Maybe<PointUpdateManyWithoutStudentInput>;
}

export interface GroupUpdateManyWithoutStudentsInput {
  create?: Maybe<
    GroupCreateWithoutStudentsInput[] | GroupCreateWithoutStudentsInput
  >;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutStudentsInput[]
    | GroupUpdateWithWhereUniqueWithoutStudentsInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutStudentsInput[]
    | GroupUpsertWithWhereUniqueWithoutStudentsInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateWithWhereUniqueWithoutStudentsInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutStudentsDataInput;
}

export interface GroupUpdateWithoutStudentsDataInput {
  name?: Maybe<String>;
  classSessions?: Maybe<ClassSessionUpdateManyWithoutGroupInput>;
  semester?: Maybe<SemesterUpdateOneRequiredWithoutGroupsInput>;
}

export interface ClassSessionUpdateManyWithoutGroupInput {
  create?: Maybe<
    ClassSessionCreateWithoutGroupInput[] | ClassSessionCreateWithoutGroupInput
  >;
  delete?: Maybe<ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput>;
  connect?: Maybe<
    ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput
  >;
  set?: Maybe<ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput>;
  disconnect?: Maybe<
    ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput
  >;
  update?: Maybe<
    | ClassSessionUpdateWithWhereUniqueWithoutGroupInput[]
    | ClassSessionUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | ClassSessionUpsertWithWhereUniqueWithoutGroupInput[]
    | ClassSessionUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<
    ClassSessionScalarWhereInput[] | ClassSessionScalarWhereInput
  >;
  updateMany?: Maybe<
    | ClassSessionUpdateManyWithWhereNestedInput[]
    | ClassSessionUpdateManyWithWhereNestedInput
  >;
}

export interface ClassSessionUpdateWithWhereUniqueWithoutGroupInput {
  where: ClassSessionWhereUniqueInput;
  data: ClassSessionUpdateWithoutGroupDataInput;
}

export interface ClassSessionUpdateWithoutGroupDataInput {
  startsAt?: Maybe<DateTimeInput>;
  startedAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endedAt?: Maybe<DateTimeInput>;
  points?: Maybe<PointUpdateManyWithoutClassSessionInput>;
  attendances?: Maybe<AttendanceUpdateManyWithoutClassSessionInput>;
  stage?: Maybe<Stage>;
  lesson?: Maybe<LessonUpdateOneInput>;
  report?: Maybe<ReportUpdateOneInput>;
}

export interface PointUpdateManyWithoutClassSessionInput {
  create?: Maybe<
    PointCreateWithoutClassSessionInput[] | PointCreateWithoutClassSessionInput
  >;
  delete?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
  connect?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
  set?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
  disconnect?: Maybe<PointWhereUniqueInput[] | PointWhereUniqueInput>;
  update?: Maybe<
    | PointUpdateWithWhereUniqueWithoutClassSessionInput[]
    | PointUpdateWithWhereUniqueWithoutClassSessionInput
  >;
  upsert?: Maybe<
    | PointUpsertWithWhereUniqueWithoutClassSessionInput[]
    | PointUpsertWithWhereUniqueWithoutClassSessionInput
  >;
  deleteMany?: Maybe<PointScalarWhereInput[] | PointScalarWhereInput>;
  updateMany?: Maybe<
    PointUpdateManyWithWhereNestedInput[] | PointUpdateManyWithWhereNestedInput
  >;
}

export interface PointUpdateWithWhereUniqueWithoutClassSessionInput {
  where: PointWhereUniqueInput;
  data: PointUpdateWithoutClassSessionDataInput;
}

export interface PointUpdateWithoutClassSessionDataInput {
  value?: Maybe<Int>;
  student?: Maybe<StudentUpdateOneRequiredWithoutPointsInput>;
}

export interface StudentUpdateOneRequiredWithoutPointsInput {
  create?: Maybe<StudentCreateWithoutPointsInput>;
  update?: Maybe<StudentUpdateWithoutPointsDataInput>;
  upsert?: Maybe<StudentUpsertWithoutPointsInput>;
  connect?: Maybe<StudentWhereUniqueInput>;
}

export interface StudentUpdateWithoutPointsDataInput {
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  groups?: Maybe<GroupUpdateManyWithoutStudentsInput>;
  attendances?: Maybe<AttendanceUpdateManyWithoutStudentInput>;
}

export interface AttendanceUpdateManyWithoutStudentInput {
  create?: Maybe<
    AttendanceCreateWithoutStudentInput[] | AttendanceCreateWithoutStudentInput
  >;
  delete?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
  connect?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
  set?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
  disconnect?: Maybe<AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput>;
  update?: Maybe<
    | AttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    | AttendanceUpdateWithWhereUniqueWithoutStudentInput
  >;
  upsert?: Maybe<
    | AttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    | AttendanceUpsertWithWhereUniqueWithoutStudentInput
  >;
  deleteMany?: Maybe<AttendanceScalarWhereInput[] | AttendanceScalarWhereInput>;
  updateMany?: Maybe<
    | AttendanceUpdateManyWithWhereNestedInput[]
    | AttendanceUpdateManyWithWhereNestedInput
  >;
}

export interface AttendanceUpdateWithWhereUniqueWithoutStudentInput {
  where: AttendanceWhereUniqueInput;
  data: AttendanceUpdateWithoutStudentDataInput;
}

export interface AttendanceUpdateWithoutStudentDataInput {
  classSession?: Maybe<ClassSessionUpdateOneRequiredWithoutAttendancesInput>;
  status?: Maybe<AttendanceStatus>;
  arrivedAt?: Maybe<DateTimeInput>;
}

export interface AttendanceUpsertWithWhereUniqueWithoutStudentInput {
  where: AttendanceWhereUniqueInput;
  update: AttendanceUpdateWithoutStudentDataInput;
  create: AttendanceCreateWithoutStudentInput;
}

export interface AttendanceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<AttendanceStatus>;
  status_not?: Maybe<AttendanceStatus>;
  status_in?: Maybe<AttendanceStatus[] | AttendanceStatus>;
  status_not_in?: Maybe<AttendanceStatus[] | AttendanceStatus>;
  arrivedAt?: Maybe<DateTimeInput>;
  arrivedAt_not?: Maybe<DateTimeInput>;
  arrivedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  arrivedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  arrivedAt_lt?: Maybe<DateTimeInput>;
  arrivedAt_lte?: Maybe<DateTimeInput>;
  arrivedAt_gt?: Maybe<DateTimeInput>;
  arrivedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AttendanceScalarWhereInput[] | AttendanceScalarWhereInput>;
  OR?: Maybe<AttendanceScalarWhereInput[] | AttendanceScalarWhereInput>;
  NOT?: Maybe<AttendanceScalarWhereInput[] | AttendanceScalarWhereInput>;
}

export interface AttendanceUpdateManyWithWhereNestedInput {
  where: AttendanceScalarWhereInput;
  data: AttendanceUpdateManyDataInput;
}

export interface AttendanceUpdateManyDataInput {
  status?: Maybe<AttendanceStatus>;
  arrivedAt?: Maybe<DateTimeInput>;
}

export interface StudentUpsertWithoutPointsInput {
  update: StudentUpdateWithoutPointsDataInput;
  create: StudentCreateWithoutPointsInput;
}

export interface PointUpsertWithWhereUniqueWithoutClassSessionInput {
  where: PointWhereUniqueInput;
  update: PointUpdateWithoutClassSessionDataInput;
  create: PointCreateWithoutClassSessionInput;
}

export interface PointScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  value_not?: Maybe<Int>;
  value_in?: Maybe<Int[] | Int>;
  value_not_in?: Maybe<Int[] | Int>;
  value_lt?: Maybe<Int>;
  value_lte?: Maybe<Int>;
  value_gt?: Maybe<Int>;
  value_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PointScalarWhereInput[] | PointScalarWhereInput>;
  OR?: Maybe<PointScalarWhereInput[] | PointScalarWhereInput>;
  NOT?: Maybe<PointScalarWhereInput[] | PointScalarWhereInput>;
}

export interface PointUpdateManyWithWhereNestedInput {
  where: PointScalarWhereInput;
  data: PointUpdateManyDataInput;
}

export interface PointUpdateManyDataInput {
  value?: Maybe<Int>;
}

export interface LessonUpdateOneInput {
  create?: Maybe<LessonCreateInput>;
  update?: Maybe<LessonUpdateDataInput>;
  upsert?: Maybe<LessonUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<LessonWhereUniqueInput>;
}

export interface LessonUpdateDataInput {
  name?: Maybe<String>;
  tags?: Maybe<TagUpdateManyWithoutLessonsInput>;
  words?: Maybe<WordUpdateManyWithoutLessonsInput>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  materials?: Maybe<MaterialUpdateManyInput>;
}

export interface TagUpdateManyWithoutLessonsInput {
  create?: Maybe<TagCreateWithoutLessonsInput[] | TagCreateWithoutLessonsInput>;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutLessonsInput[]
    | TagUpdateWithWhereUniqueWithoutLessonsInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutLessonsInput[]
    | TagUpsertWithWhereUniqueWithoutLessonsInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueWithoutLessonsInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutLessonsDataInput;
}

export interface TagUpdateWithoutLessonsDataInput {
  name?: Maybe<String>;
  words?: Maybe<WordUpdateManyWithoutTagsInput>;
  materials?: Maybe<MaterialUpdateManyWithoutTagsInput>;
}

export interface WordUpdateManyWithoutTagsInput {
  create?: Maybe<WordCreateWithoutTagsInput[] | WordCreateWithoutTagsInput>;
  delete?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  set?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  disconnect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  update?: Maybe<
    | WordUpdateWithWhereUniqueWithoutTagsInput[]
    | WordUpdateWithWhereUniqueWithoutTagsInput
  >;
  upsert?: Maybe<
    | WordUpsertWithWhereUniqueWithoutTagsInput[]
    | WordUpsertWithWhereUniqueWithoutTagsInput
  >;
  deleteMany?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  updateMany?: Maybe<
    WordUpdateManyWithWhereNestedInput[] | WordUpdateManyWithWhereNestedInput
  >;
}

export interface WordUpdateWithWhereUniqueWithoutTagsInput {
  where: WordWhereUniqueInput;
  data: WordUpdateWithoutTagsDataInput;
}

export interface WordUpdateWithoutTagsDataInput {
  english?: Maybe<String>;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
  lessons?: Maybe<LessonUpdateManyWithoutWordsInput>;
}

export interface LessonUpdateManyWithoutWordsInput {
  create?: Maybe<
    LessonCreateWithoutWordsInput[] | LessonCreateWithoutWordsInput
  >;
  delete?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
  connect?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
  set?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
  disconnect?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
  update?: Maybe<
    | LessonUpdateWithWhereUniqueWithoutWordsInput[]
    | LessonUpdateWithWhereUniqueWithoutWordsInput
  >;
  upsert?: Maybe<
    | LessonUpsertWithWhereUniqueWithoutWordsInput[]
    | LessonUpsertWithWhereUniqueWithoutWordsInput
  >;
  deleteMany?: Maybe<LessonScalarWhereInput[] | LessonScalarWhereInput>;
  updateMany?: Maybe<
    | LessonUpdateManyWithWhereNestedInput[]
    | LessonUpdateManyWithWhereNestedInput
  >;
}

export interface LessonUpdateWithWhereUniqueWithoutWordsInput {
  where: LessonWhereUniqueInput;
  data: LessonUpdateWithoutWordsDataInput;
}

export interface LessonUpdateWithoutWordsDataInput {
  name?: Maybe<String>;
  tags?: Maybe<TagUpdateManyWithoutLessonsInput>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  materials?: Maybe<MaterialUpdateManyInput>;
}

export interface MaterialUpdateManyInput {
  create?: Maybe<MaterialCreateInput[] | MaterialCreateInput>;
  update?: Maybe<
    | MaterialUpdateWithWhereUniqueNestedInput[]
    | MaterialUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MaterialUpsertWithWhereUniqueNestedInput[]
    | MaterialUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
  connect?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
  set?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
  disconnect?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
  deleteMany?: Maybe<MaterialScalarWhereInput[] | MaterialScalarWhereInput>;
  updateMany?: Maybe<
    | MaterialUpdateManyWithWhereNestedInput[]
    | MaterialUpdateManyWithWhereNestedInput
  >;
}

export interface MaterialUpdateWithWhereUniqueNestedInput {
  where: MaterialWhereUniqueInput;
  data: MaterialUpdateDataInput;
}

export interface MaterialUpdateDataInput {
  tags?: Maybe<TagUpdateManyWithoutMaterialsInput>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  title?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface TagUpdateManyWithoutMaterialsInput {
  create?: Maybe<
    TagCreateWithoutMaterialsInput[] | TagCreateWithoutMaterialsInput
  >;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutMaterialsInput[]
    | TagUpdateWithWhereUniqueWithoutMaterialsInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutMaterialsInput[]
    | TagUpsertWithWhereUniqueWithoutMaterialsInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueWithoutMaterialsInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutMaterialsDataInput;
}

export interface TagUpdateWithoutMaterialsDataInput {
  name?: Maybe<String>;
  lessons?: Maybe<LessonUpdateManyWithoutTagsInput>;
  words?: Maybe<WordUpdateManyWithoutTagsInput>;
}

export interface LessonUpdateManyWithoutTagsInput {
  create?: Maybe<LessonCreateWithoutTagsInput[] | LessonCreateWithoutTagsInput>;
  delete?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
  connect?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
  set?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
  disconnect?: Maybe<LessonWhereUniqueInput[] | LessonWhereUniqueInput>;
  update?: Maybe<
    | LessonUpdateWithWhereUniqueWithoutTagsInput[]
    | LessonUpdateWithWhereUniqueWithoutTagsInput
  >;
  upsert?: Maybe<
    | LessonUpsertWithWhereUniqueWithoutTagsInput[]
    | LessonUpsertWithWhereUniqueWithoutTagsInput
  >;
  deleteMany?: Maybe<LessonScalarWhereInput[] | LessonScalarWhereInput>;
  updateMany?: Maybe<
    | LessonUpdateManyWithWhereNestedInput[]
    | LessonUpdateManyWithWhereNestedInput
  >;
}

export interface LessonUpdateWithWhereUniqueWithoutTagsInput {
  where: LessonWhereUniqueInput;
  data: LessonUpdateWithoutTagsDataInput;
}

export interface LessonUpdateWithoutTagsDataInput {
  name?: Maybe<String>;
  words?: Maybe<WordUpdateManyWithoutLessonsInput>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  materials?: Maybe<MaterialUpdateManyInput>;
}

export interface WordUpdateManyWithoutLessonsInput {
  create?: Maybe<
    WordCreateWithoutLessonsInput[] | WordCreateWithoutLessonsInput
  >;
  delete?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  set?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  disconnect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  update?: Maybe<
    | WordUpdateWithWhereUniqueWithoutLessonsInput[]
    | WordUpdateWithWhereUniqueWithoutLessonsInput
  >;
  upsert?: Maybe<
    | WordUpsertWithWhereUniqueWithoutLessonsInput[]
    | WordUpsertWithWhereUniqueWithoutLessonsInput
  >;
  deleteMany?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  updateMany?: Maybe<
    WordUpdateManyWithWhereNestedInput[] | WordUpdateManyWithWhereNestedInput
  >;
}

export interface WordUpdateWithWhereUniqueWithoutLessonsInput {
  where: WordWhereUniqueInput;
  data: WordUpdateWithoutLessonsDataInput;
}

export interface WordUpdateWithoutLessonsDataInput {
  english?: Maybe<String>;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
  tags?: Maybe<TagUpdateManyWithoutWordsInput>;
}

export interface TagUpdateManyWithoutWordsInput {
  create?: Maybe<TagCreateWithoutWordsInput[] | TagCreateWithoutWordsInput>;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutWordsInput[]
    | TagUpdateWithWhereUniqueWithoutWordsInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutWordsInput[]
    | TagUpsertWithWhereUniqueWithoutWordsInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueWithoutWordsInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutWordsDataInput;
}

export interface TagUpdateWithoutWordsDataInput {
  name?: Maybe<String>;
  lessons?: Maybe<LessonUpdateManyWithoutTagsInput>;
  materials?: Maybe<MaterialUpdateManyWithoutTagsInput>;
}

export interface MaterialUpdateManyWithoutTagsInput {
  create?: Maybe<
    MaterialCreateWithoutTagsInput[] | MaterialCreateWithoutTagsInput
  >;
  delete?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
  connect?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
  set?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
  disconnect?: Maybe<MaterialWhereUniqueInput[] | MaterialWhereUniqueInput>;
  update?: Maybe<
    | MaterialUpdateWithWhereUniqueWithoutTagsInput[]
    | MaterialUpdateWithWhereUniqueWithoutTagsInput
  >;
  upsert?: Maybe<
    | MaterialUpsertWithWhereUniqueWithoutTagsInput[]
    | MaterialUpsertWithWhereUniqueWithoutTagsInput
  >;
  deleteMany?: Maybe<MaterialScalarWhereInput[] | MaterialScalarWhereInput>;
  updateMany?: Maybe<
    | MaterialUpdateManyWithWhereNestedInput[]
    | MaterialUpdateManyWithWhereNestedInput
  >;
}

export interface MaterialUpdateWithWhereUniqueWithoutTagsInput {
  where: MaterialWhereUniqueInput;
  data: MaterialUpdateWithoutTagsDataInput;
}

export interface MaterialUpdateWithoutTagsDataInput {
  type?: Maybe<String>;
  url?: Maybe<String>;
  title?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface MaterialUpsertWithWhereUniqueWithoutTagsInput {
  where: MaterialWhereUniqueInput;
  update: MaterialUpdateWithoutTagsDataInput;
  create: MaterialCreateWithoutTagsInput;
}

export interface MaterialScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  AND?: Maybe<MaterialScalarWhereInput[] | MaterialScalarWhereInput>;
  OR?: Maybe<MaterialScalarWhereInput[] | MaterialScalarWhereInput>;
  NOT?: Maybe<MaterialScalarWhereInput[] | MaterialScalarWhereInput>;
}

export interface MaterialUpdateManyWithWhereNestedInput {
  where: MaterialScalarWhereInput;
  data: MaterialUpdateManyDataInput;
}

export interface MaterialUpdateManyDataInput {
  type?: Maybe<String>;
  url?: Maybe<String>;
  title?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueWithoutWordsInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutWordsDataInput;
  create: TagCreateWithoutWordsInput;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface WordUpsertWithWhereUniqueWithoutLessonsInput {
  where: WordWhereUniqueInput;
  update: WordUpdateWithoutLessonsDataInput;
  create: WordCreateWithoutLessonsInput;
}

export interface WordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  english?: Maybe<String>;
  english_not?: Maybe<String>;
  english_in?: Maybe<String[] | String>;
  english_not_in?: Maybe<String[] | String>;
  english_lt?: Maybe<String>;
  english_lte?: Maybe<String>;
  english_gt?: Maybe<String>;
  english_gte?: Maybe<String>;
  english_contains?: Maybe<String>;
  english_not_contains?: Maybe<String>;
  english_starts_with?: Maybe<String>;
  english_not_starts_with?: Maybe<String>;
  english_ends_with?: Maybe<String>;
  english_not_ends_with?: Maybe<String>;
  chinese?: Maybe<String>;
  chinese_not?: Maybe<String>;
  chinese_in?: Maybe<String[] | String>;
  chinese_not_in?: Maybe<String[] | String>;
  chinese_lt?: Maybe<String>;
  chinese_lte?: Maybe<String>;
  chinese_gt?: Maybe<String>;
  chinese_gte?: Maybe<String>;
  chinese_contains?: Maybe<String>;
  chinese_not_contains?: Maybe<String>;
  chinese_starts_with?: Maybe<String>;
  chinese_not_starts_with?: Maybe<String>;
  chinese_ends_with?: Maybe<String>;
  chinese_not_ends_with?: Maybe<String>;
  audio?: Maybe<String>;
  audio_not?: Maybe<String>;
  audio_in?: Maybe<String[] | String>;
  audio_not_in?: Maybe<String[] | String>;
  audio_lt?: Maybe<String>;
  audio_lte?: Maybe<String>;
  audio_gt?: Maybe<String>;
  audio_gte?: Maybe<String>;
  audio_contains?: Maybe<String>;
  audio_not_contains?: Maybe<String>;
  audio_starts_with?: Maybe<String>;
  audio_not_starts_with?: Maybe<String>;
  audio_ends_with?: Maybe<String>;
  audio_not_ends_with?: Maybe<String>;
  AND?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  OR?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  NOT?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
}

export interface WordUpdateManyWithWhereNestedInput {
  where: WordScalarWhereInput;
  data: WordUpdateManyDataInput;
}

export interface WordUpdateManyDataInput {
  english?: Maybe<String>;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
}

export interface LessonUpsertWithWhereUniqueWithoutTagsInput {
  where: LessonWhereUniqueInput;
  update: LessonUpdateWithoutTagsDataInput;
  create: LessonCreateWithoutTagsInput;
}

export interface LessonScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  homeworkEN?: Maybe<String>;
  homeworkEN_not?: Maybe<String>;
  homeworkEN_in?: Maybe<String[] | String>;
  homeworkEN_not_in?: Maybe<String[] | String>;
  homeworkEN_lt?: Maybe<String>;
  homeworkEN_lte?: Maybe<String>;
  homeworkEN_gt?: Maybe<String>;
  homeworkEN_gte?: Maybe<String>;
  homeworkEN_contains?: Maybe<String>;
  homeworkEN_not_contains?: Maybe<String>;
  homeworkEN_starts_with?: Maybe<String>;
  homeworkEN_not_starts_with?: Maybe<String>;
  homeworkEN_ends_with?: Maybe<String>;
  homeworkEN_not_ends_with?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  homeworkZH_not?: Maybe<String>;
  homeworkZH_in?: Maybe<String[] | String>;
  homeworkZH_not_in?: Maybe<String[] | String>;
  homeworkZH_lt?: Maybe<String>;
  homeworkZH_lte?: Maybe<String>;
  homeworkZH_gt?: Maybe<String>;
  homeworkZH_gte?: Maybe<String>;
  homeworkZH_contains?: Maybe<String>;
  homeworkZH_not_contains?: Maybe<String>;
  homeworkZH_starts_with?: Maybe<String>;
  homeworkZH_not_starts_with?: Maybe<String>;
  homeworkZH_ends_with?: Maybe<String>;
  homeworkZH_not_ends_with?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryEN_not?: Maybe<String>;
  summaryEN_in?: Maybe<String[] | String>;
  summaryEN_not_in?: Maybe<String[] | String>;
  summaryEN_lt?: Maybe<String>;
  summaryEN_lte?: Maybe<String>;
  summaryEN_gt?: Maybe<String>;
  summaryEN_gte?: Maybe<String>;
  summaryEN_contains?: Maybe<String>;
  summaryEN_not_contains?: Maybe<String>;
  summaryEN_starts_with?: Maybe<String>;
  summaryEN_not_starts_with?: Maybe<String>;
  summaryEN_ends_with?: Maybe<String>;
  summaryEN_not_ends_with?: Maybe<String>;
  summaryZH?: Maybe<String>;
  summaryZH_not?: Maybe<String>;
  summaryZH_in?: Maybe<String[] | String>;
  summaryZH_not_in?: Maybe<String[] | String>;
  summaryZH_lt?: Maybe<String>;
  summaryZH_lte?: Maybe<String>;
  summaryZH_gt?: Maybe<String>;
  summaryZH_gte?: Maybe<String>;
  summaryZH_contains?: Maybe<String>;
  summaryZH_not_contains?: Maybe<String>;
  summaryZH_starts_with?: Maybe<String>;
  summaryZH_not_starts_with?: Maybe<String>;
  summaryZH_ends_with?: Maybe<String>;
  summaryZH_not_ends_with?: Maybe<String>;
  AND?: Maybe<LessonScalarWhereInput[] | LessonScalarWhereInput>;
  OR?: Maybe<LessonScalarWhereInput[] | LessonScalarWhereInput>;
  NOT?: Maybe<LessonScalarWhereInput[] | LessonScalarWhereInput>;
}

export interface LessonUpdateManyWithWhereNestedInput {
  where: LessonScalarWhereInput;
  data: LessonUpdateManyDataInput;
}

export interface LessonUpdateManyDataInput {
  name?: Maybe<String>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueWithoutMaterialsInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutMaterialsDataInput;
  create: TagCreateWithoutMaterialsInput;
}

export interface MaterialUpsertWithWhereUniqueNestedInput {
  where: MaterialWhereUniqueInput;
  update: MaterialUpdateDataInput;
  create: MaterialCreateInput;
}

export interface LessonUpsertWithWhereUniqueWithoutWordsInput {
  where: LessonWhereUniqueInput;
  update: LessonUpdateWithoutWordsDataInput;
  create: LessonCreateWithoutWordsInput;
}

export interface WordUpsertWithWhereUniqueWithoutTagsInput {
  where: WordWhereUniqueInput;
  update: WordUpdateWithoutTagsDataInput;
  create: WordCreateWithoutTagsInput;
}

export interface TagUpsertWithWhereUniqueWithoutLessonsInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutLessonsDataInput;
  create: TagCreateWithoutLessonsInput;
}

export interface LessonUpsertNestedInput {
  update: LessonUpdateDataInput;
  create: LessonCreateInput;
}

export interface ReportUpdateOneInput {
  create?: Maybe<ReportCreateInput>;
  update?: Maybe<ReportUpdateDataInput>;
  upsert?: Maybe<ReportUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ReportWhereUniqueInput>;
}

export interface ReportUpdateDataInput {
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  performance?: Maybe<String>;
  published?: Maybe<Boolean>;
  materials?: Maybe<MaterialUpdateManyInput>;
  words?: Maybe<WordUpdateManyInput>;
}

export interface WordUpdateManyInput {
  create?: Maybe<WordCreateInput[] | WordCreateInput>;
  update?: Maybe<
    | WordUpdateWithWhereUniqueNestedInput[]
    | WordUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WordUpsertWithWhereUniqueNestedInput[]
    | WordUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  connect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  set?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  disconnect?: Maybe<WordWhereUniqueInput[] | WordWhereUniqueInput>;
  deleteMany?: Maybe<WordScalarWhereInput[] | WordScalarWhereInput>;
  updateMany?: Maybe<
    WordUpdateManyWithWhereNestedInput[] | WordUpdateManyWithWhereNestedInput
  >;
}

export interface WordUpdateWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  data: WordUpdateDataInput;
}

export interface WordUpdateDataInput {
  english?: Maybe<String>;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
  lessons?: Maybe<LessonUpdateManyWithoutWordsInput>;
  tags?: Maybe<TagUpdateManyWithoutWordsInput>;
}

export interface WordUpsertWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  update: WordUpdateDataInput;
  create: WordCreateInput;
}

export interface ReportUpsertNestedInput {
  update: ReportUpdateDataInput;
  create: ReportCreateInput;
}

export interface ClassSessionUpsertWithWhereUniqueWithoutGroupInput {
  where: ClassSessionWhereUniqueInput;
  update: ClassSessionUpdateWithoutGroupDataInput;
  create: ClassSessionCreateWithoutGroupInput;
}

export interface ClassSessionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startsAt?: Maybe<DateTimeInput>;
  startsAt_not?: Maybe<DateTimeInput>;
  startsAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startsAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startsAt_lt?: Maybe<DateTimeInput>;
  startsAt_lte?: Maybe<DateTimeInput>;
  startsAt_gt?: Maybe<DateTimeInput>;
  startsAt_gte?: Maybe<DateTimeInput>;
  startedAt?: Maybe<DateTimeInput>;
  startedAt_not?: Maybe<DateTimeInput>;
  startedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startedAt_lt?: Maybe<DateTimeInput>;
  startedAt_lte?: Maybe<DateTimeInput>;
  startedAt_gt?: Maybe<DateTimeInput>;
  startedAt_gte?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endsAt_not?: Maybe<DateTimeInput>;
  endsAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endsAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endsAt_lt?: Maybe<DateTimeInput>;
  endsAt_lte?: Maybe<DateTimeInput>;
  endsAt_gt?: Maybe<DateTimeInput>;
  endsAt_gte?: Maybe<DateTimeInput>;
  endedAt?: Maybe<DateTimeInput>;
  endedAt_not?: Maybe<DateTimeInput>;
  endedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endedAt_lt?: Maybe<DateTimeInput>;
  endedAt_lte?: Maybe<DateTimeInput>;
  endedAt_gt?: Maybe<DateTimeInput>;
  endedAt_gte?: Maybe<DateTimeInput>;
  stage?: Maybe<Stage>;
  stage_not?: Maybe<Stage>;
  stage_in?: Maybe<Stage[] | Stage>;
  stage_not_in?: Maybe<Stage[] | Stage>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClassSessionScalarWhereInput[] | ClassSessionScalarWhereInput>;
  OR?: Maybe<ClassSessionScalarWhereInput[] | ClassSessionScalarWhereInput>;
  NOT?: Maybe<ClassSessionScalarWhereInput[] | ClassSessionScalarWhereInput>;
}

export interface ClassSessionUpdateManyWithWhereNestedInput {
  where: ClassSessionScalarWhereInput;
  data: ClassSessionUpdateManyDataInput;
}

export interface ClassSessionUpdateManyDataInput {
  startsAt?: Maybe<DateTimeInput>;
  startedAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endedAt?: Maybe<DateTimeInput>;
  stage?: Maybe<Stage>;
}

export interface SemesterUpdateOneRequiredWithoutGroupsInput {
  create?: Maybe<SemesterCreateWithoutGroupsInput>;
  update?: Maybe<SemesterUpdateWithoutGroupsDataInput>;
  upsert?: Maybe<SemesterUpsertWithoutGroupsInput>;
  connect?: Maybe<SemesterWhereUniqueInput>;
}

export interface SemesterUpdateWithoutGroupsDataInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
}

export interface SemesterUpsertWithoutGroupsInput {
  update: SemesterUpdateWithoutGroupsDataInput;
  create: SemesterCreateWithoutGroupsInput;
}

export interface GroupUpsertWithWhereUniqueWithoutStudentsInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutStudentsDataInput;
  create: GroupCreateWithoutStudentsInput;
}

export interface GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  OR?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  NOT?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface GroupUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface StudentUpsertWithoutAttendancesInput {
  update: StudentUpdateWithoutAttendancesDataInput;
  create: StudentCreateWithoutAttendancesInput;
}

export interface AttendanceUpsertWithWhereUniqueWithoutClassSessionInput {
  where: AttendanceWhereUniqueInput;
  update: AttendanceUpdateWithoutClassSessionDataInput;
  create: AttendanceCreateWithoutClassSessionInput;
}

export interface ClassSessionUpsertWithoutPointsInput {
  update: ClassSessionUpdateWithoutPointsDataInput;
  create: ClassSessionCreateWithoutPointsInput;
}

export interface PointUpsertWithWhereUniqueWithoutStudentInput {
  where: PointWhereUniqueInput;
  update: PointUpdateWithoutStudentDataInput;
  create: PointCreateWithoutStudentInput;
}

export interface StudentUpsertWithWhereUniqueWithoutGroupsInput {
  where: StudentWhereUniqueInput;
  update: StudentUpdateWithoutGroupsDataInput;
  create: StudentCreateWithoutGroupsInput;
}

export interface StudentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  chineseName?: Maybe<String>;
  chineseName_not?: Maybe<String>;
  chineseName_in?: Maybe<String[] | String>;
  chineseName_not_in?: Maybe<String[] | String>;
  chineseName_lt?: Maybe<String>;
  chineseName_lte?: Maybe<String>;
  chineseName_gt?: Maybe<String>;
  chineseName_gte?: Maybe<String>;
  chineseName_contains?: Maybe<String>;
  chineseName_not_contains?: Maybe<String>;
  chineseName_starts_with?: Maybe<String>;
  chineseName_not_starts_with?: Maybe<String>;
  chineseName_ends_with?: Maybe<String>;
  chineseName_not_ends_with?: Maybe<String>;
  englishName?: Maybe<String>;
  englishName_not?: Maybe<String>;
  englishName_in?: Maybe<String[] | String>;
  englishName_not_in?: Maybe<String[] | String>;
  englishName_lt?: Maybe<String>;
  englishName_lte?: Maybe<String>;
  englishName_gt?: Maybe<String>;
  englishName_gte?: Maybe<String>;
  englishName_contains?: Maybe<String>;
  englishName_not_contains?: Maybe<String>;
  englishName_starts_with?: Maybe<String>;
  englishName_not_starts_with?: Maybe<String>;
  englishName_ends_with?: Maybe<String>;
  englishName_not_ends_with?: Maybe<String>;
  pinyinName?: Maybe<String>;
  pinyinName_not?: Maybe<String>;
  pinyinName_in?: Maybe<String[] | String>;
  pinyinName_not_in?: Maybe<String[] | String>;
  pinyinName_lt?: Maybe<String>;
  pinyinName_lte?: Maybe<String>;
  pinyinName_gt?: Maybe<String>;
  pinyinName_gte?: Maybe<String>;
  pinyinName_contains?: Maybe<String>;
  pinyinName_not_contains?: Maybe<String>;
  pinyinName_starts_with?: Maybe<String>;
  pinyinName_not_starts_with?: Maybe<String>;
  pinyinName_ends_with?: Maybe<String>;
  pinyinName_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  OR?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  NOT?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
}

export interface StudentUpdateManyWithWhereNestedInput {
  where: StudentScalarWhereInput;
  data: StudentUpdateManyDataInput;
}

export interface StudentUpdateManyDataInput {
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
}

export interface GroupUpsertWithoutClassSessionsInput {
  update: GroupUpdateWithoutClassSessionsDataInput;
  create: GroupCreateWithoutClassSessionsInput;
}

export interface ClassSessionUpsertWithoutAttendancesInput {
  update: ClassSessionUpdateWithoutAttendancesDataInput;
  create: ClassSessionCreateWithoutAttendancesInput;
}

export interface AttendanceUpdateManyMutationInput {
  status?: Maybe<AttendanceStatus>;
  arrivedAt?: Maybe<DateTimeInput>;
}

export interface ClassSessionCreateInput {
  id?: Maybe<ID_Input>;
  startsAt: DateTimeInput;
  startedAt?: Maybe<DateTimeInput>;
  endsAt: DateTimeInput;
  endedAt?: Maybe<DateTimeInput>;
  group: GroupCreateOneWithoutClassSessionsInput;
  points?: Maybe<PointCreateManyWithoutClassSessionInput>;
  attendances?: Maybe<AttendanceCreateManyWithoutClassSessionInput>;
  stage?: Maybe<Stage>;
  lesson?: Maybe<LessonCreateOneInput>;
  report?: Maybe<ReportCreateOneInput>;
}

export interface ClassSessionUpdateInput {
  startsAt?: Maybe<DateTimeInput>;
  startedAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endedAt?: Maybe<DateTimeInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutClassSessionsInput>;
  points?: Maybe<PointUpdateManyWithoutClassSessionInput>;
  attendances?: Maybe<AttendanceUpdateManyWithoutClassSessionInput>;
  stage?: Maybe<Stage>;
  lesson?: Maybe<LessonUpdateOneInput>;
  report?: Maybe<ReportUpdateOneInput>;
}

export interface ClassSessionUpdateManyMutationInput {
  startsAt?: Maybe<DateTimeInput>;
  startedAt?: Maybe<DateTimeInput>;
  endsAt?: Maybe<DateTimeInput>;
  endedAt?: Maybe<DateTimeInput>;
  stage?: Maybe<Stage>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  students?: Maybe<StudentCreateManyWithoutGroupsInput>;
  classSessions?: Maybe<ClassSessionCreateManyWithoutGroupInput>;
  semester: SemesterCreateOneWithoutGroupsInput;
}

export interface GroupUpdateInput {
  name?: Maybe<String>;
  students?: Maybe<StudentUpdateManyWithoutGroupsInput>;
  classSessions?: Maybe<ClassSessionUpdateManyWithoutGroupInput>;
  semester?: Maybe<SemesterUpdateOneRequiredWithoutGroupsInput>;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface LessonUpdateInput {
  name?: Maybe<String>;
  tags?: Maybe<TagUpdateManyWithoutLessonsInput>;
  words?: Maybe<WordUpdateManyWithoutLessonsInput>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  materials?: Maybe<MaterialUpdateManyInput>;
}

export interface LessonUpdateManyMutationInput {
  name?: Maybe<String>;
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
}

export interface MaterialUpdateInput {
  tags?: Maybe<TagUpdateManyWithoutMaterialsInput>;
  type?: Maybe<String>;
  url?: Maybe<String>;
  title?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface MaterialUpdateManyMutationInput {
  type?: Maybe<String>;
  url?: Maybe<String>;
  title?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  data?: Maybe<Json>;
}

export interface MessageUpdateInput {
  data?: Maybe<Json>;
}

export interface MessageUpdateManyMutationInput {
  data?: Maybe<Json>;
}

export interface PointCreateInput {
  id?: Maybe<ID_Input>;
  value: Int;
  student: StudentCreateOneWithoutPointsInput;
  classSession: ClassSessionCreateOneWithoutPointsInput;
}

export interface PointUpdateInput {
  value?: Maybe<Int>;
  student?: Maybe<StudentUpdateOneRequiredWithoutPointsInput>;
  classSession?: Maybe<ClassSessionUpdateOneRequiredWithoutPointsInput>;
}

export interface PointUpdateManyMutationInput {
  value?: Maybe<Int>;
}

export interface ReportUpdateInput {
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  performance?: Maybe<String>;
  published?: Maybe<Boolean>;
  materials?: Maybe<MaterialUpdateManyInput>;
  words?: Maybe<WordUpdateManyInput>;
}

export interface ReportUpdateManyMutationInput {
  homeworkEN?: Maybe<String>;
  homeworkZH?: Maybe<String>;
  summaryEN?: Maybe<String>;
  summaryZH?: Maybe<String>;
  performance?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface SemesterCreateInput {
  id?: Maybe<ID_Input>;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  name: String;
  groups?: Maybe<GroupCreateManyWithoutSemesterInput>;
}

export interface GroupCreateManyWithoutSemesterInput {
  create?: Maybe<
    GroupCreateWithoutSemesterInput[] | GroupCreateWithoutSemesterInput
  >;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutSemesterInput {
  id?: Maybe<ID_Input>;
  name: String;
  students?: Maybe<StudentCreateManyWithoutGroupsInput>;
  classSessions?: Maybe<ClassSessionCreateManyWithoutGroupInput>;
}

export interface SemesterUpdateInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutSemesterInput>;
}

export interface GroupUpdateManyWithoutSemesterInput {
  create?: Maybe<
    GroupCreateWithoutSemesterInput[] | GroupCreateWithoutSemesterInput
  >;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutSemesterInput[]
    | GroupUpdateWithWhereUniqueWithoutSemesterInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutSemesterInput[]
    | GroupUpsertWithWhereUniqueWithoutSemesterInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateWithWhereUniqueWithoutSemesterInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutSemesterDataInput;
}

export interface GroupUpdateWithoutSemesterDataInput {
  name?: Maybe<String>;
  students?: Maybe<StudentUpdateManyWithoutGroupsInput>;
  classSessions?: Maybe<ClassSessionUpdateManyWithoutGroupInput>;
}

export interface GroupUpsertWithWhereUniqueWithoutSemesterInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutSemesterDataInput;
  create: GroupCreateWithoutSemesterInput;
}

export interface SemesterUpdateManyMutationInput {
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
}

export interface StudentCreateInput {
  id?: Maybe<ID_Input>;
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  groups?: Maybe<GroupCreateManyWithoutStudentsInput>;
  points?: Maybe<PointCreateManyWithoutStudentInput>;
  attendances?: Maybe<AttendanceCreateManyWithoutStudentInput>;
}

export interface StudentUpdateInput {
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  groups?: Maybe<GroupUpdateManyWithoutStudentsInput>;
  points?: Maybe<PointUpdateManyWithoutStudentInput>;
  attendances?: Maybe<AttendanceUpdateManyWithoutStudentInput>;
}

export interface StudentUpdateManyMutationInput {
  chineseName?: Maybe<String>;
  englishName?: Maybe<String>;
  pinyinName?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  lessons?: Maybe<LessonCreateManyWithoutTagsInput>;
  words?: Maybe<WordCreateManyWithoutTagsInput>;
  materials?: Maybe<MaterialCreateManyWithoutTagsInput>;
}

export interface TagUpdateInput {
  name?: Maybe<String>;
  lessons?: Maybe<LessonUpdateManyWithoutTagsInput>;
  words?: Maybe<WordUpdateManyWithoutTagsInput>;
  materials?: Maybe<MaterialUpdateManyWithoutTagsInput>;
}

export interface TagUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  role?: Maybe<Role>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface ViewerCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface ViewerUpdateInput {
  name?: Maybe<String>;
}

export interface ViewerUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface WordUpdateInput {
  english?: Maybe<String>;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
  lessons?: Maybe<LessonUpdateManyWithoutWordsInput>;
  tags?: Maybe<TagUpdateManyWithoutWordsInput>;
}

export interface WordUpdateManyMutationInput {
  english?: Maybe<String>;
  chinese?: Maybe<String>;
  audio?: Maybe<String>;
}

export interface AttendanceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AttendanceWhereInput>;
  AND?: Maybe<
    AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput
  >;
  OR?: Maybe<
    AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput
  >;
}

export interface ClassSessionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClassSessionWhereInput>;
  AND?: Maybe<
    ClassSessionSubscriptionWhereInput[] | ClassSessionSubscriptionWhereInput
  >;
  OR?: Maybe<
    ClassSessionSubscriptionWhereInput[] | ClassSessionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ClassSessionSubscriptionWhereInput[] | ClassSessionSubscriptionWhereInput
  >;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface LessonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LessonWhereInput>;
  AND?: Maybe<LessonSubscriptionWhereInput[] | LessonSubscriptionWhereInput>;
  OR?: Maybe<LessonSubscriptionWhereInput[] | LessonSubscriptionWhereInput>;
  NOT?: Maybe<LessonSubscriptionWhereInput[] | LessonSubscriptionWhereInput>;
}

export interface MaterialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MaterialWhereInput>;
  AND?: Maybe<
    MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput
  >;
  OR?: Maybe<MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput>;
  NOT?: Maybe<
    MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput
  >;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface PointSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PointWhereInput>;
  AND?: Maybe<PointSubscriptionWhereInput[] | PointSubscriptionWhereInput>;
  OR?: Maybe<PointSubscriptionWhereInput[] | PointSubscriptionWhereInput>;
  NOT?: Maybe<PointSubscriptionWhereInput[] | PointSubscriptionWhereInput>;
}

export interface ReportSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReportWhereInput>;
  AND?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  OR?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  NOT?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
}

export interface SemesterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SemesterWhereInput>;
  AND?: Maybe<
    SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput
  >;
  OR?: Maybe<SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput>;
  NOT?: Maybe<
    SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput
  >;
}

export interface StudentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StudentWhereInput>;
  AND?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  OR?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  NOT?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ViewerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ViewerWhereInput>;
  AND?: Maybe<ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput>;
  OR?: Maybe<ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput>;
  NOT?: Maybe<ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput>;
}

export interface WordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WordWhereInput>;
  AND?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
  OR?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
  NOT?: Maybe<WordSubscriptionWhereInput[] | WordSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Attendance {
  id: ID_Output;
  status: AttendanceStatus;
  arrivedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AttendancePromise extends Promise<Attendance>, Fragmentable {
  classSession: <T = ClassSessionPromise>() => T;
  id: () => Promise<ID_Output>;
  student: <T = StudentPromise>() => T;
  status: () => Promise<AttendanceStatus>;
  arrivedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AttendanceSubscription
  extends Promise<AsyncIterator<Attendance>>,
    Fragmentable {
  classSession: <T = ClassSessionSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  student: <T = StudentSubscription>() => T;
  status: () => Promise<AsyncIterator<AttendanceStatus>>;
  arrivedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AttendanceNullablePromise
  extends Promise<Attendance | null>,
    Fragmentable {
  classSession: <T = ClassSessionPromise>() => T;
  id: () => Promise<ID_Output>;
  student: <T = StudentPromise>() => T;
  status: () => Promise<AttendanceStatus>;
  arrivedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassSession {
  id: ID_Output;
  startsAt: DateTimeOutput;
  startedAt?: DateTimeOutput;
  endsAt: DateTimeOutput;
  endedAt?: DateTimeOutput;
  stage: Stage;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClassSessionPromise
  extends Promise<ClassSession>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startsAt: () => Promise<DateTimeOutput>;
  startedAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  endedAt: () => Promise<DateTimeOutput>;
  group: <T = GroupPromise>() => T;
  points: <T = FragmentableArray<Point>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = FragmentableArray<Attendance>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  stage: () => Promise<Stage>;
  lesson: <T = LessonPromise>() => T;
  report: <T = ReportPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassSessionSubscription
  extends Promise<AsyncIterator<ClassSession>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  group: <T = GroupSubscription>() => T;
  points: <T = Promise<AsyncIterator<PointSubscription>>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = Promise<AsyncIterator<AttendanceSubscription>>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  stage: () => Promise<AsyncIterator<Stage>>;
  lesson: <T = LessonSubscription>() => T;
  report: <T = ReportSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClassSessionNullablePromise
  extends Promise<ClassSession | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startsAt: () => Promise<DateTimeOutput>;
  startedAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  endedAt: () => Promise<DateTimeOutput>;
  group: <T = GroupPromise>() => T;
  points: <T = FragmentableArray<Point>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = FragmentableArray<Attendance>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  stage: () => Promise<Stage>;
  lesson: <T = LessonPromise>() => T;
  report: <T = ReportPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Group {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classSessions: <T = FragmentableArray<ClassSession>>(args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  semester: <T = SemesterPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  students: <T = Promise<AsyncIterator<StudentSubscription>>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classSessions: <T = Promise<AsyncIterator<ClassSessionSubscription>>>(args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  semester: <T = SemesterSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classSessions: <T = FragmentableArray<ClassSession>>(args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  semester: <T = SemesterPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Student {
  id: ID_Output;
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeOutput;
  gender?: Gender;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StudentPromise extends Promise<Student>, Fragmentable {
  id: () => Promise<ID_Output>;
  chineseName: () => Promise<String>;
  englishName: () => Promise<String>;
  pinyinName: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  points: <T = FragmentableArray<Point>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = FragmentableArray<Attendance>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StudentSubscription
  extends Promise<AsyncIterator<Student>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chineseName: () => Promise<AsyncIterator<String>>;
  englishName: () => Promise<AsyncIterator<String>>;
  pinyinName: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  points: <T = Promise<AsyncIterator<PointSubscription>>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = Promise<AsyncIterator<AttendanceSubscription>>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StudentNullablePromise
  extends Promise<Student | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chineseName: () => Promise<String>;
  englishName: () => Promise<String>;
  pinyinName: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  points: <T = FragmentableArray<Point>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = FragmentableArray<Attendance>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Point {
  id: ID_Output;
  value: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PointPromise extends Promise<Point>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  student: <T = StudentPromise>() => T;
  classSession: <T = ClassSessionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PointSubscription
  extends Promise<AsyncIterator<Point>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<Int>>;
  student: <T = StudentSubscription>() => T;
  classSession: <T = ClassSessionSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PointNullablePromise
  extends Promise<Point | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  student: <T = StudentPromise>() => T;
  classSession: <T = ClassSessionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Semester {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SemesterPromise extends Promise<Semester>, Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SemesterSubscription
  extends Promise<AsyncIterator<Semester>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SemesterNullablePromise
  extends Promise<Semester | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Lesson {
  id: ID_Output;
  name: String;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
}

export interface LessonPromise extends Promise<Lesson>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  homeworkEN: () => Promise<String>;
  homeworkZH: () => Promise<String>;
  summaryEN: () => Promise<String>;
  summaryZH: () => Promise<String>;
  materials: <T = FragmentableArray<Material>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LessonSubscription
  extends Promise<AsyncIterator<Lesson>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  homeworkEN: () => Promise<AsyncIterator<String>>;
  homeworkZH: () => Promise<AsyncIterator<String>>;
  summaryEN: () => Promise<AsyncIterator<String>>;
  summaryZH: () => Promise<AsyncIterator<String>>;
  materials: <T = Promise<AsyncIterator<MaterialSubscription>>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LessonNullablePromise
  extends Promise<Lesson | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  homeworkEN: () => Promise<String>;
  homeworkZH: () => Promise<String>;
  summaryEN: () => Promise<String>;
  summaryZH: () => Promise<String>;
  materials: <T = FragmentableArray<Material>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Tag {
  id: ID_Output;
  name: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lessons: <T = FragmentableArray<Lesson>>(args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  materials: <T = FragmentableArray<Material>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lessons: <T = Promise<AsyncIterator<LessonSubscription>>>(args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  materials: <T = Promise<AsyncIterator<MaterialSubscription>>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lessons: <T = FragmentableArray<Lesson>>(args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  materials: <T = FragmentableArray<Material>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Word {
  id: ID_Output;
  english: String;
  chinese?: String;
  audio?: String;
}

export interface WordPromise extends Promise<Word>, Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  chinese: () => Promise<String>;
  audio: () => Promise<String>;
  lessons: <T = FragmentableArray<Lesson>>(args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordSubscription
  extends Promise<AsyncIterator<Word>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  english: () => Promise<AsyncIterator<String>>;
  chinese: () => Promise<AsyncIterator<String>>;
  audio: () => Promise<AsyncIterator<String>>;
  lessons: <T = Promise<AsyncIterator<LessonSubscription>>>(args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordNullablePromise
  extends Promise<Word | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  chinese: () => Promise<String>;
  audio: () => Promise<String>;
  lessons: <T = FragmentableArray<Lesson>>(args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Material {
  id: ID_Output;
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface MaterialPromise extends Promise<Material>, Fragmentable {
  id: () => Promise<ID_Output>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<String>;
  url: () => Promise<String>;
  title: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface MaterialSubscription
  extends Promise<AsyncIterator<Material>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface MaterialNullablePromise
  extends Promise<Material | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<String>;
  url: () => Promise<String>;
  title: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface Report {
  id: ID_Output;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
  performance?: String;
  published: Boolean;
}

export interface ReportPromise extends Promise<Report>, Fragmentable {
  id: () => Promise<ID_Output>;
  homeworkEN: () => Promise<String>;
  homeworkZH: () => Promise<String>;
  summaryEN: () => Promise<String>;
  summaryZH: () => Promise<String>;
  performance: () => Promise<String>;
  published: () => Promise<Boolean>;
  materials: <T = FragmentableArray<Material>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ReportSubscription
  extends Promise<AsyncIterator<Report>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  homeworkEN: () => Promise<AsyncIterator<String>>;
  homeworkZH: () => Promise<AsyncIterator<String>>;
  summaryEN: () => Promise<AsyncIterator<String>>;
  summaryZH: () => Promise<AsyncIterator<String>>;
  performance: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  materials: <T = Promise<AsyncIterator<MaterialSubscription>>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ReportNullablePromise
  extends Promise<Report | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  homeworkEN: () => Promise<String>;
  homeworkZH: () => Promise<String>;
  summaryEN: () => Promise<String>;
  summaryZH: () => Promise<String>;
  performance: () => Promise<String>;
  published: () => Promise<Boolean>;
  materials: <T = FragmentableArray<Material>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttendanceConnection {
  pageInfo: PageInfo;
  edges: AttendanceEdge[];
}

export interface AttendanceConnectionPromise
  extends Promise<AttendanceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttendanceEdge>>() => T;
  aggregate: <T = AggregateAttendancePromise>() => T;
}

export interface AttendanceConnectionSubscription
  extends Promise<AsyncIterator<AttendanceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttendanceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttendanceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AttendanceEdge {
  node: Attendance;
  cursor: String;
}

export interface AttendanceEdgePromise
  extends Promise<AttendanceEdge>,
    Fragmentable {
  node: <T = AttendancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttendanceEdgeSubscription
  extends Promise<AsyncIterator<AttendanceEdge>>,
    Fragmentable {
  node: <T = AttendanceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttendance {
  count: Int;
}

export interface AggregateAttendancePromise
  extends Promise<AggregateAttendance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttendanceSubscription
  extends Promise<AsyncIterator<AggregateAttendance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClassSessionConnection {
  pageInfo: PageInfo;
  edges: ClassSessionEdge[];
}

export interface ClassSessionConnectionPromise
  extends Promise<ClassSessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassSessionEdge>>() => T;
  aggregate: <T = AggregateClassSessionPromise>() => T;
}

export interface ClassSessionConnectionSubscription
  extends Promise<AsyncIterator<ClassSessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassSessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassSessionSubscription>() => T;
}

export interface ClassSessionEdge {
  node: ClassSession;
  cursor: String;
}

export interface ClassSessionEdgePromise
  extends Promise<ClassSessionEdge>,
    Fragmentable {
  node: <T = ClassSessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassSessionEdgeSubscription
  extends Promise<AsyncIterator<ClassSessionEdge>>,
    Fragmentable {
  node: <T = ClassSessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClassSession {
  count: Int;
}

export interface AggregateClassSessionPromise
  extends Promise<AggregateClassSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassSessionSubscription
  extends Promise<AsyncIterator<AggregateClassSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LessonConnection {
  pageInfo: PageInfo;
  edges: LessonEdge[];
}

export interface LessonConnectionPromise
  extends Promise<LessonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LessonEdge>>() => T;
  aggregate: <T = AggregateLessonPromise>() => T;
}

export interface LessonConnectionSubscription
  extends Promise<AsyncIterator<LessonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LessonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLessonSubscription>() => T;
}

export interface LessonEdge {
  node: Lesson;
  cursor: String;
}

export interface LessonEdgePromise extends Promise<LessonEdge>, Fragmentable {
  node: <T = LessonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LessonEdgeSubscription
  extends Promise<AsyncIterator<LessonEdge>>,
    Fragmentable {
  node: <T = LessonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLesson {
  count: Int;
}

export interface AggregateLessonPromise
  extends Promise<AggregateLesson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLessonSubscription
  extends Promise<AsyncIterator<AggregateLesson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MaterialConnection {
  pageInfo: PageInfo;
  edges: MaterialEdge[];
}

export interface MaterialConnectionPromise
  extends Promise<MaterialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MaterialEdge>>() => T;
  aggregate: <T = AggregateMaterialPromise>() => T;
}

export interface MaterialConnectionSubscription
  extends Promise<AsyncIterator<MaterialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MaterialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMaterialSubscription>() => T;
}

export interface MaterialEdge {
  node: Material;
  cursor: String;
}

export interface MaterialEdgePromise
  extends Promise<MaterialEdge>,
    Fragmentable {
  node: <T = MaterialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MaterialEdgeSubscription
  extends Promise<AsyncIterator<MaterialEdge>>,
    Fragmentable {
  node: <T = MaterialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMaterial {
  count: Int;
}

export interface AggregateMaterialPromise
  extends Promise<AggregateMaterial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMaterialSubscription
  extends Promise<AsyncIterator<AggregateMaterial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Message {
  id: ID_Output;
  data?: Json;
  createdAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PointConnection {
  pageInfo: PageInfo;
  edges: PointEdge[];
}

export interface PointConnectionPromise
  extends Promise<PointConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PointEdge>>() => T;
  aggregate: <T = AggregatePointPromise>() => T;
}

export interface PointConnectionSubscription
  extends Promise<AsyncIterator<PointConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PointEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePointSubscription>() => T;
}

export interface PointEdge {
  node: Point;
  cursor: String;
}

export interface PointEdgePromise extends Promise<PointEdge>, Fragmentable {
  node: <T = PointPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PointEdgeSubscription
  extends Promise<AsyncIterator<PointEdge>>,
    Fragmentable {
  node: <T = PointSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePoint {
  count: Int;
}

export interface AggregatePointPromise
  extends Promise<AggregatePoint>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePointSubscription
  extends Promise<AsyncIterator<AggregatePoint>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReportConnection {
  pageInfo: PageInfo;
  edges: ReportEdge[];
}

export interface ReportConnectionPromise
  extends Promise<ReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportEdge>>() => T;
  aggregate: <T = AggregateReportPromise>() => T;
}

export interface ReportConnectionSubscription
  extends Promise<AsyncIterator<ReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportSubscription>() => T;
}

export interface ReportEdge {
  node: Report;
  cursor: String;
}

export interface ReportEdgePromise extends Promise<ReportEdge>, Fragmentable {
  node: <T = ReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportEdgeSubscription
  extends Promise<AsyncIterator<ReportEdge>>,
    Fragmentable {
  node: <T = ReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReport {
  count: Int;
}

export interface AggregateReportPromise
  extends Promise<AggregateReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportSubscription
  extends Promise<AsyncIterator<AggregateReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SemesterConnection {
  pageInfo: PageInfo;
  edges: SemesterEdge[];
}

export interface SemesterConnectionPromise
  extends Promise<SemesterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SemesterEdge>>() => T;
  aggregate: <T = AggregateSemesterPromise>() => T;
}

export interface SemesterConnectionSubscription
  extends Promise<AsyncIterator<SemesterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SemesterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSemesterSubscription>() => T;
}

export interface SemesterEdge {
  node: Semester;
  cursor: String;
}

export interface SemesterEdgePromise
  extends Promise<SemesterEdge>,
    Fragmentable {
  node: <T = SemesterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SemesterEdgeSubscription
  extends Promise<AsyncIterator<SemesterEdge>>,
    Fragmentable {
  node: <T = SemesterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSemester {
  count: Int;
}

export interface AggregateSemesterPromise
  extends Promise<AggregateSemester>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSemesterSubscription
  extends Promise<AsyncIterator<AggregateSemester>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StudentConnection {
  pageInfo: PageInfo;
  edges: StudentEdge[];
}

export interface StudentConnectionPromise
  extends Promise<StudentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StudentEdge>>() => T;
  aggregate: <T = AggregateStudentPromise>() => T;
}

export interface StudentConnectionSubscription
  extends Promise<AsyncIterator<StudentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StudentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStudentSubscription>() => T;
}

export interface StudentEdge {
  node: Student;
  cursor: String;
}

export interface StudentEdgePromise extends Promise<StudentEdge>, Fragmentable {
  node: <T = StudentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StudentEdgeSubscription
  extends Promise<AsyncIterator<StudentEdge>>,
    Fragmentable {
  node: <T = StudentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStudent {
  count: Int;
}

export interface AggregateStudentPromise
  extends Promise<AggregateStudent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStudentSubscription
  extends Promise<AsyncIterator<AggregateStudent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role?: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Viewer {
  id: ID_Output;
  name?: String;
  createdAt: DateTimeOutput;
}

export interface ViewerPromise extends Promise<Viewer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ViewerSubscription
  extends Promise<AsyncIterator<Viewer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ViewerNullablePromise
  extends Promise<Viewer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ViewerConnection {
  pageInfo: PageInfo;
  edges: ViewerEdge[];
}

export interface ViewerConnectionPromise
  extends Promise<ViewerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ViewerEdge>>() => T;
  aggregate: <T = AggregateViewerPromise>() => T;
}

export interface ViewerConnectionSubscription
  extends Promise<AsyncIterator<ViewerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ViewerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateViewerSubscription>() => T;
}

export interface ViewerEdge {
  node: Viewer;
  cursor: String;
}

export interface ViewerEdgePromise extends Promise<ViewerEdge>, Fragmentable {
  node: <T = ViewerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ViewerEdgeSubscription
  extends Promise<AsyncIterator<ViewerEdge>>,
    Fragmentable {
  node: <T = ViewerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateViewer {
  count: Int;
}

export interface AggregateViewerPromise
  extends Promise<AggregateViewer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateViewerSubscription
  extends Promise<AsyncIterator<AggregateViewer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WordConnection {
  pageInfo: PageInfo;
  edges: WordEdge[];
}

export interface WordConnectionPromise
  extends Promise<WordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordEdge>>() => T;
  aggregate: <T = AggregateWordPromise>() => T;
}

export interface WordConnectionSubscription
  extends Promise<AsyncIterator<WordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordSubscription>() => T;
}

export interface WordEdge {
  node: Word;
  cursor: String;
}

export interface WordEdgePromise extends Promise<WordEdge>, Fragmentable {
  node: <T = WordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordEdgeSubscription
  extends Promise<AsyncIterator<WordEdge>>,
    Fragmentable {
  node: <T = WordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWord {
  count: Int;
}

export interface AggregateWordPromise
  extends Promise<AggregateWord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordSubscription
  extends Promise<AsyncIterator<AggregateWord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AttendanceSubscriptionPayload {
  mutation: MutationType;
  node: Attendance;
  updatedFields: String[];
  previousValues: AttendancePreviousValues;
}

export interface AttendanceSubscriptionPayloadPromise
  extends Promise<AttendanceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttendancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttendancePreviousValuesPromise>() => T;
}

export interface AttendanceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttendanceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttendanceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttendancePreviousValuesSubscription>() => T;
}

export interface AttendancePreviousValues {
  id: ID_Output;
  status: AttendanceStatus;
  arrivedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AttendancePreviousValuesPromise
  extends Promise<AttendancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<AttendanceStatus>;
  arrivedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AttendancePreviousValuesSubscription
  extends Promise<AsyncIterator<AttendancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<AttendanceStatus>>;
  arrivedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClassSessionSubscriptionPayload {
  mutation: MutationType;
  node: ClassSession;
  updatedFields: String[];
  previousValues: ClassSessionPreviousValues;
}

export interface ClassSessionSubscriptionPayloadPromise
  extends Promise<ClassSessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassSessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassSessionPreviousValuesPromise>() => T;
}

export interface ClassSessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassSessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassSessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassSessionPreviousValuesSubscription>() => T;
}

export interface ClassSessionPreviousValues {
  id: ID_Output;
  startsAt: DateTimeOutput;
  startedAt?: DateTimeOutput;
  endsAt: DateTimeOutput;
  endedAt?: DateTimeOutput;
  stage: Stage;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClassSessionPreviousValuesPromise
  extends Promise<ClassSessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startsAt: () => Promise<DateTimeOutput>;
  startedAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  endedAt: () => Promise<DateTimeOutput>;
  stage: () => Promise<Stage>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassSessionPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassSessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stage: () => Promise<AsyncIterator<Stage>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LessonSubscriptionPayload {
  mutation: MutationType;
  node: Lesson;
  updatedFields: String[];
  previousValues: LessonPreviousValues;
}

export interface LessonSubscriptionPayloadPromise
  extends Promise<LessonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LessonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LessonPreviousValuesPromise>() => T;
}

export interface LessonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LessonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LessonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LessonPreviousValuesSubscription>() => T;
}

export interface LessonPreviousValues {
  id: ID_Output;
  name: String;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
}

export interface LessonPreviousValuesPromise
  extends Promise<LessonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  homeworkEN: () => Promise<String>;
  homeworkZH: () => Promise<String>;
  summaryEN: () => Promise<String>;
  summaryZH: () => Promise<String>;
}

export interface LessonPreviousValuesSubscription
  extends Promise<AsyncIterator<LessonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  homeworkEN: () => Promise<AsyncIterator<String>>;
  homeworkZH: () => Promise<AsyncIterator<String>>;
  summaryEN: () => Promise<AsyncIterator<String>>;
  summaryZH: () => Promise<AsyncIterator<String>>;
}

export interface MaterialSubscriptionPayload {
  mutation: MutationType;
  node: Material;
  updatedFields: String[];
  previousValues: MaterialPreviousValues;
}

export interface MaterialSubscriptionPayloadPromise
  extends Promise<MaterialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MaterialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MaterialPreviousValuesPromise>() => T;
}

export interface MaterialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MaterialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MaterialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MaterialPreviousValuesSubscription>() => T;
}

export interface MaterialPreviousValues {
  id: ID_Output;
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface MaterialPreviousValuesPromise
  extends Promise<MaterialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  url: () => Promise<String>;
  title: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface MaterialPreviousValuesSubscription
  extends Promise<AsyncIterator<MaterialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  data?: Json;
  createdAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PointSubscriptionPayload {
  mutation: MutationType;
  node: Point;
  updatedFields: String[];
  previousValues: PointPreviousValues;
}

export interface PointSubscriptionPayloadPromise
  extends Promise<PointSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PointPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PointPreviousValuesPromise>() => T;
}

export interface PointSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PointSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PointSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PointPreviousValuesSubscription>() => T;
}

export interface PointPreviousValues {
  id: ID_Output;
  value: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PointPreviousValuesPromise
  extends Promise<PointPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PointPreviousValuesSubscription
  extends Promise<AsyncIterator<PointPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReportSubscriptionPayload {
  mutation: MutationType;
  node: Report;
  updatedFields: String[];
  previousValues: ReportPreviousValues;
}

export interface ReportSubscriptionPayloadPromise
  extends Promise<ReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportPreviousValuesPromise>() => T;
}

export interface ReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportPreviousValuesSubscription>() => T;
}

export interface ReportPreviousValues {
  id: ID_Output;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
  performance?: String;
  published: Boolean;
}

export interface ReportPreviousValuesPromise
  extends Promise<ReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  homeworkEN: () => Promise<String>;
  homeworkZH: () => Promise<String>;
  summaryEN: () => Promise<String>;
  summaryZH: () => Promise<String>;
  performance: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface ReportPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  homeworkEN: () => Promise<AsyncIterator<String>>;
  homeworkZH: () => Promise<AsyncIterator<String>>;
  summaryEN: () => Promise<AsyncIterator<String>>;
  summaryZH: () => Promise<AsyncIterator<String>>;
  performance: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface SemesterSubscriptionPayload {
  mutation: MutationType;
  node: Semester;
  updatedFields: String[];
  previousValues: SemesterPreviousValues;
}

export interface SemesterSubscriptionPayloadPromise
  extends Promise<SemesterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SemesterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SemesterPreviousValuesPromise>() => T;
}

export interface SemesterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SemesterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SemesterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SemesterPreviousValuesSubscription>() => T;
}

export interface SemesterPreviousValues {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SemesterPreviousValuesPromise
  extends Promise<SemesterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SemesterPreviousValuesSubscription
  extends Promise<AsyncIterator<SemesterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StudentSubscriptionPayload {
  mutation: MutationType;
  node: Student;
  updatedFields: String[];
  previousValues: StudentPreviousValues;
}

export interface StudentSubscriptionPayloadPromise
  extends Promise<StudentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StudentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StudentPreviousValuesPromise>() => T;
}

export interface StudentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StudentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StudentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StudentPreviousValuesSubscription>() => T;
}

export interface StudentPreviousValues {
  id: ID_Output;
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeOutput;
  gender?: Gender;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StudentPreviousValuesPromise
  extends Promise<StudentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chineseName: () => Promise<String>;
  englishName: () => Promise<String>;
  pinyinName: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StudentPreviousValuesSubscription
  extends Promise<AsyncIterator<StudentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chineseName: () => Promise<AsyncIterator<String>>;
  englishName: () => Promise<AsyncIterator<String>>;
  pinyinName: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role?: Role;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface ViewerSubscriptionPayload {
  mutation: MutationType;
  node: Viewer;
  updatedFields: String[];
  previousValues: ViewerPreviousValues;
}

export interface ViewerSubscriptionPayloadPromise
  extends Promise<ViewerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ViewerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ViewerPreviousValuesPromise>() => T;
}

export interface ViewerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ViewerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ViewerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ViewerPreviousValuesSubscription>() => T;
}

export interface ViewerPreviousValues {
  id: ID_Output;
  name?: String;
  createdAt: DateTimeOutput;
}

export interface ViewerPreviousValuesPromise
  extends Promise<ViewerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ViewerPreviousValuesSubscription
  extends Promise<AsyncIterator<ViewerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WordSubscriptionPayload {
  mutation: MutationType;
  node: Word;
  updatedFields: String[];
  previousValues: WordPreviousValues;
}

export interface WordSubscriptionPayloadPromise
  extends Promise<WordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordPreviousValuesPromise>() => T;
}

export interface WordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordPreviousValuesSubscription>() => T;
}

export interface WordPreviousValues {
  id: ID_Output;
  english: String;
  chinese?: String;
  audio?: String;
}

export interface WordPreviousValuesPromise
  extends Promise<WordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  chinese: () => Promise<String>;
  audio: () => Promise<String>;
}

export interface WordPreviousValuesSubscription
  extends Promise<AsyncIterator<WordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  english: () => Promise<AsyncIterator<String>>;
  chinese: () => Promise<AsyncIterator<String>>;
  audio: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Json = any;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Student",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "ClassSession",
    embedded: false
  },
  {
    name: "Report",
    embedded: false
  },
  {
    name: "Semester",
    embedded: false
  },
  {
    name: "Point",
    embedded: false
  },
  {
    name: "Stage",
    embedded: false
  },
  {
    name: "Attendance",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Lesson",
    embedded: false
  },
  {
    name: "Material",
    embedded: false
  },
  {
    name: "Word",
    embedded: false
  },
  {
    name: "AttendanceStatus",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Viewer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
