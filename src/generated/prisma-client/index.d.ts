// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  attendance: (where?: AttendanceWhereInput) => Promise<boolean>;
  classSession: (where?: ClassSessionWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  lesson: (where?: LessonWhereInput) => Promise<boolean>;
  material: (where?: MaterialWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  point: (where?: PointWhereInput) => Promise<boolean>;
  semester: (where?: SemesterWhereInput) => Promise<boolean>;
  student: (where?: StudentWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  viewer: (where?: ViewerWhereInput) => Promise<boolean>;
  word: (where?: WordWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attendance: (where: AttendanceWhereUniqueInput) => AttendancePromise;
  attendances: (args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attendance>;
  attendancesConnection: (args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttendanceConnectionPromise;
  classSession: (where: ClassSessionWhereUniqueInput) => ClassSessionPromise;
  classSessions: (args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ClassSession>;
  classSessionsConnection: (args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassSessionConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupPromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  lesson: (where: LessonWhereUniqueInput) => LessonPromise;
  lessons: (args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Lesson>;
  lessonsConnection: (args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LessonConnectionPromise;
  material: (where: MaterialWhereUniqueInput) => MaterialPromise;
  materials: (args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Material>;
  materialsConnection: (args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MaterialConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  point: (where: PointWhereUniqueInput) => PointPromise;
  points: (args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Point>;
  pointsConnection: (args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PointConnectionPromise;
  semester: (where: SemesterWhereUniqueInput) => SemesterPromise;
  semesters: (args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Semester>;
  semestersConnection: (args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SemesterConnectionPromise;
  student: (where: StudentWhereUniqueInput) => StudentPromise;
  students: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Student>;
  studentsConnection: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StudentConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagPromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  viewer: (where: ViewerWhereUniqueInput) => ViewerPromise;
  viewers: (args?: {
    where?: ViewerWhereInput;
    orderBy?: ViewerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Viewer>;
  viewersConnection: (args?: {
    where?: ViewerWhereInput;
    orderBy?: ViewerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ViewerConnectionPromise;
  word: (where: WordWhereUniqueInput) => WordPromise;
  words: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Word>;
  wordsConnection: (args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WordConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttendance: (data: AttendanceCreateInput) => AttendancePromise;
  updateAttendance: (args: {
    data: AttendanceUpdateInput;
    where: AttendanceWhereUniqueInput;
  }) => AttendancePromise;
  updateManyAttendances: (args: {
    data: AttendanceUpdateManyMutationInput;
    where?: AttendanceWhereInput;
  }) => BatchPayloadPromise;
  upsertAttendance: (args: {
    where: AttendanceWhereUniqueInput;
    create: AttendanceCreateInput;
    update: AttendanceUpdateInput;
  }) => AttendancePromise;
  deleteAttendance: (where: AttendanceWhereUniqueInput) => AttendancePromise;
  deleteManyAttendances: (where?: AttendanceWhereInput) => BatchPayloadPromise;
  createClassSession: (data: ClassSessionCreateInput) => ClassSessionPromise;
  updateClassSession: (args: {
    data: ClassSessionUpdateInput;
    where: ClassSessionWhereUniqueInput;
  }) => ClassSessionPromise;
  updateManyClassSessions: (args: {
    data: ClassSessionUpdateManyMutationInput;
    where?: ClassSessionWhereInput;
  }) => BatchPayloadPromise;
  upsertClassSession: (args: {
    where: ClassSessionWhereUniqueInput;
    create: ClassSessionCreateInput;
    update: ClassSessionUpdateInput;
  }) => ClassSessionPromise;
  deleteClassSession: (
    where: ClassSessionWhereUniqueInput
  ) => ClassSessionPromise;
  deleteManyClassSessions: (
    where?: ClassSessionWhereInput
  ) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createLesson: (data: LessonCreateInput) => LessonPromise;
  updateLesson: (args: {
    data: LessonUpdateInput;
    where: LessonWhereUniqueInput;
  }) => LessonPromise;
  updateManyLessons: (args: {
    data: LessonUpdateManyMutationInput;
    where?: LessonWhereInput;
  }) => BatchPayloadPromise;
  upsertLesson: (args: {
    where: LessonWhereUniqueInput;
    create: LessonCreateInput;
    update: LessonUpdateInput;
  }) => LessonPromise;
  deleteLesson: (where: LessonWhereUniqueInput) => LessonPromise;
  deleteManyLessons: (where?: LessonWhereInput) => BatchPayloadPromise;
  createMaterial: (data: MaterialCreateInput) => MaterialPromise;
  updateMaterial: (args: {
    data: MaterialUpdateInput;
    where: MaterialWhereUniqueInput;
  }) => MaterialPromise;
  updateManyMaterials: (args: {
    data: MaterialUpdateManyMutationInput;
    where?: MaterialWhereInput;
  }) => BatchPayloadPromise;
  upsertMaterial: (args: {
    where: MaterialWhereUniqueInput;
    create: MaterialCreateInput;
    update: MaterialUpdateInput;
  }) => MaterialPromise;
  deleteMaterial: (where: MaterialWhereUniqueInput) => MaterialPromise;
  deleteManyMaterials: (where?: MaterialWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createPoint: (data: PointCreateInput) => PointPromise;
  updatePoint: (args: {
    data: PointUpdateInput;
    where: PointWhereUniqueInput;
  }) => PointPromise;
  updateManyPoints: (args: {
    data: PointUpdateManyMutationInput;
    where?: PointWhereInput;
  }) => BatchPayloadPromise;
  upsertPoint: (args: {
    where: PointWhereUniqueInput;
    create: PointCreateInput;
    update: PointUpdateInput;
  }) => PointPromise;
  deletePoint: (where: PointWhereUniqueInput) => PointPromise;
  deleteManyPoints: (where?: PointWhereInput) => BatchPayloadPromise;
  createSemester: (data: SemesterCreateInput) => SemesterPromise;
  updateSemester: (args: {
    data: SemesterUpdateInput;
    where: SemesterWhereUniqueInput;
  }) => SemesterPromise;
  updateManySemesters: (args: {
    data: SemesterUpdateManyMutationInput;
    where?: SemesterWhereInput;
  }) => BatchPayloadPromise;
  upsertSemester: (args: {
    where: SemesterWhereUniqueInput;
    create: SemesterCreateInput;
    update: SemesterUpdateInput;
  }) => SemesterPromise;
  deleteSemester: (where: SemesterWhereUniqueInput) => SemesterPromise;
  deleteManySemesters: (where?: SemesterWhereInput) => BatchPayloadPromise;
  createStudent: (data: StudentCreateInput) => StudentPromise;
  updateStudent: (args: {
    data: StudentUpdateInput;
    where: StudentWhereUniqueInput;
  }) => StudentPromise;
  updateManyStudents: (args: {
    data: StudentUpdateManyMutationInput;
    where?: StudentWhereInput;
  }) => BatchPayloadPromise;
  upsertStudent: (args: {
    where: StudentWhereUniqueInput;
    create: StudentCreateInput;
    update: StudentUpdateInput;
  }) => StudentPromise;
  deleteStudent: (where: StudentWhereUniqueInput) => StudentPromise;
  deleteManyStudents: (where?: StudentWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createViewer: (data: ViewerCreateInput) => ViewerPromise;
  updateViewer: (args: {
    data: ViewerUpdateInput;
    where: ViewerWhereUniqueInput;
  }) => ViewerPromise;
  updateManyViewers: (args: {
    data: ViewerUpdateManyMutationInput;
    where?: ViewerWhereInput;
  }) => BatchPayloadPromise;
  upsertViewer: (args: {
    where: ViewerWhereUniqueInput;
    create: ViewerCreateInput;
    update: ViewerUpdateInput;
  }) => ViewerPromise;
  deleteViewer: (where: ViewerWhereUniqueInput) => ViewerPromise;
  deleteManyViewers: (where?: ViewerWhereInput) => BatchPayloadPromise;
  createWord: (data: WordCreateInput) => WordPromise;
  updateWord: (args: {
    data: WordUpdateInput;
    where: WordWhereUniqueInput;
  }) => WordPromise;
  updateManyWords: (args: {
    data: WordUpdateManyMutationInput;
    where?: WordWhereInput;
  }) => BatchPayloadPromise;
  upsertWord: (args: {
    where: WordWhereUniqueInput;
    create: WordCreateInput;
    update: WordUpdateInput;
  }) => WordPromise;
  deleteWord: (where: WordWhereUniqueInput) => WordPromise;
  deleteManyWords: (where?: WordWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attendance: (
    where?: AttendanceSubscriptionWhereInput
  ) => AttendanceSubscriptionPayloadSubscription;
  classSession: (
    where?: ClassSessionSubscriptionWhereInput
  ) => ClassSessionSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  lesson: (
    where?: LessonSubscriptionWhereInput
  ) => LessonSubscriptionPayloadSubscription;
  material: (
    where?: MaterialSubscriptionWhereInput
  ) => MaterialSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  point: (
    where?: PointSubscriptionWhereInput
  ) => PointSubscriptionPayloadSubscription;
  semester: (
    where?: SemesterSubscriptionWhereInput
  ) => SemesterSubscriptionPayloadSubscription;
  student: (
    where?: StudentSubscriptionWhereInput
  ) => StudentSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  viewer: (
    where?: ViewerSubscriptionWhereInput
  ) => ViewerSubscriptionPayloadSubscription;
  word: (
    where?: WordSubscriptionWhereInput
  ) => WordSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Gender = "M" | "F";

export type AttendanceStatus =
  | "Absent"
  | "Present"
  | "Late"
  | "LeftEarly"
  | "LateLeftEarly";

export type Stage = "Inactive" | "Active" | "Started" | "Ended";

export type StudentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "chineseName_ASC"
  | "chineseName_DESC"
  | "englishName_ASC"
  | "englishName_DESC"
  | "pinyinName_ASC"
  | "pinyinName_DESC"
  | "birthdate_ASC"
  | "birthdate_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PointOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttendanceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "arrivedAt_ASC"
  | "arrivedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClassSessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startsAt_ASC"
  | "startsAt_DESC"
  | "startedAt_ASC"
  | "startedAt_DESC"
  | "endsAt_ASC"
  | "endsAt_DESC"
  | "endedAt_ASC"
  | "endedAt_DESC"
  | "stage_ASC"
  | "stage_DESC"
  | "summary_EN_ASC"
  | "summary_EN_DESC"
  | "summary_ZH_ASC"
  | "summary_ZH_DESC"
  | "published_ASC"
  | "published_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type WordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "english_ASC"
  | "english_DESC"
  | "chinese_ASC"
  | "chinese_DESC"
  | "audio_ASC"
  | "audio_DESC";

export type LessonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "homeworkEN_ASC"
  | "homeworkEN_DESC"
  | "homeworkZH_ASC"
  | "homeworkZH_DESC"
  | "summaryEN_ASC"
  | "summaryEN_DESC"
  | "summaryZH_ASC"
  | "summaryZH_DESC";

export type MaterialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC"
  | "title_ASC"
  | "title_DESC"
  | "notes_ASC"
  | "notes_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "data_ASC"
  | "data_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SemesterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role = "Admin";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "role_ASC"
  | "role_DESC";

export type ViewerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AttendanceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StudentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  chineseName?: String;
  chineseName_not?: String;
  chineseName_in?: String[] | String;
  chineseName_not_in?: String[] | String;
  chineseName_lt?: String;
  chineseName_lte?: String;
  chineseName_gt?: String;
  chineseName_gte?: String;
  chineseName_contains?: String;
  chineseName_not_contains?: String;
  chineseName_starts_with?: String;
  chineseName_not_starts_with?: String;
  chineseName_ends_with?: String;
  chineseName_not_ends_with?: String;
  englishName?: String;
  englishName_not?: String;
  englishName_in?: String[] | String;
  englishName_not_in?: String[] | String;
  englishName_lt?: String;
  englishName_lte?: String;
  englishName_gt?: String;
  englishName_gte?: String;
  englishName_contains?: String;
  englishName_not_contains?: String;
  englishName_starts_with?: String;
  englishName_not_starts_with?: String;
  englishName_ends_with?: String;
  englishName_not_ends_with?: String;
  pinyinName?: String;
  pinyinName_not?: String;
  pinyinName_in?: String[] | String;
  pinyinName_not_in?: String[] | String;
  pinyinName_lt?: String;
  pinyinName_lte?: String;
  pinyinName_gt?: String;
  pinyinName_gte?: String;
  pinyinName_contains?: String;
  pinyinName_not_contains?: String;
  pinyinName_starts_with?: String;
  pinyinName_not_starts_with?: String;
  pinyinName_ends_with?: String;
  pinyinName_not_ends_with?: String;
  birthdate?: DateTimeInput;
  birthdate_not?: DateTimeInput;
  birthdate_in?: DateTimeInput[] | DateTimeInput;
  birthdate_not_in?: DateTimeInput[] | DateTimeInput;
  birthdate_lt?: DateTimeInput;
  birthdate_lte?: DateTimeInput;
  birthdate_gt?: DateTimeInput;
  birthdate_gte?: DateTimeInput;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  groups_every?: GroupWhereInput;
  groups_some?: GroupWhereInput;
  groups_none?: GroupWhereInput;
  points_every?: PointWhereInput;
  points_some?: PointWhereInput;
  points_none?: PointWhereInput;
  attendances_every?: AttendanceWhereInput;
  attendances_some?: AttendanceWhereInput;
  attendances_none?: AttendanceWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: StudentWhereInput[] | StudentWhereInput;
  OR?: StudentWhereInput[] | StudentWhereInput;
  NOT?: StudentWhereInput[] | StudentWhereInput;
}

export interface GroupWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  students_every?: StudentWhereInput;
  students_some?: StudentWhereInput;
  students_none?: StudentWhereInput;
  classSessions_every?: ClassSessionWhereInput;
  classSessions_some?: ClassSessionWhereInput;
  classSessions_none?: ClassSessionWhereInput;
  semester?: SemesterWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GroupWhereInput[] | GroupWhereInput;
  OR?: GroupWhereInput[] | GroupWhereInput;
  NOT?: GroupWhereInput[] | GroupWhereInput;
}

export interface ClassSessionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  startsAt?: DateTimeInput;
  startsAt_not?: DateTimeInput;
  startsAt_in?: DateTimeInput[] | DateTimeInput;
  startsAt_not_in?: DateTimeInput[] | DateTimeInput;
  startsAt_lt?: DateTimeInput;
  startsAt_lte?: DateTimeInput;
  startsAt_gt?: DateTimeInput;
  startsAt_gte?: DateTimeInput;
  startedAt?: DateTimeInput;
  startedAt_not?: DateTimeInput;
  startedAt_in?: DateTimeInput[] | DateTimeInput;
  startedAt_not_in?: DateTimeInput[] | DateTimeInput;
  startedAt_lt?: DateTimeInput;
  startedAt_lte?: DateTimeInput;
  startedAt_gt?: DateTimeInput;
  startedAt_gte?: DateTimeInput;
  endsAt?: DateTimeInput;
  endsAt_not?: DateTimeInput;
  endsAt_in?: DateTimeInput[] | DateTimeInput;
  endsAt_not_in?: DateTimeInput[] | DateTimeInput;
  endsAt_lt?: DateTimeInput;
  endsAt_lte?: DateTimeInput;
  endsAt_gt?: DateTimeInput;
  endsAt_gte?: DateTimeInput;
  endedAt?: DateTimeInput;
  endedAt_not?: DateTimeInput;
  endedAt_in?: DateTimeInput[] | DateTimeInput;
  endedAt_not_in?: DateTimeInput[] | DateTimeInput;
  endedAt_lt?: DateTimeInput;
  endedAt_lte?: DateTimeInput;
  endedAt_gt?: DateTimeInput;
  endedAt_gte?: DateTimeInput;
  group?: GroupWhereInput;
  points_every?: PointWhereInput;
  points_some?: PointWhereInput;
  points_none?: PointWhereInput;
  attendances_every?: AttendanceWhereInput;
  attendances_some?: AttendanceWhereInput;
  attendances_none?: AttendanceWhereInput;
  stage?: Stage;
  stage_not?: Stage;
  stage_in?: Stage[] | Stage;
  stage_not_in?: Stage[] | Stage;
  lesson?: LessonWhereInput;
  summary_EN?: String;
  summary_EN_not?: String;
  summary_EN_in?: String[] | String;
  summary_EN_not_in?: String[] | String;
  summary_EN_lt?: String;
  summary_EN_lte?: String;
  summary_EN_gt?: String;
  summary_EN_gte?: String;
  summary_EN_contains?: String;
  summary_EN_not_contains?: String;
  summary_EN_starts_with?: String;
  summary_EN_not_starts_with?: String;
  summary_EN_ends_with?: String;
  summary_EN_not_ends_with?: String;
  summary_ZH?: String;
  summary_ZH_not?: String;
  summary_ZH_in?: String[] | String;
  summary_ZH_not_in?: String[] | String;
  summary_ZH_lt?: String;
  summary_ZH_lte?: String;
  summary_ZH_gt?: String;
  summary_ZH_gte?: String;
  summary_ZH_contains?: String;
  summary_ZH_not_contains?: String;
  summary_ZH_starts_with?: String;
  summary_ZH_not_starts_with?: String;
  summary_ZH_ends_with?: String;
  summary_ZH_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ClassSessionWhereInput[] | ClassSessionWhereInput;
  OR?: ClassSessionWhereInput[] | ClassSessionWhereInput;
  NOT?: ClassSessionWhereInput[] | ClassSessionWhereInput;
}

export interface PointWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: Int;
  value_not?: Int;
  value_in?: Int[] | Int;
  value_not_in?: Int[] | Int;
  value_lt?: Int;
  value_lte?: Int;
  value_gt?: Int;
  value_gte?: Int;
  student?: StudentWhereInput;
  classSession?: ClassSessionWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PointWhereInput[] | PointWhereInput;
  OR?: PointWhereInput[] | PointWhereInput;
  NOT?: PointWhereInput[] | PointWhereInput;
}

export interface AttendanceWhereInput {
  classSession?: ClassSessionWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  student?: StudentWhereInput;
  status?: AttendanceStatus;
  status_not?: AttendanceStatus;
  status_in?: AttendanceStatus[] | AttendanceStatus;
  status_not_in?: AttendanceStatus[] | AttendanceStatus;
  arrivedAt?: DateTimeInput;
  arrivedAt_not?: DateTimeInput;
  arrivedAt_in?: DateTimeInput[] | DateTimeInput;
  arrivedAt_not_in?: DateTimeInput[] | DateTimeInput;
  arrivedAt_lt?: DateTimeInput;
  arrivedAt_lte?: DateTimeInput;
  arrivedAt_gt?: DateTimeInput;
  arrivedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: AttendanceWhereInput[] | AttendanceWhereInput;
  OR?: AttendanceWhereInput[] | AttendanceWhereInput;
  NOT?: AttendanceWhereInput[] | AttendanceWhereInput;
}

export interface LessonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  words_every?: WordWhereInput;
  words_some?: WordWhereInput;
  words_none?: WordWhereInput;
  homeworkEN?: String;
  homeworkEN_not?: String;
  homeworkEN_in?: String[] | String;
  homeworkEN_not_in?: String[] | String;
  homeworkEN_lt?: String;
  homeworkEN_lte?: String;
  homeworkEN_gt?: String;
  homeworkEN_gte?: String;
  homeworkEN_contains?: String;
  homeworkEN_not_contains?: String;
  homeworkEN_starts_with?: String;
  homeworkEN_not_starts_with?: String;
  homeworkEN_ends_with?: String;
  homeworkEN_not_ends_with?: String;
  homeworkZH?: String;
  homeworkZH_not?: String;
  homeworkZH_in?: String[] | String;
  homeworkZH_not_in?: String[] | String;
  homeworkZH_lt?: String;
  homeworkZH_lte?: String;
  homeworkZH_gt?: String;
  homeworkZH_gte?: String;
  homeworkZH_contains?: String;
  homeworkZH_not_contains?: String;
  homeworkZH_starts_with?: String;
  homeworkZH_not_starts_with?: String;
  homeworkZH_ends_with?: String;
  homeworkZH_not_ends_with?: String;
  summaryEN?: String;
  summaryEN_not?: String;
  summaryEN_in?: String[] | String;
  summaryEN_not_in?: String[] | String;
  summaryEN_lt?: String;
  summaryEN_lte?: String;
  summaryEN_gt?: String;
  summaryEN_gte?: String;
  summaryEN_contains?: String;
  summaryEN_not_contains?: String;
  summaryEN_starts_with?: String;
  summaryEN_not_starts_with?: String;
  summaryEN_ends_with?: String;
  summaryEN_not_ends_with?: String;
  summaryZH?: String;
  summaryZH_not?: String;
  summaryZH_in?: String[] | String;
  summaryZH_not_in?: String[] | String;
  summaryZH_lt?: String;
  summaryZH_lte?: String;
  summaryZH_gt?: String;
  summaryZH_gte?: String;
  summaryZH_contains?: String;
  summaryZH_not_contains?: String;
  summaryZH_starts_with?: String;
  summaryZH_not_starts_with?: String;
  summaryZH_ends_with?: String;
  summaryZH_not_ends_with?: String;
  materials_every?: MaterialWhereInput;
  materials_some?: MaterialWhereInput;
  materials_none?: MaterialWhereInput;
  AND?: LessonWhereInput[] | LessonWhereInput;
  OR?: LessonWhereInput[] | LessonWhereInput;
  NOT?: LessonWhereInput[] | LessonWhereInput;
}

export interface TagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: TagWhereInput[] | TagWhereInput;
  OR?: TagWhereInput[] | TagWhereInput;
  NOT?: TagWhereInput[] | TagWhereInput;
}

export interface WordWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  english?: String;
  english_not?: String;
  english_in?: String[] | String;
  english_not_in?: String[] | String;
  english_lt?: String;
  english_lte?: String;
  english_gt?: String;
  english_gte?: String;
  english_contains?: String;
  english_not_contains?: String;
  english_starts_with?: String;
  english_not_starts_with?: String;
  english_ends_with?: String;
  english_not_ends_with?: String;
  chinese?: String;
  chinese_not?: String;
  chinese_in?: String[] | String;
  chinese_not_in?: String[] | String;
  chinese_lt?: String;
  chinese_lte?: String;
  chinese_gt?: String;
  chinese_gte?: String;
  chinese_contains?: String;
  chinese_not_contains?: String;
  chinese_starts_with?: String;
  chinese_not_starts_with?: String;
  chinese_ends_with?: String;
  chinese_not_ends_with?: String;
  audio?: String;
  audio_not?: String;
  audio_in?: String[] | String;
  audio_not_in?: String[] | String;
  audio_lt?: String;
  audio_lte?: String;
  audio_gt?: String;
  audio_gte?: String;
  audio_contains?: String;
  audio_not_contains?: String;
  audio_starts_with?: String;
  audio_not_starts_with?: String;
  audio_ends_with?: String;
  audio_not_ends_with?: String;
  lessons_every?: LessonWhereInput;
  lessons_some?: LessonWhereInput;
  lessons_none?: LessonWhereInput;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  AND?: WordWhereInput[] | WordWhereInput;
  OR?: WordWhereInput[] | WordWhereInput;
  NOT?: WordWhereInput[] | WordWhereInput;
}

export interface MaterialWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  AND?: MaterialWhereInput[] | MaterialWhereInput;
  OR?: MaterialWhereInput[] | MaterialWhereInput;
  NOT?: MaterialWhereInput[] | MaterialWhereInput;
}

export interface SemesterWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  endDate?: DateTimeInput;
  endDate_not?: DateTimeInput;
  endDate_in?: DateTimeInput[] | DateTimeInput;
  endDate_not_in?: DateTimeInput[] | DateTimeInput;
  endDate_lt?: DateTimeInput;
  endDate_lte?: DateTimeInput;
  endDate_gt?: DateTimeInput;
  endDate_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  groups_every?: GroupWhereInput;
  groups_some?: GroupWhereInput;
  groups_none?: GroupWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SemesterWhereInput[] | SemesterWhereInput;
  OR?: SemesterWhereInput[] | SemesterWhereInput;
  NOT?: SemesterWhereInput[] | SemesterWhereInput;
}

export type ClassSessionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type GroupWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type LessonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MaterialWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export type PointWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type SemesterWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export type StudentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type ViewerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ViewerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: ViewerWhereInput[] | ViewerWhereInput;
  OR?: ViewerWhereInput[] | ViewerWhereInput;
  NOT?: ViewerWhereInput[] | ViewerWhereInput;
}

export type WordWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AttendanceCreateInput {
  classSession: ClassSessionCreateOneWithoutAttendancesInput;
  id?: ID_Input;
  student: StudentCreateOneWithoutAttendancesInput;
  status: AttendanceStatus;
  arrivedAt?: DateTimeInput;
}

export interface ClassSessionCreateOneWithoutAttendancesInput {
  create?: ClassSessionCreateWithoutAttendancesInput;
  connect?: ClassSessionWhereUniqueInput;
}

export interface ClassSessionCreateWithoutAttendancesInput {
  id?: ID_Input;
  startsAt: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt: DateTimeInput;
  endedAt?: DateTimeInput;
  group: GroupCreateOneWithoutClassSessionsInput;
  points?: PointCreateManyWithoutClassSessionInput;
  stage?: Stage;
  lesson?: LessonCreateOneInput;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface GroupCreateOneWithoutClassSessionsInput {
  create?: GroupCreateWithoutClassSessionsInput;
  connect?: GroupWhereUniqueInput;
}

export interface GroupCreateWithoutClassSessionsInput {
  id?: ID_Input;
  name: String;
  students?: StudentCreateManyWithoutGroupsInput;
  semester: SemesterCreateOneWithoutGroupsInput;
}

export interface StudentCreateManyWithoutGroupsInput {
  create?: StudentCreateWithoutGroupsInput[] | StudentCreateWithoutGroupsInput;
  connect?: StudentWhereUniqueInput[] | StudentWhereUniqueInput;
}

export interface StudentCreateWithoutGroupsInput {
  id?: ID_Input;
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
  points?: PointCreateManyWithoutStudentInput;
  attendances?: AttendanceCreateManyWithoutStudentInput;
}

export interface PointCreateManyWithoutStudentInput {
  create?: PointCreateWithoutStudentInput[] | PointCreateWithoutStudentInput;
  connect?: PointWhereUniqueInput[] | PointWhereUniqueInput;
}

export interface PointCreateWithoutStudentInput {
  id?: ID_Input;
  value: Int;
  classSession: ClassSessionCreateOneWithoutPointsInput;
}

export interface ClassSessionCreateOneWithoutPointsInput {
  create?: ClassSessionCreateWithoutPointsInput;
  connect?: ClassSessionWhereUniqueInput;
}

export interface ClassSessionCreateWithoutPointsInput {
  id?: ID_Input;
  startsAt: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt: DateTimeInput;
  endedAt?: DateTimeInput;
  group: GroupCreateOneWithoutClassSessionsInput;
  attendances?: AttendanceCreateManyWithoutClassSessionInput;
  stage?: Stage;
  lesson?: LessonCreateOneInput;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface AttendanceCreateManyWithoutClassSessionInput {
  create?:
    | AttendanceCreateWithoutClassSessionInput[]
    | AttendanceCreateWithoutClassSessionInput;
  connect?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
}

export interface AttendanceCreateWithoutClassSessionInput {
  id?: ID_Input;
  student: StudentCreateOneWithoutAttendancesInput;
  status: AttendanceStatus;
  arrivedAt?: DateTimeInput;
}

export interface StudentCreateOneWithoutAttendancesInput {
  create?: StudentCreateWithoutAttendancesInput;
  connect?: StudentWhereUniqueInput;
}

export interface StudentCreateWithoutAttendancesInput {
  id?: ID_Input;
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
  groups?: GroupCreateManyWithoutStudentsInput;
  points?: PointCreateManyWithoutStudentInput;
}

export interface GroupCreateManyWithoutStudentsInput {
  create?: GroupCreateWithoutStudentsInput[] | GroupCreateWithoutStudentsInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
}

export interface GroupCreateWithoutStudentsInput {
  id?: ID_Input;
  name: String;
  classSessions?: ClassSessionCreateManyWithoutGroupInput;
  semester: SemesterCreateOneWithoutGroupsInput;
}

export interface ClassSessionCreateManyWithoutGroupInput {
  create?:
    | ClassSessionCreateWithoutGroupInput[]
    | ClassSessionCreateWithoutGroupInput;
  connect?: ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput;
}

export interface ClassSessionCreateWithoutGroupInput {
  id?: ID_Input;
  startsAt: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt: DateTimeInput;
  endedAt?: DateTimeInput;
  points?: PointCreateManyWithoutClassSessionInput;
  attendances?: AttendanceCreateManyWithoutClassSessionInput;
  stage?: Stage;
  lesson?: LessonCreateOneInput;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface PointCreateManyWithoutClassSessionInput {
  create?:
    | PointCreateWithoutClassSessionInput[]
    | PointCreateWithoutClassSessionInput;
  connect?: PointWhereUniqueInput[] | PointWhereUniqueInput;
}

export interface PointCreateWithoutClassSessionInput {
  id?: ID_Input;
  value: Int;
  student: StudentCreateOneWithoutPointsInput;
}

export interface StudentCreateOneWithoutPointsInput {
  create?: StudentCreateWithoutPointsInput;
  connect?: StudentWhereUniqueInput;
}

export interface StudentCreateWithoutPointsInput {
  id?: ID_Input;
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
  groups?: GroupCreateManyWithoutStudentsInput;
  attendances?: AttendanceCreateManyWithoutStudentInput;
}

export interface AttendanceCreateManyWithoutStudentInput {
  create?:
    | AttendanceCreateWithoutStudentInput[]
    | AttendanceCreateWithoutStudentInput;
  connect?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
}

export interface AttendanceCreateWithoutStudentInput {
  classSession: ClassSessionCreateOneWithoutAttendancesInput;
  id?: ID_Input;
  status: AttendanceStatus;
  arrivedAt?: DateTimeInput;
}

export interface LessonCreateOneInput {
  create?: LessonCreateInput;
  connect?: LessonWhereUniqueInput;
}

export interface LessonCreateInput {
  id?: ID_Input;
  name: String;
  tags?: TagCreateManyInput;
  words?: WordCreateManyWithoutLessonsInput;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
  materials?: MaterialCreateManyInput;
}

export interface TagCreateManyInput {
  create?: TagCreateInput[] | TagCreateInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface TagCreateInput {
  id?: ID_Input;
  name: String;
}

export interface WordCreateManyWithoutLessonsInput {
  create?: WordCreateWithoutLessonsInput[] | WordCreateWithoutLessonsInput;
  connect?: WordWhereUniqueInput[] | WordWhereUniqueInput;
}

export interface WordCreateWithoutLessonsInput {
  id?: ID_Input;
  english: String;
  chinese?: String;
  audio?: String;
  tags?: TagCreateManyInput;
}

export interface MaterialCreateManyInput {
  create?: MaterialCreateInput[] | MaterialCreateInput;
  connect?: MaterialWhereUniqueInput[] | MaterialWhereUniqueInput;
}

export interface MaterialCreateInput {
  id?: ID_Input;
  tags?: TagCreateManyInput;
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface SemesterCreateOneWithoutGroupsInput {
  create?: SemesterCreateWithoutGroupsInput;
  connect?: SemesterWhereUniqueInput;
}

export interface SemesterCreateWithoutGroupsInput {
  id?: ID_Input;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  name: String;
}

export interface AttendanceUpdateInput {
  classSession?: ClassSessionUpdateOneRequiredWithoutAttendancesInput;
  student?: StudentUpdateOneRequiredWithoutAttendancesInput;
  status?: AttendanceStatus;
  arrivedAt?: DateTimeInput;
}

export interface ClassSessionUpdateOneRequiredWithoutAttendancesInput {
  create?: ClassSessionCreateWithoutAttendancesInput;
  update?: ClassSessionUpdateWithoutAttendancesDataInput;
  upsert?: ClassSessionUpsertWithoutAttendancesInput;
  connect?: ClassSessionWhereUniqueInput;
}

export interface ClassSessionUpdateWithoutAttendancesDataInput {
  startsAt?: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  endedAt?: DateTimeInput;
  group?: GroupUpdateOneRequiredWithoutClassSessionsInput;
  points?: PointUpdateManyWithoutClassSessionInput;
  stage?: Stage;
  lesson?: LessonUpdateOneInput;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface GroupUpdateOneRequiredWithoutClassSessionsInput {
  create?: GroupCreateWithoutClassSessionsInput;
  update?: GroupUpdateWithoutClassSessionsDataInput;
  upsert?: GroupUpsertWithoutClassSessionsInput;
  connect?: GroupWhereUniqueInput;
}

export interface GroupUpdateWithoutClassSessionsDataInput {
  name?: String;
  students?: StudentUpdateManyWithoutGroupsInput;
  semester?: SemesterUpdateOneRequiredWithoutGroupsInput;
}

export interface StudentUpdateManyWithoutGroupsInput {
  create?: StudentCreateWithoutGroupsInput[] | StudentCreateWithoutGroupsInput;
  delete?: StudentWhereUniqueInput[] | StudentWhereUniqueInput;
  connect?: StudentWhereUniqueInput[] | StudentWhereUniqueInput;
  set?: StudentWhereUniqueInput[] | StudentWhereUniqueInput;
  disconnect?: StudentWhereUniqueInput[] | StudentWhereUniqueInput;
  update?:
    | StudentUpdateWithWhereUniqueWithoutGroupsInput[]
    | StudentUpdateWithWhereUniqueWithoutGroupsInput;
  upsert?:
    | StudentUpsertWithWhereUniqueWithoutGroupsInput[]
    | StudentUpsertWithWhereUniqueWithoutGroupsInput;
  deleteMany?: StudentScalarWhereInput[] | StudentScalarWhereInput;
  updateMany?:
    | StudentUpdateManyWithWhereNestedInput[]
    | StudentUpdateManyWithWhereNestedInput;
}

export interface StudentUpdateWithWhereUniqueWithoutGroupsInput {
  where: StudentWhereUniqueInput;
  data: StudentUpdateWithoutGroupsDataInput;
}

export interface StudentUpdateWithoutGroupsDataInput {
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
  points?: PointUpdateManyWithoutStudentInput;
  attendances?: AttendanceUpdateManyWithoutStudentInput;
}

export interface PointUpdateManyWithoutStudentInput {
  create?: PointCreateWithoutStudentInput[] | PointCreateWithoutStudentInput;
  delete?: PointWhereUniqueInput[] | PointWhereUniqueInput;
  connect?: PointWhereUniqueInput[] | PointWhereUniqueInput;
  set?: PointWhereUniqueInput[] | PointWhereUniqueInput;
  disconnect?: PointWhereUniqueInput[] | PointWhereUniqueInput;
  update?:
    | PointUpdateWithWhereUniqueWithoutStudentInput[]
    | PointUpdateWithWhereUniqueWithoutStudentInput;
  upsert?:
    | PointUpsertWithWhereUniqueWithoutStudentInput[]
    | PointUpsertWithWhereUniqueWithoutStudentInput;
  deleteMany?: PointScalarWhereInput[] | PointScalarWhereInput;
  updateMany?:
    | PointUpdateManyWithWhereNestedInput[]
    | PointUpdateManyWithWhereNestedInput;
}

export interface PointUpdateWithWhereUniqueWithoutStudentInput {
  where: PointWhereUniqueInput;
  data: PointUpdateWithoutStudentDataInput;
}

export interface PointUpdateWithoutStudentDataInput {
  value?: Int;
  classSession?: ClassSessionUpdateOneRequiredWithoutPointsInput;
}

export interface ClassSessionUpdateOneRequiredWithoutPointsInput {
  create?: ClassSessionCreateWithoutPointsInput;
  update?: ClassSessionUpdateWithoutPointsDataInput;
  upsert?: ClassSessionUpsertWithoutPointsInput;
  connect?: ClassSessionWhereUniqueInput;
}

export interface ClassSessionUpdateWithoutPointsDataInput {
  startsAt?: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  endedAt?: DateTimeInput;
  group?: GroupUpdateOneRequiredWithoutClassSessionsInput;
  attendances?: AttendanceUpdateManyWithoutClassSessionInput;
  stage?: Stage;
  lesson?: LessonUpdateOneInput;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface AttendanceUpdateManyWithoutClassSessionInput {
  create?:
    | AttendanceCreateWithoutClassSessionInput[]
    | AttendanceCreateWithoutClassSessionInput;
  delete?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
  connect?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
  set?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
  disconnect?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
  update?:
    | AttendanceUpdateWithWhereUniqueWithoutClassSessionInput[]
    | AttendanceUpdateWithWhereUniqueWithoutClassSessionInput;
  upsert?:
    | AttendanceUpsertWithWhereUniqueWithoutClassSessionInput[]
    | AttendanceUpsertWithWhereUniqueWithoutClassSessionInput;
  deleteMany?: AttendanceScalarWhereInput[] | AttendanceScalarWhereInput;
  updateMany?:
    | AttendanceUpdateManyWithWhereNestedInput[]
    | AttendanceUpdateManyWithWhereNestedInput;
}

export interface AttendanceUpdateWithWhereUniqueWithoutClassSessionInput {
  where: AttendanceWhereUniqueInput;
  data: AttendanceUpdateWithoutClassSessionDataInput;
}

export interface AttendanceUpdateWithoutClassSessionDataInput {
  student?: StudentUpdateOneRequiredWithoutAttendancesInput;
  status?: AttendanceStatus;
  arrivedAt?: DateTimeInput;
}

export interface StudentUpdateOneRequiredWithoutAttendancesInput {
  create?: StudentCreateWithoutAttendancesInput;
  update?: StudentUpdateWithoutAttendancesDataInput;
  upsert?: StudentUpsertWithoutAttendancesInput;
  connect?: StudentWhereUniqueInput;
}

export interface StudentUpdateWithoutAttendancesDataInput {
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
  groups?: GroupUpdateManyWithoutStudentsInput;
  points?: PointUpdateManyWithoutStudentInput;
}

export interface GroupUpdateManyWithoutStudentsInput {
  create?: GroupCreateWithoutStudentsInput[] | GroupCreateWithoutStudentsInput;
  delete?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  set?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  disconnect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  update?:
    | GroupUpdateWithWhereUniqueWithoutStudentsInput[]
    | GroupUpdateWithWhereUniqueWithoutStudentsInput;
  upsert?:
    | GroupUpsertWithWhereUniqueWithoutStudentsInput[]
    | GroupUpsertWithWhereUniqueWithoutStudentsInput;
  deleteMany?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  updateMany?:
    | GroupUpdateManyWithWhereNestedInput[]
    | GroupUpdateManyWithWhereNestedInput;
}

export interface GroupUpdateWithWhereUniqueWithoutStudentsInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutStudentsDataInput;
}

export interface GroupUpdateWithoutStudentsDataInput {
  name?: String;
  classSessions?: ClassSessionUpdateManyWithoutGroupInput;
  semester?: SemesterUpdateOneRequiredWithoutGroupsInput;
}

export interface ClassSessionUpdateManyWithoutGroupInput {
  create?:
    | ClassSessionCreateWithoutGroupInput[]
    | ClassSessionCreateWithoutGroupInput;
  delete?: ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput;
  connect?: ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput;
  set?: ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput;
  disconnect?: ClassSessionWhereUniqueInput[] | ClassSessionWhereUniqueInput;
  update?:
    | ClassSessionUpdateWithWhereUniqueWithoutGroupInput[]
    | ClassSessionUpdateWithWhereUniqueWithoutGroupInput;
  upsert?:
    | ClassSessionUpsertWithWhereUniqueWithoutGroupInput[]
    | ClassSessionUpsertWithWhereUniqueWithoutGroupInput;
  deleteMany?: ClassSessionScalarWhereInput[] | ClassSessionScalarWhereInput;
  updateMany?:
    | ClassSessionUpdateManyWithWhereNestedInput[]
    | ClassSessionUpdateManyWithWhereNestedInput;
}

export interface ClassSessionUpdateWithWhereUniqueWithoutGroupInput {
  where: ClassSessionWhereUniqueInput;
  data: ClassSessionUpdateWithoutGroupDataInput;
}

export interface ClassSessionUpdateWithoutGroupDataInput {
  startsAt?: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  endedAt?: DateTimeInput;
  points?: PointUpdateManyWithoutClassSessionInput;
  attendances?: AttendanceUpdateManyWithoutClassSessionInput;
  stage?: Stage;
  lesson?: LessonUpdateOneInput;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface PointUpdateManyWithoutClassSessionInput {
  create?:
    | PointCreateWithoutClassSessionInput[]
    | PointCreateWithoutClassSessionInput;
  delete?: PointWhereUniqueInput[] | PointWhereUniqueInput;
  connect?: PointWhereUniqueInput[] | PointWhereUniqueInput;
  set?: PointWhereUniqueInput[] | PointWhereUniqueInput;
  disconnect?: PointWhereUniqueInput[] | PointWhereUniqueInput;
  update?:
    | PointUpdateWithWhereUniqueWithoutClassSessionInput[]
    | PointUpdateWithWhereUniqueWithoutClassSessionInput;
  upsert?:
    | PointUpsertWithWhereUniqueWithoutClassSessionInput[]
    | PointUpsertWithWhereUniqueWithoutClassSessionInput;
  deleteMany?: PointScalarWhereInput[] | PointScalarWhereInput;
  updateMany?:
    | PointUpdateManyWithWhereNestedInput[]
    | PointUpdateManyWithWhereNestedInput;
}

export interface PointUpdateWithWhereUniqueWithoutClassSessionInput {
  where: PointWhereUniqueInput;
  data: PointUpdateWithoutClassSessionDataInput;
}

export interface PointUpdateWithoutClassSessionDataInput {
  value?: Int;
  student?: StudentUpdateOneRequiredWithoutPointsInput;
}

export interface StudentUpdateOneRequiredWithoutPointsInput {
  create?: StudentCreateWithoutPointsInput;
  update?: StudentUpdateWithoutPointsDataInput;
  upsert?: StudentUpsertWithoutPointsInput;
  connect?: StudentWhereUniqueInput;
}

export interface StudentUpdateWithoutPointsDataInput {
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
  groups?: GroupUpdateManyWithoutStudentsInput;
  attendances?: AttendanceUpdateManyWithoutStudentInput;
}

export interface AttendanceUpdateManyWithoutStudentInput {
  create?:
    | AttendanceCreateWithoutStudentInput[]
    | AttendanceCreateWithoutStudentInput;
  delete?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
  connect?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
  set?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
  disconnect?: AttendanceWhereUniqueInput[] | AttendanceWhereUniqueInput;
  update?:
    | AttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    | AttendanceUpdateWithWhereUniqueWithoutStudentInput;
  upsert?:
    | AttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    | AttendanceUpsertWithWhereUniqueWithoutStudentInput;
  deleteMany?: AttendanceScalarWhereInput[] | AttendanceScalarWhereInput;
  updateMany?:
    | AttendanceUpdateManyWithWhereNestedInput[]
    | AttendanceUpdateManyWithWhereNestedInput;
}

export interface AttendanceUpdateWithWhereUniqueWithoutStudentInput {
  where: AttendanceWhereUniqueInput;
  data: AttendanceUpdateWithoutStudentDataInput;
}

export interface AttendanceUpdateWithoutStudentDataInput {
  classSession?: ClassSessionUpdateOneRequiredWithoutAttendancesInput;
  status?: AttendanceStatus;
  arrivedAt?: DateTimeInput;
}

export interface AttendanceUpsertWithWhereUniqueWithoutStudentInput {
  where: AttendanceWhereUniqueInput;
  update: AttendanceUpdateWithoutStudentDataInput;
  create: AttendanceCreateWithoutStudentInput;
}

export interface AttendanceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  status?: AttendanceStatus;
  status_not?: AttendanceStatus;
  status_in?: AttendanceStatus[] | AttendanceStatus;
  status_not_in?: AttendanceStatus[] | AttendanceStatus;
  arrivedAt?: DateTimeInput;
  arrivedAt_not?: DateTimeInput;
  arrivedAt_in?: DateTimeInput[] | DateTimeInput;
  arrivedAt_not_in?: DateTimeInput[] | DateTimeInput;
  arrivedAt_lt?: DateTimeInput;
  arrivedAt_lte?: DateTimeInput;
  arrivedAt_gt?: DateTimeInput;
  arrivedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: AttendanceScalarWhereInput[] | AttendanceScalarWhereInput;
  OR?: AttendanceScalarWhereInput[] | AttendanceScalarWhereInput;
  NOT?: AttendanceScalarWhereInput[] | AttendanceScalarWhereInput;
}

export interface AttendanceUpdateManyWithWhereNestedInput {
  where: AttendanceScalarWhereInput;
  data: AttendanceUpdateManyDataInput;
}

export interface AttendanceUpdateManyDataInput {
  status?: AttendanceStatus;
  arrivedAt?: DateTimeInput;
}

export interface StudentUpsertWithoutPointsInput {
  update: StudentUpdateWithoutPointsDataInput;
  create: StudentCreateWithoutPointsInput;
}

export interface PointUpsertWithWhereUniqueWithoutClassSessionInput {
  where: PointWhereUniqueInput;
  update: PointUpdateWithoutClassSessionDataInput;
  create: PointCreateWithoutClassSessionInput;
}

export interface PointScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: Int;
  value_not?: Int;
  value_in?: Int[] | Int;
  value_not_in?: Int[] | Int;
  value_lt?: Int;
  value_lte?: Int;
  value_gt?: Int;
  value_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PointScalarWhereInput[] | PointScalarWhereInput;
  OR?: PointScalarWhereInput[] | PointScalarWhereInput;
  NOT?: PointScalarWhereInput[] | PointScalarWhereInput;
}

export interface PointUpdateManyWithWhereNestedInput {
  where: PointScalarWhereInput;
  data: PointUpdateManyDataInput;
}

export interface PointUpdateManyDataInput {
  value?: Int;
}

export interface LessonUpdateOneInput {
  create?: LessonCreateInput;
  update?: LessonUpdateDataInput;
  upsert?: LessonUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LessonWhereUniqueInput;
}

export interface LessonUpdateDataInput {
  name?: String;
  tags?: TagUpdateManyInput;
  words?: WordUpdateManyWithoutLessonsInput;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
  materials?: MaterialUpdateManyInput;
}

export interface TagUpdateManyInput {
  create?: TagCreateInput[] | TagCreateInput;
  update?:
    | TagUpdateWithWhereUniqueNestedInput[]
    | TagUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TagUpsertWithWhereUniqueNestedInput[]
    | TagUpsertWithWhereUniqueNestedInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  set?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  deleteMany?: TagScalarWhereInput[] | TagScalarWhereInput;
  updateMany?:
    | TagUpdateManyWithWhereNestedInput[]
    | TagUpdateManyWithWhereNestedInput;
}

export interface TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  data: TagUpdateDataInput;
}

export interface TagUpdateDataInput {
  name?: String;
}

export interface TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  update: TagUpdateDataInput;
  create: TagCreateInput;
}

export interface TagScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: TagScalarWhereInput[] | TagScalarWhereInput;
  OR?: TagScalarWhereInput[] | TagScalarWhereInput;
  NOT?: TagScalarWhereInput[] | TagScalarWhereInput;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  name?: String;
}

export interface WordUpdateManyWithoutLessonsInput {
  create?: WordCreateWithoutLessonsInput[] | WordCreateWithoutLessonsInput;
  delete?: WordWhereUniqueInput[] | WordWhereUniqueInput;
  connect?: WordWhereUniqueInput[] | WordWhereUniqueInput;
  set?: WordWhereUniqueInput[] | WordWhereUniqueInput;
  disconnect?: WordWhereUniqueInput[] | WordWhereUniqueInput;
  update?:
    | WordUpdateWithWhereUniqueWithoutLessonsInput[]
    | WordUpdateWithWhereUniqueWithoutLessonsInput;
  upsert?:
    | WordUpsertWithWhereUniqueWithoutLessonsInput[]
    | WordUpsertWithWhereUniqueWithoutLessonsInput;
  deleteMany?: WordScalarWhereInput[] | WordScalarWhereInput;
  updateMany?:
    | WordUpdateManyWithWhereNestedInput[]
    | WordUpdateManyWithWhereNestedInput;
}

export interface WordUpdateWithWhereUniqueWithoutLessonsInput {
  where: WordWhereUniqueInput;
  data: WordUpdateWithoutLessonsDataInput;
}

export interface WordUpdateWithoutLessonsDataInput {
  english?: String;
  chinese?: String;
  audio?: String;
  tags?: TagUpdateManyInput;
}

export interface WordUpsertWithWhereUniqueWithoutLessonsInput {
  where: WordWhereUniqueInput;
  update: WordUpdateWithoutLessonsDataInput;
  create: WordCreateWithoutLessonsInput;
}

export interface WordScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  english?: String;
  english_not?: String;
  english_in?: String[] | String;
  english_not_in?: String[] | String;
  english_lt?: String;
  english_lte?: String;
  english_gt?: String;
  english_gte?: String;
  english_contains?: String;
  english_not_contains?: String;
  english_starts_with?: String;
  english_not_starts_with?: String;
  english_ends_with?: String;
  english_not_ends_with?: String;
  chinese?: String;
  chinese_not?: String;
  chinese_in?: String[] | String;
  chinese_not_in?: String[] | String;
  chinese_lt?: String;
  chinese_lte?: String;
  chinese_gt?: String;
  chinese_gte?: String;
  chinese_contains?: String;
  chinese_not_contains?: String;
  chinese_starts_with?: String;
  chinese_not_starts_with?: String;
  chinese_ends_with?: String;
  chinese_not_ends_with?: String;
  audio?: String;
  audio_not?: String;
  audio_in?: String[] | String;
  audio_not_in?: String[] | String;
  audio_lt?: String;
  audio_lte?: String;
  audio_gt?: String;
  audio_gte?: String;
  audio_contains?: String;
  audio_not_contains?: String;
  audio_starts_with?: String;
  audio_not_starts_with?: String;
  audio_ends_with?: String;
  audio_not_ends_with?: String;
  AND?: WordScalarWhereInput[] | WordScalarWhereInput;
  OR?: WordScalarWhereInput[] | WordScalarWhereInput;
  NOT?: WordScalarWhereInput[] | WordScalarWhereInput;
}

export interface WordUpdateManyWithWhereNestedInput {
  where: WordScalarWhereInput;
  data: WordUpdateManyDataInput;
}

export interface WordUpdateManyDataInput {
  english?: String;
  chinese?: String;
  audio?: String;
}

export interface MaterialUpdateManyInput {
  create?: MaterialCreateInput[] | MaterialCreateInput;
  update?:
    | MaterialUpdateWithWhereUniqueNestedInput[]
    | MaterialUpdateWithWhereUniqueNestedInput;
  upsert?:
    | MaterialUpsertWithWhereUniqueNestedInput[]
    | MaterialUpsertWithWhereUniqueNestedInput;
  delete?: MaterialWhereUniqueInput[] | MaterialWhereUniqueInput;
  connect?: MaterialWhereUniqueInput[] | MaterialWhereUniqueInput;
  set?: MaterialWhereUniqueInput[] | MaterialWhereUniqueInput;
  disconnect?: MaterialWhereUniqueInput[] | MaterialWhereUniqueInput;
  deleteMany?: MaterialScalarWhereInput[] | MaterialScalarWhereInput;
  updateMany?:
    | MaterialUpdateManyWithWhereNestedInput[]
    | MaterialUpdateManyWithWhereNestedInput;
}

export interface MaterialUpdateWithWhereUniqueNestedInput {
  where: MaterialWhereUniqueInput;
  data: MaterialUpdateDataInput;
}

export interface MaterialUpdateDataInput {
  tags?: TagUpdateManyInput;
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface MaterialUpsertWithWhereUniqueNestedInput {
  where: MaterialWhereUniqueInput;
  update: MaterialUpdateDataInput;
  create: MaterialCreateInput;
}

export interface MaterialScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  AND?: MaterialScalarWhereInput[] | MaterialScalarWhereInput;
  OR?: MaterialScalarWhereInput[] | MaterialScalarWhereInput;
  NOT?: MaterialScalarWhereInput[] | MaterialScalarWhereInput;
}

export interface MaterialUpdateManyWithWhereNestedInput {
  where: MaterialScalarWhereInput;
  data: MaterialUpdateManyDataInput;
}

export interface MaterialUpdateManyDataInput {
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface LessonUpsertNestedInput {
  update: LessonUpdateDataInput;
  create: LessonCreateInput;
}

export interface ClassSessionUpsertWithWhereUniqueWithoutGroupInput {
  where: ClassSessionWhereUniqueInput;
  update: ClassSessionUpdateWithoutGroupDataInput;
  create: ClassSessionCreateWithoutGroupInput;
}

export interface ClassSessionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  startsAt?: DateTimeInput;
  startsAt_not?: DateTimeInput;
  startsAt_in?: DateTimeInput[] | DateTimeInput;
  startsAt_not_in?: DateTimeInput[] | DateTimeInput;
  startsAt_lt?: DateTimeInput;
  startsAt_lte?: DateTimeInput;
  startsAt_gt?: DateTimeInput;
  startsAt_gte?: DateTimeInput;
  startedAt?: DateTimeInput;
  startedAt_not?: DateTimeInput;
  startedAt_in?: DateTimeInput[] | DateTimeInput;
  startedAt_not_in?: DateTimeInput[] | DateTimeInput;
  startedAt_lt?: DateTimeInput;
  startedAt_lte?: DateTimeInput;
  startedAt_gt?: DateTimeInput;
  startedAt_gte?: DateTimeInput;
  endsAt?: DateTimeInput;
  endsAt_not?: DateTimeInput;
  endsAt_in?: DateTimeInput[] | DateTimeInput;
  endsAt_not_in?: DateTimeInput[] | DateTimeInput;
  endsAt_lt?: DateTimeInput;
  endsAt_lte?: DateTimeInput;
  endsAt_gt?: DateTimeInput;
  endsAt_gte?: DateTimeInput;
  endedAt?: DateTimeInput;
  endedAt_not?: DateTimeInput;
  endedAt_in?: DateTimeInput[] | DateTimeInput;
  endedAt_not_in?: DateTimeInput[] | DateTimeInput;
  endedAt_lt?: DateTimeInput;
  endedAt_lte?: DateTimeInput;
  endedAt_gt?: DateTimeInput;
  endedAt_gte?: DateTimeInput;
  stage?: Stage;
  stage_not?: Stage;
  stage_in?: Stage[] | Stage;
  stage_not_in?: Stage[] | Stage;
  summary_EN?: String;
  summary_EN_not?: String;
  summary_EN_in?: String[] | String;
  summary_EN_not_in?: String[] | String;
  summary_EN_lt?: String;
  summary_EN_lte?: String;
  summary_EN_gt?: String;
  summary_EN_gte?: String;
  summary_EN_contains?: String;
  summary_EN_not_contains?: String;
  summary_EN_starts_with?: String;
  summary_EN_not_starts_with?: String;
  summary_EN_ends_with?: String;
  summary_EN_not_ends_with?: String;
  summary_ZH?: String;
  summary_ZH_not?: String;
  summary_ZH_in?: String[] | String;
  summary_ZH_not_in?: String[] | String;
  summary_ZH_lt?: String;
  summary_ZH_lte?: String;
  summary_ZH_gt?: String;
  summary_ZH_gte?: String;
  summary_ZH_contains?: String;
  summary_ZH_not_contains?: String;
  summary_ZH_starts_with?: String;
  summary_ZH_not_starts_with?: String;
  summary_ZH_ends_with?: String;
  summary_ZH_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ClassSessionScalarWhereInput[] | ClassSessionScalarWhereInput;
  OR?: ClassSessionScalarWhereInput[] | ClassSessionScalarWhereInput;
  NOT?: ClassSessionScalarWhereInput[] | ClassSessionScalarWhereInput;
}

export interface ClassSessionUpdateManyWithWhereNestedInput {
  where: ClassSessionScalarWhereInput;
  data: ClassSessionUpdateManyDataInput;
}

export interface ClassSessionUpdateManyDataInput {
  startsAt?: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  endedAt?: DateTimeInput;
  stage?: Stage;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface SemesterUpdateOneRequiredWithoutGroupsInput {
  create?: SemesterCreateWithoutGroupsInput;
  update?: SemesterUpdateWithoutGroupsDataInput;
  upsert?: SemesterUpsertWithoutGroupsInput;
  connect?: SemesterWhereUniqueInput;
}

export interface SemesterUpdateWithoutGroupsDataInput {
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  name?: String;
}

export interface SemesterUpsertWithoutGroupsInput {
  update: SemesterUpdateWithoutGroupsDataInput;
  create: SemesterCreateWithoutGroupsInput;
}

export interface GroupUpsertWithWhereUniqueWithoutStudentsInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutStudentsDataInput;
  create: GroupCreateWithoutStudentsInput;
}

export interface GroupScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  OR?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  NOT?: GroupScalarWhereInput[] | GroupScalarWhereInput;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface GroupUpdateManyDataInput {
  name?: String;
}

export interface StudentUpsertWithoutAttendancesInput {
  update: StudentUpdateWithoutAttendancesDataInput;
  create: StudentCreateWithoutAttendancesInput;
}

export interface AttendanceUpsertWithWhereUniqueWithoutClassSessionInput {
  where: AttendanceWhereUniqueInput;
  update: AttendanceUpdateWithoutClassSessionDataInput;
  create: AttendanceCreateWithoutClassSessionInput;
}

export interface ClassSessionUpsertWithoutPointsInput {
  update: ClassSessionUpdateWithoutPointsDataInput;
  create: ClassSessionCreateWithoutPointsInput;
}

export interface PointUpsertWithWhereUniqueWithoutStudentInput {
  where: PointWhereUniqueInput;
  update: PointUpdateWithoutStudentDataInput;
  create: PointCreateWithoutStudentInput;
}

export interface StudentUpsertWithWhereUniqueWithoutGroupsInput {
  where: StudentWhereUniqueInput;
  update: StudentUpdateWithoutGroupsDataInput;
  create: StudentCreateWithoutGroupsInput;
}

export interface StudentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  chineseName?: String;
  chineseName_not?: String;
  chineseName_in?: String[] | String;
  chineseName_not_in?: String[] | String;
  chineseName_lt?: String;
  chineseName_lte?: String;
  chineseName_gt?: String;
  chineseName_gte?: String;
  chineseName_contains?: String;
  chineseName_not_contains?: String;
  chineseName_starts_with?: String;
  chineseName_not_starts_with?: String;
  chineseName_ends_with?: String;
  chineseName_not_ends_with?: String;
  englishName?: String;
  englishName_not?: String;
  englishName_in?: String[] | String;
  englishName_not_in?: String[] | String;
  englishName_lt?: String;
  englishName_lte?: String;
  englishName_gt?: String;
  englishName_gte?: String;
  englishName_contains?: String;
  englishName_not_contains?: String;
  englishName_starts_with?: String;
  englishName_not_starts_with?: String;
  englishName_ends_with?: String;
  englishName_not_ends_with?: String;
  pinyinName?: String;
  pinyinName_not?: String;
  pinyinName_in?: String[] | String;
  pinyinName_not_in?: String[] | String;
  pinyinName_lt?: String;
  pinyinName_lte?: String;
  pinyinName_gt?: String;
  pinyinName_gte?: String;
  pinyinName_contains?: String;
  pinyinName_not_contains?: String;
  pinyinName_starts_with?: String;
  pinyinName_not_starts_with?: String;
  pinyinName_ends_with?: String;
  pinyinName_not_ends_with?: String;
  birthdate?: DateTimeInput;
  birthdate_not?: DateTimeInput;
  birthdate_in?: DateTimeInput[] | DateTimeInput;
  birthdate_not_in?: DateTimeInput[] | DateTimeInput;
  birthdate_lt?: DateTimeInput;
  birthdate_lte?: DateTimeInput;
  birthdate_gt?: DateTimeInput;
  birthdate_gte?: DateTimeInput;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: StudentScalarWhereInput[] | StudentScalarWhereInput;
  OR?: StudentScalarWhereInput[] | StudentScalarWhereInput;
  NOT?: StudentScalarWhereInput[] | StudentScalarWhereInput;
}

export interface StudentUpdateManyWithWhereNestedInput {
  where: StudentScalarWhereInput;
  data: StudentUpdateManyDataInput;
}

export interface StudentUpdateManyDataInput {
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
}

export interface GroupUpsertWithoutClassSessionsInput {
  update: GroupUpdateWithoutClassSessionsDataInput;
  create: GroupCreateWithoutClassSessionsInput;
}

export interface ClassSessionUpsertWithoutAttendancesInput {
  update: ClassSessionUpdateWithoutAttendancesDataInput;
  create: ClassSessionCreateWithoutAttendancesInput;
}

export interface AttendanceUpdateManyMutationInput {
  status?: AttendanceStatus;
  arrivedAt?: DateTimeInput;
}

export interface ClassSessionCreateInput {
  id?: ID_Input;
  startsAt: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt: DateTimeInput;
  endedAt?: DateTimeInput;
  group: GroupCreateOneWithoutClassSessionsInput;
  points?: PointCreateManyWithoutClassSessionInput;
  attendances?: AttendanceCreateManyWithoutClassSessionInput;
  stage?: Stage;
  lesson?: LessonCreateOneInput;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface ClassSessionUpdateInput {
  startsAt?: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  endedAt?: DateTimeInput;
  group?: GroupUpdateOneRequiredWithoutClassSessionsInput;
  points?: PointUpdateManyWithoutClassSessionInput;
  attendances?: AttendanceUpdateManyWithoutClassSessionInput;
  stage?: Stage;
  lesson?: LessonUpdateOneInput;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface ClassSessionUpdateManyMutationInput {
  startsAt?: DateTimeInput;
  startedAt?: DateTimeInput;
  endsAt?: DateTimeInput;
  endedAt?: DateTimeInput;
  stage?: Stage;
  summary_EN?: String;
  summary_ZH?: String;
  published?: Boolean;
}

export interface GroupCreateInput {
  id?: ID_Input;
  name: String;
  students?: StudentCreateManyWithoutGroupsInput;
  classSessions?: ClassSessionCreateManyWithoutGroupInput;
  semester: SemesterCreateOneWithoutGroupsInput;
}

export interface GroupUpdateInput {
  name?: String;
  students?: StudentUpdateManyWithoutGroupsInput;
  classSessions?: ClassSessionUpdateManyWithoutGroupInput;
  semester?: SemesterUpdateOneRequiredWithoutGroupsInput;
}

export interface GroupUpdateManyMutationInput {
  name?: String;
}

export interface LessonUpdateInput {
  name?: String;
  tags?: TagUpdateManyInput;
  words?: WordUpdateManyWithoutLessonsInput;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
  materials?: MaterialUpdateManyInput;
}

export interface LessonUpdateManyMutationInput {
  name?: String;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
}

export interface MaterialUpdateInput {
  tags?: TagUpdateManyInput;
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface MaterialUpdateManyMutationInput {
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface MessageCreateInput {
  id?: ID_Input;
  data?: Json;
}

export interface MessageUpdateInput {
  data?: Json;
}

export interface MessageUpdateManyMutationInput {
  data?: Json;
}

export interface PointCreateInput {
  id?: ID_Input;
  value: Int;
  student: StudentCreateOneWithoutPointsInput;
  classSession: ClassSessionCreateOneWithoutPointsInput;
}

export interface PointUpdateInput {
  value?: Int;
  student?: StudentUpdateOneRequiredWithoutPointsInput;
  classSession?: ClassSessionUpdateOneRequiredWithoutPointsInput;
}

export interface PointUpdateManyMutationInput {
  value?: Int;
}

export interface SemesterCreateInput {
  id?: ID_Input;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  name: String;
  groups?: GroupCreateManyWithoutSemesterInput;
}

export interface GroupCreateManyWithoutSemesterInput {
  create?: GroupCreateWithoutSemesterInput[] | GroupCreateWithoutSemesterInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
}

export interface GroupCreateWithoutSemesterInput {
  id?: ID_Input;
  name: String;
  students?: StudentCreateManyWithoutGroupsInput;
  classSessions?: ClassSessionCreateManyWithoutGroupInput;
}

export interface SemesterUpdateInput {
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  name?: String;
  groups?: GroupUpdateManyWithoutSemesterInput;
}

export interface GroupUpdateManyWithoutSemesterInput {
  create?: GroupCreateWithoutSemesterInput[] | GroupCreateWithoutSemesterInput;
  delete?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  set?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  disconnect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  update?:
    | GroupUpdateWithWhereUniqueWithoutSemesterInput[]
    | GroupUpdateWithWhereUniqueWithoutSemesterInput;
  upsert?:
    | GroupUpsertWithWhereUniqueWithoutSemesterInput[]
    | GroupUpsertWithWhereUniqueWithoutSemesterInput;
  deleteMany?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  updateMany?:
    | GroupUpdateManyWithWhereNestedInput[]
    | GroupUpdateManyWithWhereNestedInput;
}

export interface GroupUpdateWithWhereUniqueWithoutSemesterInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutSemesterDataInput;
}

export interface GroupUpdateWithoutSemesterDataInput {
  name?: String;
  students?: StudentUpdateManyWithoutGroupsInput;
  classSessions?: ClassSessionUpdateManyWithoutGroupInput;
}

export interface GroupUpsertWithWhereUniqueWithoutSemesterInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutSemesterDataInput;
  create: GroupCreateWithoutSemesterInput;
}

export interface SemesterUpdateManyMutationInput {
  startDate?: DateTimeInput;
  endDate?: DateTimeInput;
  name?: String;
}

export interface StudentCreateInput {
  id?: ID_Input;
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
  groups?: GroupCreateManyWithoutStudentsInput;
  points?: PointCreateManyWithoutStudentInput;
  attendances?: AttendanceCreateManyWithoutStudentInput;
}

export interface StudentUpdateInput {
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
  groups?: GroupUpdateManyWithoutStudentsInput;
  points?: PointUpdateManyWithoutStudentInput;
  attendances?: AttendanceUpdateManyWithoutStudentInput;
}

export interface StudentUpdateManyMutationInput {
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeInput;
  gender?: Gender;
}

export interface TagUpdateInput {
  name?: String;
}

export interface TagUpdateManyMutationInput {
  name?: String;
}

export interface UserCreateInput {
  id?: ID_Input;
  username: String;
  password: String;
  role?: Role;
}

export interface UserUpdateInput {
  username?: String;
  password?: String;
  role?: Role;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  password?: String;
  role?: Role;
}

export interface ViewerCreateInput {
  id?: ID_Input;
  name?: String;
}

export interface ViewerUpdateInput {
  name?: String;
}

export interface ViewerUpdateManyMutationInput {
  name?: String;
}

export interface WordCreateInput {
  id?: ID_Input;
  english: String;
  chinese?: String;
  audio?: String;
  lessons?: LessonCreateManyWithoutWordsInput;
  tags?: TagCreateManyInput;
}

export interface LessonCreateManyWithoutWordsInput {
  create?: LessonCreateWithoutWordsInput[] | LessonCreateWithoutWordsInput;
  connect?: LessonWhereUniqueInput[] | LessonWhereUniqueInput;
}

export interface LessonCreateWithoutWordsInput {
  id?: ID_Input;
  name: String;
  tags?: TagCreateManyInput;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
  materials?: MaterialCreateManyInput;
}

export interface WordUpdateInput {
  english?: String;
  chinese?: String;
  audio?: String;
  lessons?: LessonUpdateManyWithoutWordsInput;
  tags?: TagUpdateManyInput;
}

export interface LessonUpdateManyWithoutWordsInput {
  create?: LessonCreateWithoutWordsInput[] | LessonCreateWithoutWordsInput;
  delete?: LessonWhereUniqueInput[] | LessonWhereUniqueInput;
  connect?: LessonWhereUniqueInput[] | LessonWhereUniqueInput;
  set?: LessonWhereUniqueInput[] | LessonWhereUniqueInput;
  disconnect?: LessonWhereUniqueInput[] | LessonWhereUniqueInput;
  update?:
    | LessonUpdateWithWhereUniqueWithoutWordsInput[]
    | LessonUpdateWithWhereUniqueWithoutWordsInput;
  upsert?:
    | LessonUpsertWithWhereUniqueWithoutWordsInput[]
    | LessonUpsertWithWhereUniqueWithoutWordsInput;
  deleteMany?: LessonScalarWhereInput[] | LessonScalarWhereInput;
  updateMany?:
    | LessonUpdateManyWithWhereNestedInput[]
    | LessonUpdateManyWithWhereNestedInput;
}

export interface LessonUpdateWithWhereUniqueWithoutWordsInput {
  where: LessonWhereUniqueInput;
  data: LessonUpdateWithoutWordsDataInput;
}

export interface LessonUpdateWithoutWordsDataInput {
  name?: String;
  tags?: TagUpdateManyInput;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
  materials?: MaterialUpdateManyInput;
}

export interface LessonUpsertWithWhereUniqueWithoutWordsInput {
  where: LessonWhereUniqueInput;
  update: LessonUpdateWithoutWordsDataInput;
  create: LessonCreateWithoutWordsInput;
}

export interface LessonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  homeworkEN?: String;
  homeworkEN_not?: String;
  homeworkEN_in?: String[] | String;
  homeworkEN_not_in?: String[] | String;
  homeworkEN_lt?: String;
  homeworkEN_lte?: String;
  homeworkEN_gt?: String;
  homeworkEN_gte?: String;
  homeworkEN_contains?: String;
  homeworkEN_not_contains?: String;
  homeworkEN_starts_with?: String;
  homeworkEN_not_starts_with?: String;
  homeworkEN_ends_with?: String;
  homeworkEN_not_ends_with?: String;
  homeworkZH?: String;
  homeworkZH_not?: String;
  homeworkZH_in?: String[] | String;
  homeworkZH_not_in?: String[] | String;
  homeworkZH_lt?: String;
  homeworkZH_lte?: String;
  homeworkZH_gt?: String;
  homeworkZH_gte?: String;
  homeworkZH_contains?: String;
  homeworkZH_not_contains?: String;
  homeworkZH_starts_with?: String;
  homeworkZH_not_starts_with?: String;
  homeworkZH_ends_with?: String;
  homeworkZH_not_ends_with?: String;
  summaryEN?: String;
  summaryEN_not?: String;
  summaryEN_in?: String[] | String;
  summaryEN_not_in?: String[] | String;
  summaryEN_lt?: String;
  summaryEN_lte?: String;
  summaryEN_gt?: String;
  summaryEN_gte?: String;
  summaryEN_contains?: String;
  summaryEN_not_contains?: String;
  summaryEN_starts_with?: String;
  summaryEN_not_starts_with?: String;
  summaryEN_ends_with?: String;
  summaryEN_not_ends_with?: String;
  summaryZH?: String;
  summaryZH_not?: String;
  summaryZH_in?: String[] | String;
  summaryZH_not_in?: String[] | String;
  summaryZH_lt?: String;
  summaryZH_lte?: String;
  summaryZH_gt?: String;
  summaryZH_gte?: String;
  summaryZH_contains?: String;
  summaryZH_not_contains?: String;
  summaryZH_starts_with?: String;
  summaryZH_not_starts_with?: String;
  summaryZH_ends_with?: String;
  summaryZH_not_ends_with?: String;
  AND?: LessonScalarWhereInput[] | LessonScalarWhereInput;
  OR?: LessonScalarWhereInput[] | LessonScalarWhereInput;
  NOT?: LessonScalarWhereInput[] | LessonScalarWhereInput;
}

export interface LessonUpdateManyWithWhereNestedInput {
  where: LessonScalarWhereInput;
  data: LessonUpdateManyDataInput;
}

export interface LessonUpdateManyDataInput {
  name?: String;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
}

export interface WordUpdateManyMutationInput {
  english?: String;
  chinese?: String;
  audio?: String;
}

export interface AttendanceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AttendanceWhereInput;
  AND?: AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput;
  OR?: AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput;
  NOT?: AttendanceSubscriptionWhereInput[] | AttendanceSubscriptionWhereInput;
}

export interface ClassSessionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ClassSessionWhereInput;
  AND?:
    | ClassSessionSubscriptionWhereInput[]
    | ClassSessionSubscriptionWhereInput;
  OR?:
    | ClassSessionSubscriptionWhereInput[]
    | ClassSessionSubscriptionWhereInput;
  NOT?:
    | ClassSessionSubscriptionWhereInput[]
    | ClassSessionSubscriptionWhereInput;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GroupWhereInput;
  AND?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  OR?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  NOT?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
}

export interface LessonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LessonWhereInput;
  AND?: LessonSubscriptionWhereInput[] | LessonSubscriptionWhereInput;
  OR?: LessonSubscriptionWhereInput[] | LessonSubscriptionWhereInput;
  NOT?: LessonSubscriptionWhereInput[] | LessonSubscriptionWhereInput;
}

export interface MaterialSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MaterialWhereInput;
  AND?: MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput;
  OR?: MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput;
  NOT?: MaterialSubscriptionWhereInput[] | MaterialSubscriptionWhereInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface PointSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PointWhereInput;
  AND?: PointSubscriptionWhereInput[] | PointSubscriptionWhereInput;
  OR?: PointSubscriptionWhereInput[] | PointSubscriptionWhereInput;
  NOT?: PointSubscriptionWhereInput[] | PointSubscriptionWhereInput;
}

export interface SemesterSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SemesterWhereInput;
  AND?: SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput;
  OR?: SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput;
  NOT?: SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput;
}

export interface StudentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StudentWhereInput;
  AND?: StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput;
  OR?: StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput;
  NOT?: StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TagWhereInput;
  AND?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  OR?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  NOT?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ViewerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ViewerWhereInput;
  AND?: ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput;
  OR?: ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput;
  NOT?: ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput;
}

export interface WordSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WordWhereInput;
  AND?: WordSubscriptionWhereInput[] | WordSubscriptionWhereInput;
  OR?: WordSubscriptionWhereInput[] | WordSubscriptionWhereInput;
  NOT?: WordSubscriptionWhereInput[] | WordSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Attendance {
  id: ID_Output;
  status: AttendanceStatus;
  arrivedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AttendancePromise extends Promise<Attendance>, Fragmentable {
  classSession: <T = ClassSessionPromise>() => T;
  id: () => Promise<ID_Output>;
  student: <T = StudentPromise>() => T;
  status: () => Promise<AttendanceStatus>;
  arrivedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AttendanceSubscription
  extends Promise<AsyncIterator<Attendance>>,
    Fragmentable {
  classSession: <T = ClassSessionSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  student: <T = StudentSubscription>() => T;
  status: () => Promise<AsyncIterator<AttendanceStatus>>;
  arrivedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClassSession {
  id: ID_Output;
  startsAt: DateTimeOutput;
  startedAt?: DateTimeOutput;
  endsAt: DateTimeOutput;
  endedAt?: DateTimeOutput;
  stage: Stage;
  summary_EN?: String;
  summary_ZH?: String;
  published: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClassSessionPromise
  extends Promise<ClassSession>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startsAt: () => Promise<DateTimeOutput>;
  startedAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  endedAt: () => Promise<DateTimeOutput>;
  group: <T = GroupPromise>() => T;
  points: <T = FragmentableArray<Point>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = FragmentableArray<Attendance>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  stage: () => Promise<Stage>;
  lesson: <T = LessonPromise>() => T;
  summary_EN: () => Promise<String>;
  summary_ZH: () => Promise<String>;
  published: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassSessionSubscription
  extends Promise<AsyncIterator<ClassSession>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  group: <T = GroupSubscription>() => T;
  points: <T = Promise<AsyncIterator<PointSubscription>>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = Promise<AsyncIterator<AttendanceSubscription>>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  stage: () => Promise<AsyncIterator<Stage>>;
  lesson: <T = LessonSubscription>() => T;
  summary_EN: () => Promise<AsyncIterator<String>>;
  summary_ZH: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Group {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classSessions: <T = FragmentableArray<ClassSession>>(args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  semester: <T = SemesterPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  students: <T = Promise<AsyncIterator<StudentSubscription>>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classSessions: <T = Promise<AsyncIterator<ClassSessionSubscription>>>(args?: {
    where?: ClassSessionWhereInput;
    orderBy?: ClassSessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  semester: <T = SemesterSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Student {
  id: ID_Output;
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeOutput;
  gender?: Gender;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StudentPromise extends Promise<Student>, Fragmentable {
  id: () => Promise<ID_Output>;
  chineseName: () => Promise<String>;
  englishName: () => Promise<String>;
  pinyinName: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  points: <T = FragmentableArray<Point>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = FragmentableArray<Attendance>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StudentSubscription
  extends Promise<AsyncIterator<Student>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chineseName: () => Promise<AsyncIterator<String>>;
  englishName: () => Promise<AsyncIterator<String>>;
  pinyinName: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  points: <T = Promise<AsyncIterator<PointSubscription>>>(args?: {
    where?: PointWhereInput;
    orderBy?: PointOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendances: <T = Promise<AsyncIterator<AttendanceSubscription>>>(args?: {
    where?: AttendanceWhereInput;
    orderBy?: AttendanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Point {
  id: ID_Output;
  value: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PointPromise extends Promise<Point>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  student: <T = StudentPromise>() => T;
  classSession: <T = ClassSessionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PointSubscription
  extends Promise<AsyncIterator<Point>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<Int>>;
  student: <T = StudentSubscription>() => T;
  classSession: <T = ClassSessionSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Semester {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SemesterPromise extends Promise<Semester>, Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SemesterSubscription
  extends Promise<AsyncIterator<Semester>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Lesson {
  id: ID_Output;
  name: String;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
}

export interface LessonPromise extends Promise<Lesson>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = FragmentableArray<Word>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  homeworkEN: () => Promise<String>;
  homeworkZH: () => Promise<String>;
  summaryEN: () => Promise<String>;
  summaryZH: () => Promise<String>;
  materials: <T = FragmentableArray<Material>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LessonSubscription
  extends Promise<AsyncIterator<Lesson>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  words: <T = Promise<AsyncIterator<WordSubscription>>>(args?: {
    where?: WordWhereInput;
    orderBy?: WordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  homeworkEN: () => Promise<AsyncIterator<String>>;
  homeworkZH: () => Promise<AsyncIterator<String>>;
  summaryEN: () => Promise<AsyncIterator<String>>;
  summaryZH: () => Promise<AsyncIterator<String>>;
  materials: <T = Promise<AsyncIterator<MaterialSubscription>>>(args?: {
    where?: MaterialWhereInput;
    orderBy?: MaterialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Tag {
  id: ID_Output;
  name: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Word {
  id: ID_Output;
  english: String;
  chinese?: String;
  audio?: String;
}

export interface WordPromise extends Promise<Word>, Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  chinese: () => Promise<String>;
  audio: () => Promise<String>;
  lessons: <T = FragmentableArray<Lesson>>(args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WordSubscription
  extends Promise<AsyncIterator<Word>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  english: () => Promise<AsyncIterator<String>>;
  chinese: () => Promise<AsyncIterator<String>>;
  audio: () => Promise<AsyncIterator<String>>;
  lessons: <T = Promise<AsyncIterator<LessonSubscription>>>(args?: {
    where?: LessonWhereInput;
    orderBy?: LessonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Material {
  id: ID_Output;
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface MaterialPromise extends Promise<Material>, Fragmentable {
  id: () => Promise<ID_Output>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<String>;
  url: () => Promise<String>;
  title: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface MaterialSubscription
  extends Promise<AsyncIterator<Material>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface AttendanceConnection {
  pageInfo: PageInfo;
  edges: AttendanceEdge[];
}

export interface AttendanceConnectionPromise
  extends Promise<AttendanceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttendanceEdge>>() => T;
  aggregate: <T = AggregateAttendancePromise>() => T;
}

export interface AttendanceConnectionSubscription
  extends Promise<AsyncIterator<AttendanceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttendanceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttendanceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AttendanceEdge {
  node: Attendance;
  cursor: String;
}

export interface AttendanceEdgePromise
  extends Promise<AttendanceEdge>,
    Fragmentable {
  node: <T = AttendancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttendanceEdgeSubscription
  extends Promise<AsyncIterator<AttendanceEdge>>,
    Fragmentable {
  node: <T = AttendanceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttendance {
  count: Int;
}

export interface AggregateAttendancePromise
  extends Promise<AggregateAttendance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttendanceSubscription
  extends Promise<AsyncIterator<AggregateAttendance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClassSessionConnection {
  pageInfo: PageInfo;
  edges: ClassSessionEdge[];
}

export interface ClassSessionConnectionPromise
  extends Promise<ClassSessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassSessionEdge>>() => T;
  aggregate: <T = AggregateClassSessionPromise>() => T;
}

export interface ClassSessionConnectionSubscription
  extends Promise<AsyncIterator<ClassSessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassSessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassSessionSubscription>() => T;
}

export interface ClassSessionEdge {
  node: ClassSession;
  cursor: String;
}

export interface ClassSessionEdgePromise
  extends Promise<ClassSessionEdge>,
    Fragmentable {
  node: <T = ClassSessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassSessionEdgeSubscription
  extends Promise<AsyncIterator<ClassSessionEdge>>,
    Fragmentable {
  node: <T = ClassSessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClassSession {
  count: Int;
}

export interface AggregateClassSessionPromise
  extends Promise<AggregateClassSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassSessionSubscription
  extends Promise<AsyncIterator<AggregateClassSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LessonConnection {
  pageInfo: PageInfo;
  edges: LessonEdge[];
}

export interface LessonConnectionPromise
  extends Promise<LessonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LessonEdge>>() => T;
  aggregate: <T = AggregateLessonPromise>() => T;
}

export interface LessonConnectionSubscription
  extends Promise<AsyncIterator<LessonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LessonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLessonSubscription>() => T;
}

export interface LessonEdge {
  node: Lesson;
  cursor: String;
}

export interface LessonEdgePromise extends Promise<LessonEdge>, Fragmentable {
  node: <T = LessonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LessonEdgeSubscription
  extends Promise<AsyncIterator<LessonEdge>>,
    Fragmentable {
  node: <T = LessonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLesson {
  count: Int;
}

export interface AggregateLessonPromise
  extends Promise<AggregateLesson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLessonSubscription
  extends Promise<AsyncIterator<AggregateLesson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MaterialConnection {
  pageInfo: PageInfo;
  edges: MaterialEdge[];
}

export interface MaterialConnectionPromise
  extends Promise<MaterialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MaterialEdge>>() => T;
  aggregate: <T = AggregateMaterialPromise>() => T;
}

export interface MaterialConnectionSubscription
  extends Promise<AsyncIterator<MaterialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MaterialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMaterialSubscription>() => T;
}

export interface MaterialEdge {
  node: Material;
  cursor: String;
}

export interface MaterialEdgePromise
  extends Promise<MaterialEdge>,
    Fragmentable {
  node: <T = MaterialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MaterialEdgeSubscription
  extends Promise<AsyncIterator<MaterialEdge>>,
    Fragmentable {
  node: <T = MaterialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMaterial {
  count: Int;
}

export interface AggregateMaterialPromise
  extends Promise<AggregateMaterial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMaterialSubscription
  extends Promise<AsyncIterator<AggregateMaterial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Message {
  id: ID_Output;
  data?: Json;
  createdAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PointConnection {
  pageInfo: PageInfo;
  edges: PointEdge[];
}

export interface PointConnectionPromise
  extends Promise<PointConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PointEdge>>() => T;
  aggregate: <T = AggregatePointPromise>() => T;
}

export interface PointConnectionSubscription
  extends Promise<AsyncIterator<PointConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PointEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePointSubscription>() => T;
}

export interface PointEdge {
  node: Point;
  cursor: String;
}

export interface PointEdgePromise extends Promise<PointEdge>, Fragmentable {
  node: <T = PointPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PointEdgeSubscription
  extends Promise<AsyncIterator<PointEdge>>,
    Fragmentable {
  node: <T = PointSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePoint {
  count: Int;
}

export interface AggregatePointPromise
  extends Promise<AggregatePoint>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePointSubscription
  extends Promise<AsyncIterator<AggregatePoint>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SemesterConnection {
  pageInfo: PageInfo;
  edges: SemesterEdge[];
}

export interface SemesterConnectionPromise
  extends Promise<SemesterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SemesterEdge>>() => T;
  aggregate: <T = AggregateSemesterPromise>() => T;
}

export interface SemesterConnectionSubscription
  extends Promise<AsyncIterator<SemesterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SemesterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSemesterSubscription>() => T;
}

export interface SemesterEdge {
  node: Semester;
  cursor: String;
}

export interface SemesterEdgePromise
  extends Promise<SemesterEdge>,
    Fragmentable {
  node: <T = SemesterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SemesterEdgeSubscription
  extends Promise<AsyncIterator<SemesterEdge>>,
    Fragmentable {
  node: <T = SemesterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSemester {
  count: Int;
}

export interface AggregateSemesterPromise
  extends Promise<AggregateSemester>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSemesterSubscription
  extends Promise<AsyncIterator<AggregateSemester>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StudentConnection {
  pageInfo: PageInfo;
  edges: StudentEdge[];
}

export interface StudentConnectionPromise
  extends Promise<StudentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StudentEdge>>() => T;
  aggregate: <T = AggregateStudentPromise>() => T;
}

export interface StudentConnectionSubscription
  extends Promise<AsyncIterator<StudentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StudentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStudentSubscription>() => T;
}

export interface StudentEdge {
  node: Student;
  cursor: String;
}

export interface StudentEdgePromise extends Promise<StudentEdge>, Fragmentable {
  node: <T = StudentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StudentEdgeSubscription
  extends Promise<AsyncIterator<StudentEdge>>,
    Fragmentable {
  node: <T = StudentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStudent {
  count: Int;
}

export interface AggregateStudentPromise
  extends Promise<AggregateStudent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStudentSubscription
  extends Promise<AsyncIterator<AggregateStudent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role?: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Viewer {
  id: ID_Output;
  name?: String;
  createdAt: DateTimeOutput;
}

export interface ViewerPromise extends Promise<Viewer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ViewerSubscription
  extends Promise<AsyncIterator<Viewer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ViewerConnection {
  pageInfo: PageInfo;
  edges: ViewerEdge[];
}

export interface ViewerConnectionPromise
  extends Promise<ViewerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ViewerEdge>>() => T;
  aggregate: <T = AggregateViewerPromise>() => T;
}

export interface ViewerConnectionSubscription
  extends Promise<AsyncIterator<ViewerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ViewerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateViewerSubscription>() => T;
}

export interface ViewerEdge {
  node: Viewer;
  cursor: String;
}

export interface ViewerEdgePromise extends Promise<ViewerEdge>, Fragmentable {
  node: <T = ViewerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ViewerEdgeSubscription
  extends Promise<AsyncIterator<ViewerEdge>>,
    Fragmentable {
  node: <T = ViewerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateViewer {
  count: Int;
}

export interface AggregateViewerPromise
  extends Promise<AggregateViewer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateViewerSubscription
  extends Promise<AsyncIterator<AggregateViewer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WordConnection {
  pageInfo: PageInfo;
  edges: WordEdge[];
}

export interface WordConnectionPromise
  extends Promise<WordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WordEdge>>() => T;
  aggregate: <T = AggregateWordPromise>() => T;
}

export interface WordConnectionSubscription
  extends Promise<AsyncIterator<WordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordSubscription>() => T;
}

export interface WordEdge {
  node: Word;
  cursor: String;
}

export interface WordEdgePromise extends Promise<WordEdge>, Fragmentable {
  node: <T = WordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WordEdgeSubscription
  extends Promise<AsyncIterator<WordEdge>>,
    Fragmentable {
  node: <T = WordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWord {
  count: Int;
}

export interface AggregateWordPromise
  extends Promise<AggregateWord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordSubscription
  extends Promise<AsyncIterator<AggregateWord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AttendanceSubscriptionPayload {
  mutation: MutationType;
  node: Attendance;
  updatedFields: String[];
  previousValues: AttendancePreviousValues;
}

export interface AttendanceSubscriptionPayloadPromise
  extends Promise<AttendanceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttendancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttendancePreviousValuesPromise>() => T;
}

export interface AttendanceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttendanceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttendanceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttendancePreviousValuesSubscription>() => T;
}

export interface AttendancePreviousValues {
  id: ID_Output;
  status: AttendanceStatus;
  arrivedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AttendancePreviousValuesPromise
  extends Promise<AttendancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<AttendanceStatus>;
  arrivedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AttendancePreviousValuesSubscription
  extends Promise<AsyncIterator<AttendancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<AttendanceStatus>>;
  arrivedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClassSessionSubscriptionPayload {
  mutation: MutationType;
  node: ClassSession;
  updatedFields: String[];
  previousValues: ClassSessionPreviousValues;
}

export interface ClassSessionSubscriptionPayloadPromise
  extends Promise<ClassSessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassSessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassSessionPreviousValuesPromise>() => T;
}

export interface ClassSessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassSessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassSessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassSessionPreviousValuesSubscription>() => T;
}

export interface ClassSessionPreviousValues {
  id: ID_Output;
  startsAt: DateTimeOutput;
  startedAt?: DateTimeOutput;
  endsAt: DateTimeOutput;
  endedAt?: DateTimeOutput;
  stage: Stage;
  summary_EN?: String;
  summary_ZH?: String;
  published: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ClassSessionPreviousValuesPromise
  extends Promise<ClassSessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startsAt: () => Promise<DateTimeOutput>;
  startedAt: () => Promise<DateTimeOutput>;
  endsAt: () => Promise<DateTimeOutput>;
  endedAt: () => Promise<DateTimeOutput>;
  stage: () => Promise<Stage>;
  summary_EN: () => Promise<String>;
  summary_ZH: () => Promise<String>;
  published: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassSessionPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassSessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  startedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endsAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stage: () => Promise<AsyncIterator<Stage>>;
  summary_EN: () => Promise<AsyncIterator<String>>;
  summary_ZH: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LessonSubscriptionPayload {
  mutation: MutationType;
  node: Lesson;
  updatedFields: String[];
  previousValues: LessonPreviousValues;
}

export interface LessonSubscriptionPayloadPromise
  extends Promise<LessonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LessonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LessonPreviousValuesPromise>() => T;
}

export interface LessonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LessonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LessonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LessonPreviousValuesSubscription>() => T;
}

export interface LessonPreviousValues {
  id: ID_Output;
  name: String;
  homeworkEN?: String;
  homeworkZH?: String;
  summaryEN?: String;
  summaryZH?: String;
}

export interface LessonPreviousValuesPromise
  extends Promise<LessonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  homeworkEN: () => Promise<String>;
  homeworkZH: () => Promise<String>;
  summaryEN: () => Promise<String>;
  summaryZH: () => Promise<String>;
}

export interface LessonPreviousValuesSubscription
  extends Promise<AsyncIterator<LessonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  homeworkEN: () => Promise<AsyncIterator<String>>;
  homeworkZH: () => Promise<AsyncIterator<String>>;
  summaryEN: () => Promise<AsyncIterator<String>>;
  summaryZH: () => Promise<AsyncIterator<String>>;
}

export interface MaterialSubscriptionPayload {
  mutation: MutationType;
  node: Material;
  updatedFields: String[];
  previousValues: MaterialPreviousValues;
}

export interface MaterialSubscriptionPayloadPromise
  extends Promise<MaterialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MaterialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MaterialPreviousValuesPromise>() => T;
}

export interface MaterialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MaterialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MaterialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MaterialPreviousValuesSubscription>() => T;
}

export interface MaterialPreviousValues {
  id: ID_Output;
  type?: String;
  url?: String;
  title?: String;
  notes?: String;
}

export interface MaterialPreviousValuesPromise
  extends Promise<MaterialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  url: () => Promise<String>;
  title: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface MaterialPreviousValuesSubscription
  extends Promise<AsyncIterator<MaterialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  data?: Json;
  createdAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PointSubscriptionPayload {
  mutation: MutationType;
  node: Point;
  updatedFields: String[];
  previousValues: PointPreviousValues;
}

export interface PointSubscriptionPayloadPromise
  extends Promise<PointSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PointPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PointPreviousValuesPromise>() => T;
}

export interface PointSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PointSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PointSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PointPreviousValuesSubscription>() => T;
}

export interface PointPreviousValues {
  id: ID_Output;
  value: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PointPreviousValuesPromise
  extends Promise<PointPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PointPreviousValuesSubscription
  extends Promise<AsyncIterator<PointPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SemesterSubscriptionPayload {
  mutation: MutationType;
  node: Semester;
  updatedFields: String[];
  previousValues: SemesterPreviousValues;
}

export interface SemesterSubscriptionPayloadPromise
  extends Promise<SemesterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SemesterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SemesterPreviousValuesPromise>() => T;
}

export interface SemesterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SemesterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SemesterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SemesterPreviousValuesSubscription>() => T;
}

export interface SemesterPreviousValues {
  id: ID_Output;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SemesterPreviousValuesPromise
  extends Promise<SemesterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SemesterPreviousValuesSubscription
  extends Promise<AsyncIterator<SemesterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StudentSubscriptionPayload {
  mutation: MutationType;
  node: Student;
  updatedFields: String[];
  previousValues: StudentPreviousValues;
}

export interface StudentSubscriptionPayloadPromise
  extends Promise<StudentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StudentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StudentPreviousValuesPromise>() => T;
}

export interface StudentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StudentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StudentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StudentPreviousValuesSubscription>() => T;
}

export interface StudentPreviousValues {
  id: ID_Output;
  chineseName?: String;
  englishName?: String;
  pinyinName?: String;
  birthdate?: DateTimeOutput;
  gender?: Gender;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StudentPreviousValuesPromise
  extends Promise<StudentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chineseName: () => Promise<String>;
  englishName: () => Promise<String>;
  pinyinName: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StudentPreviousValuesSubscription
  extends Promise<AsyncIterator<StudentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chineseName: () => Promise<AsyncIterator<String>>;
  englishName: () => Promise<AsyncIterator<String>>;
  pinyinName: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role?: Role;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface ViewerSubscriptionPayload {
  mutation: MutationType;
  node: Viewer;
  updatedFields: String[];
  previousValues: ViewerPreviousValues;
}

export interface ViewerSubscriptionPayloadPromise
  extends Promise<ViewerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ViewerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ViewerPreviousValuesPromise>() => T;
}

export interface ViewerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ViewerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ViewerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ViewerPreviousValuesSubscription>() => T;
}

export interface ViewerPreviousValues {
  id: ID_Output;
  name?: String;
  createdAt: DateTimeOutput;
}

export interface ViewerPreviousValuesPromise
  extends Promise<ViewerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ViewerPreviousValuesSubscription
  extends Promise<AsyncIterator<ViewerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WordSubscriptionPayload {
  mutation: MutationType;
  node: Word;
  updatedFields: String[];
  previousValues: WordPreviousValues;
}

export interface WordSubscriptionPayloadPromise
  extends Promise<WordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordPreviousValuesPromise>() => T;
}

export interface WordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordPreviousValuesSubscription>() => T;
}

export interface WordPreviousValues {
  id: ID_Output;
  english: String;
  chinese?: String;
  audio?: String;
}

export interface WordPreviousValuesPromise
  extends Promise<WordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  chinese: () => Promise<String>;
  audio: () => Promise<String>;
}

export interface WordPreviousValuesSubscription
  extends Promise<AsyncIterator<WordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  english: () => Promise<AsyncIterator<String>>;
  chinese: () => Promise<AsyncIterator<String>>;
  audio: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Json = any;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Student",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "ClassSession",
    embedded: false
  },
  {
    name: "Semester",
    embedded: false
  },
  {
    name: "Point",
    embedded: false
  },
  {
    name: "Stage",
    embedded: false
  },
  {
    name: "Attendance",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Lesson",
    embedded: false
  },
  {
    name: "Material",
    embedded: false
  },
  {
    name: "Word",
    embedded: false
  },
  {
    name: "AttendanceStatus",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Viewer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
