type User {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  username: String! @unique
  password: String!
  role: Role
}

enum Role {
  Admin
}

type Student {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  chineseName: String
  englishName: String
  pinyinName: String
  birthdate: String
  gender: Gender
  groups: [Group!]!
  points: [Point!]! @relation(onDelete: CASCADE)
  attendances: [Attendance!]! @relation(onDelete: CASCADE)
  lastLogin: DateTime
  password: String
}

enum Gender {
  M
  F
}

type Group {
  # a group of students attending class together
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  name: String!
  students: [Student!]! @relation(onDelete: SET_NULL)
  classSessions: [ClassSession!]!
  semester: Semester! @relation(link: INLINE)
}

type ClassSession {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  stage: Stage! @default(value: Inactive)
  group: Group! @relation(link: INLINE)
  points: [Point!]! @relation(onDelete: CASCADE)
  attendances: [Attendance!]! @relation(onDelete: CASCADE)
  lesson: Lesson @relation(link: INLINE)
  report: Report @relation(link: INLINE)
}

type Report {
  id: ID! @id
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
  performance: String
  published: Boolean! @default(value: false)
  materials: [Material!]!
  words: [Word!]!
}

type Semester {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  startDate: DateTime!
  endDate: DateTime!
  name: String! @unique
  groups: [Group!]!
}

type Point {
  # points awarded to students during the lesson, can be positive or negative
  id: ID! @id
  value: Int!
  student: Student! @relation(link: INLINE)
  classSession: ClassSession! @relation(link: INLINE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

# used in ClassSession
enum Stage {
  Inactive # scheduled, but teacher hasn't viewed
  Active # preclass, time for attendance
  Started # class time
  Ended # teacher has ended the class
}

type Attendance {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  arrivedAt: DateTime
  student: Student! @relation(link: INLINE)
  status: AttendanceStatus!
  classSession: ClassSession!
}

type Tag {
  id: ID! @id
  name: String! @unique
  lessons: [Lesson!]!
  words: [Word!]!
  materials: [Material!]!
}

type Lesson {
  id: ID! @id
  name: String!
  homeworkEN: String
  homeworkZH: String
  summaryEN: String
  summaryZH: String
  tags: [Tag!]!
  words: [Word!]!
  materials: [Material!]!
}

type Material {
  id: ID! @id
  type: String
  url: String
  title: String
  notes: String
  tags: [Tag!]!
  imageUrl: String
}

type Word {
  id: ID! @id
  english: String!
  chinese: String
  audio: String
  lessons: [Lesson!]!
  tags: [Tag!]!
}

# used in Attendance
enum AttendanceStatus {
  Absent
  Present
  Late
  LeftEarly
  LateLeftEarly
}

type Message {
  id: ID! @id
  data: Json
  createdAt: DateTime! @createdAt
}

type Viewer {
  id: ID! @id
  createdAt: DateTime! @createdAt
  name: String
}
