type User {
  id: ID! @id
  username: String! @unique
  password: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  role: Role
}

enum Role {
  Admin
}

type Student {
  id: ID! @id
  chineseName: String!
  englishName: String!
  pinyinName: String
  birthdate: DateTime
  gender: Gender
  groups: [Group!]!
  points: [Point!]!
  attendances: [Attendance!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum Gender {
  M
  F
}

type Group {
  # a group of students attending class together
  id: ID! @id
  name: String!
  students: [Student!]!
  classSessions: [ClassSession!]!
  semester: Semester! @relation(link: INLINE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ClassSession {
  id: ID! @id
  startsAt: DateTime!
  startedAt: DateTime
  endsAt: DateTime!
  endedAt: DateTime
  group: Group! @relation(link: INLINE)
  points: [Point!]!
  attendances: [Attendance!]!
  stage: Stage! @default(value: Inactive)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Semester {
  id: ID! @id
  startDate: DateTime!
  endDate: DateTime!
  name: String! @unique
  groups: [Group!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Point {
  # points awarded to students during the lesson, can be positive or negative
  id: ID! @id
  value: Int!
  student: Student! @relation(link: INLINE)
  classSession: ClassSession! @relation(link: INLINE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

# used in ClassSession
enum Stage {
  Inactive # scheduled, but teacher hasn't viewed
  Active # preclass, time for attendance
  Started # class time
  Ended # teacher has ended the class
}

type Attendance {
  classSession: ClassSession!
  id: ID! @id
  student: Student! @relation(link: INLINE)
  status: AttendanceStatus! @relation(link: INLINE)
  arrivedAt: DateTime
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

# used in Attendance
enum AttendanceStatus {
  Absent
  Present
  Late
  LeftEarly
  LateLeftEarly
}

type Message {
  id: ID! @id
  data: Json
  createdAt: DateTime! @createdAt
}

type Viewer {
  id: ID! @id
  name: String
  createdAt: DateTime! @createdAt
}
